// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const HNSW = 57675
const ZONEMAP = 57676
const LEADING = 57677
const BOTH = 57678
const TRAILING = 57679
const UNKNOWN = 57680
const LISTS = 57681
const OP_TYPE = 57682
const REINDEX = 57683
const EF_SEARCH = 57684
const EF_CONSTRUCTION = 57685
const M = 57686
const QUANTIZATION = 57687
const ASYNC = 57688
const EXPIRE = 57689
const ACCOUNT = 57690
const ACCOUNTS = 57691
const UNLOCK = 57692
const DAY = 57693
const NEVER = 57694
const PUMP = 57695
const MYSQL_COMPATIBILITY_MODE = 57696
const UNIQUE_CHECK_ON_AUTOINCR = 57697
const MODIFY = 57698
const CHANGE = 57699
const SECOND = 57700
const ASCII = 57701
const COALESCE = 57702
const COLLATION = 57703
const HOUR = 57704
const MICROSECOND = 57705
const MINUTE = 57706
const MONTH = 57707
const QUARTER = 57708
const REPEAT = 57709
const REVERSE = 57710
const ROW_COUNT = 57711
const WEEK = 57712
const REVOKE = 57713
const FUNCTION = 57714
const PRIVILEGES = 57715
const TABLESPACE = 57716
const EXECUTE = 57717
const SUPER = 57718
const GRANT = 57719
const OPTION = 57720
const REFERENCES = 57721
const REPLICATION = 57722
const SLAVE = 57723
const CLIENT = 57724
const USAGE = 57725
const RELOAD = 57726
const FILE = 57727
const TEMPORARY = 57728
const ROUTINE = 57729
const EVENT = 57730
const SHUTDOWN = 57731
const NULLX = 57732
const AUTO_INCREMENT = 57733
const APPROXNUM = 57734
const SIGNED = 57735
const UNSIGNED = 57736
const ZEROFILL = 57737
const ENGINES = 57738
const LOW_CARDINALITY = 57739
const AUTOEXTEND_SIZE = 57740
const ADMIN_NAME = 57741
const RANDOM = 57742
const SUSPEND = 57743
const ATTRIBUTE = 57744
const HISTORY = 57745
const REUSE = 57746
const CURRENT = 57747
const OPTIONAL = 57748
const FAILED_LOGIN_ATTEMPTS = 57749
const PASSWORD_LOCK_TIME = 57750
const UNBOUNDED = 57751
const SECONDARY = 57752
const RESTRICTED = 57753
const USER = 57754
const IDENTIFIED = 57755
const CIPHER = 57756
const ISSUER = 57757
const X509 = 57758
const SUBJECT = 57759
const SAN = 57760
const REQUIRE = 57761
const SSL = 57762
const NONE = 57763
const PASSWORD = 57764
const SHARED = 57765
const EXCLUSIVE = 57766
const MAX_QUERIES_PER_HOUR = 57767
const MAX_UPDATES_PER_HOUR = 57768
const MAX_CONNECTIONS_PER_HOUR = 57769
const MAX_USER_CONNECTIONS = 57770
const FORMAT = 57771
const VERBOSE = 57772
const CONNECTION = 57773
const TRIGGERS = 57774
const PROFILES = 57775
const LOAD = 57776
const INLINE = 57777
const INFILE = 57778
const TERMINATED = 57779
const OPTIONALLY = 57780
const ENCLOSED = 57781
const ESCAPED = 57782
const STARTING = 57783
const LINES = 57784
const ROWS = 57785
const IMPORT = 57786
const DISCARD = 57787
const JSONTYPE = 57788
const MODUMP = 57789
const OVER = 57790
const PRECEDING = 57791
const FOLLOWING = 57792
const GROUPS = 57793
const DATABASES = 57794
const TABLES = 57795
const SEQUENCES = 57796
const EXTENDED = 57797
const FULL = 57798
const PROCESSLIST = 57799
const FIELDS = 57800
const COLUMNS = 57801
const OPEN = 57802
const ERRORS = 57803
const WARNINGS = 57804
const INDEXES = 57805
const SCHEMAS = 57806
const NODE = 57807
const LOCKS = 57808
const ROLES = 57809
const TABLE_NUMBER = 57810
const COLUMN_NUMBER = 57811
const TABLE_VALUES = 57812
const TABLE_SIZE = 57813
const NAMES = 57814
const GLOBAL = 57815
const PERSIST = 57816
const SESSION = 57817
const ISOLATION = 57818
const LEVEL = 57819
const READ = 57820
const WRITE = 57821
const ONLY = 57822
const REPEATABLE = 57823
const COMMITTED = 57824
const UNCOMMITTED = 57825
const SERIALIZABLE = 57826
const LOCAL = 57827
const EVENTS = 57828
const PLUGINS = 57829
const CURRENT_TIMESTAMP = 57830
const DATABASE = 57831
const CURRENT_TIME = 57832
const LOCALTIME = 57833
const LOCALTIMESTAMP = 57834
const UTC_DATE = 57835
const UTC_TIME = 57836
const UTC_TIMESTAMP = 57837
const REPLACE = 57838
const CONVERT = 57839
const SEPARATOR = 57840
const TIMESTAMPDIFF = 57841
const CURRENT_DATE = 57842
const CURRENT_USER = 57843
const CURRENT_ROLE = 57844
const SECOND_MICROSECOND = 57845
const MINUTE_MICROSECOND = 57846
const MINUTE_SECOND = 57847
const HOUR_MICROSECOND = 57848
const HOUR_SECOND = 57849
const HOUR_MINUTE = 57850
const DAY_MICROSECOND = 57851
const DAY_SECOND = 57852
const DAY_MINUTE = 57853
const DAY_HOUR = 57854
const YEAR_MONTH = 57855
const SQL_TSI_HOUR = 57856
const SQL_TSI_DAY = 57857
const SQL_TSI_WEEK = 57858
const SQL_TSI_MONTH = 57859
const SQL_TSI_QUARTER = 57860
const SQL_TSI_YEAR = 57861
const SQL_TSI_SECOND = 57862
const SQL_TSI_MINUTE = 57863
const RECURSIVE = 57864
const CONFIG = 57865
const DRAINER = 57866
const SOURCE = 57867
const STREAM = 57868
const HEADERS = 57869
const CONNECTOR = 57870
const CONNECTORS = 57871
const DAEMON = 57872
const PAUSE = 57873
const CANCEL = 57874
const TASK = 57875
const RESUME = 57876
const MATCH = 57877
const AGAINST = 57878
const BOOLEAN = 57879
const LANGUAGE = 57880
const WITH = 57881
const QUERY = 57882
const EXPANSION = 57883
const WITHOUT = 57884
const VALIDATION = 57885
const UPGRADE = 57886
const RETRY = 57887
const ADDDATE = 57888
const BIT_AND = 57889
const BIT_OR = 57890
const BIT_XOR = 57891
const CAST = 57892
const COUNT = 57893
const APPROX_COUNT = 57894
const APPROX_COUNT_DISTINCT = 57895
const SERIAL_EXTRACT = 57896
const APPROX_PERCENTILE = 57897
const CURDATE = 57898
const CURTIME = 57899
const DATE_ADD = 57900
const DATE_SUB = 57901
const EXTRACT = 57902
const GROUP_CONCAT = 57903
const MAX = 57904
const MID = 57905
const MIN = 57906
const NOW = 57907
const POSITION = 57908
const SESSION_USER = 57909
const STD = 57910
const STDDEV = 57911
const MEDIAN = 57912
const CLUSTER_CENTERS = 57913
const KMEANS = 57914
const STDDEV_POP = 57915
const STDDEV_SAMP = 57916
const SUBDATE = 57917
const SUBSTR = 57918
const SUBSTRING = 57919
const SUM = 57920
const SYSDATE = 57921
const SYSTEM_USER = 57922
const TRANSLATE = 57923
const TRIM = 57924
const VARIANCE = 57925
const VAR_POP = 57926
const VAR_SAMP = 57927
const AVG = 57928
const RANK = 57929
const ROW_NUMBER = 57930
const DENSE_RANK = 57931
const BIT_CAST = 57932
const BITMAP_BIT_POSITION = 57933
const BITMAP_BUCKET_NUMBER = 57934
const BITMAP_COUNT = 57935
const BITMAP_CONSTRUCT_AGG = 57936
const BITMAP_OR_AGG = 57937
const NEXTVAL = 57938
const SETVAL = 57939
const CURRVAL = 57940
const LASTVAL = 57941
const ARROW = 57942
const ROW = 57943
const OUTFILE = 57944
const HEADER = 57945
const MAX_FILE_SIZE = 57946
const FORCE_QUOTE = 57947
const PARALLEL = 57948
const STRICT = 57949
const UNUSED = 57950
const BINDINGS = 57951
const DO = 57952
const DECLARE = 57953
const LOOP = 57954
const WHILE = 57955
const LEAVE = 57956
const ITERATE = 57957
const UNTIL = 57958
const CALL = 57959
const PREV = 57960
const SLIDING = 57961
const FILL = 57962
const SPBEGIN = 57963
const BACKEND = 57964
const SERVERS = 57965
const HANDLER = 57966
const PERCENT = 57967
const SAMPLE = 57968
const MO_TS = 57969
const PITR = 57970
const RECOVERY_WINDOW = 57971
const CDC = 57972
const GROUPING = 57973
const SETS = 57974
const CUBE = 57975
const ROLLUP = 57976
const LOGSERVICE = 57977
const REPLICAS = 57978
const STORES = 57979
const SETTINGS = 57980
const KILL = 57981
const BACKUP = 57982
const FILESYSTEM = 57983
const PARALLELISM = 57984
const RESTORE = 57985
const QUERY_RESULT = 57986

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"ASYNC",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12984

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 812,
	22, 812,
	-2, 805,
	-1, 167,
	246, 1247,
	248, 1140,
	-2, 1193,
	-1, 194,
	44, 635,
	248, 635,
	275, 642,
	276, 642,
	480, 635,
	-2, 670,
	-1, 234,
	665, 2026,
	-2, 534,
	-1, 549,
	665, 2150,
	-2, 412,
	-1, 607,
	665, 2209,
	-2, 410,
	-1, 608,
	665, 2210,
	-2, 411,
	-1, 609,
	665, 2211,
	-2, 413,
	-1, 749,
	327, 181,
	452, 181,
	453, 181,
	-2, 1923,
	-1, 816,
	86, 1707,
	-2, 2086,
	-1, 817,
	86, 1726,
	-2, 2057,
	-1, 821,
	86, 1727,
	-2, 2085,
	-1, 855,
	86, 1634,
	-2, 2289,
	-1, 856,
	86, 1635,
	-2, 2288,
	-1, 857,
	86, 1636,
	-2, 2278,
	-1, 858,
	86, 2250,
	-2, 2271,
	-1, 859,
	86, 2251,
	-2, 2272,
	-1, 860,
	86, 2252,
	-2, 2280,
	-1, 861,
	86, 2253,
	-2, 2260,
	-1, 862,
	86, 2254,
	-2, 2269,
	-1, 863,
	86, 2255,
	-2, 2281,
	-1, 864,
	86, 2256,
	-2, 2282,
	-1, 865,
	86, 2257,
	-2, 2287,
	-1, 866,
	86, 2258,
	-2, 2292,
	-1, 867,
	86, 2259,
	-2, 2293,
	-1, 868,
	86, 1703,
	-2, 2124,
	-1, 869,
	86, 1704,
	-2, 1907,
	-1, 870,
	86, 1705,
	-2, 2133,
	-1, 871,
	86, 1706,
	-2, 1916,
	-1, 873,
	86, 1709,
	-2, 1924,
	-1, 875,
	86, 1711,
	-2, 2157,
	-1, 877,
	86, 1714,
	-2, 1945,
	-1, 879,
	86, 1716,
	-2, 2169,
	-1, 880,
	86, 1717,
	-2, 2168,
	-1, 881,
	86, 1718,
	-2, 1992,
	-1, 882,
	86, 1719,
	-2, 2081,
	-1, 885,
	86, 1722,
	-2, 2180,
	-1, 887,
	86, 1724,
	-2, 2183,
	-1, 888,
	86, 1725,
	-2, 2185,
	-1, 889,
	86, 1728,
	-2, 2193,
	-1, 890,
	86, 1729,
	-2, 2066,
	-1, 891,
	86, 1730,
	-2, 2111,
	-1, 892,
	86, 1731,
	-2, 2076,
	-1, 893,
	86, 1732,
	-2, 2101,
	-1, 904,
	86, 1612,
	-2, 2283,
	-1, 905,
	86, 1613,
	-2, 2284,
	-1, 906,
	86, 1614,
	-2, 2285,
	-1, 1011,
	475, 670,
	476, 670,
	-2, 636,
	-1, 1062,
	128, 1907,
	139, 1907,
	159, 1907,
	-2, 1880,
	-1, 1183,
	22, 839,
	-2, 788,
	-1, 1293,
	11, 812,
	22, 812,
	-2, 1489,
	-1, 1377,
	22, 839,
	-2, 788,
	-1, 1736,
	86, 1779,
	-2, 2083,
	-1, 1737,
	86, 1780,
	-2, 2084,
	-1, 1912,
	87, 1012,
	-2, 1018,
	-1, 2367,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	288, 1185,
	-2, 1178,
	-1, 2532,
	11, 812,
	22, 812,
	-2, 953,
	-1, 2566,
	87, 1866,
	160, 1866,
	-2, 2068,
	-1, 2567,
	87, 1866,
	160, 1866,
	-2, 2067,
	-1, 2568,
	87, 1842,
	160, 1842,
	-2, 2054,
	-1, 2569,
	87, 1843,
	160, 1843,
	-2, 2059,
	-1, 2570,
	87, 1844,
	160, 1844,
	-2, 1980,
	-1, 2571,
	87, 1845,
	160, 1845,
	-2, 1973,
	-1, 2572,
	87, 1846,
	160, 1846,
	-2, 1897,
	-1, 2573,
	87, 1847,
	160, 1847,
	-2, 2056,
	-1, 2574,
	87, 1848,
	160, 1848,
	-2, 1978,
	-1, 2575,
	87, 1849,
	160, 1849,
	-2, 1972,
	-1, 2576,
	87, 1850,
	160, 1850,
	-2, 1960,
	-1, 2577,
	87, 1866,
	160, 1866,
	-2, 1961,
	-1, 2578,
	87, 1866,
	160, 1866,
	-2, 1962,
	-1, 2580,
	87, 1855,
	160, 1855,
	-2, 2101,
	-1, 2581,
	87, 1832,
	160, 1832,
	-2, 2086,
	-1, 2582,
	87, 1864,
	160, 1864,
	-2, 2057,
	-1, 2583,
	87, 1864,
	160, 1864,
	-2, 2085,
	-1, 2584,
	87, 1864,
	160, 1864,
	-2, 1925,
	-1, 2585,
	87, 1862,
	160, 1862,
	-2, 2076,
	-1, 2586,
	87, 1859,
	160, 1859,
	-2, 1950,
	-1, 2587,
	86, 1813,
	87, 1813,
	160, 1813,
	410, 1813,
	411, 1813,
	412, 1813,
	-2, 1896,
	-1, 2588,
	86, 1814,
	87, 1814,
	160, 1814,
	410, 1814,
	411, 1814,
	412, 1814,
	-2, 1898,
	-1, 2589,
	86, 1815,
	87, 1815,
	160, 1815,
	410, 1815,
	411, 1815,
	412, 1815,
	-2, 2129,
	-1, 2590,
	86, 1817,
	87, 1817,
	160, 1817,
	410, 1817,
	411, 1817,
	412, 1817,
	-2, 2058,
	-1, 2591,
	86, 1819,
	87, 1819,
	160, 1819,
	410, 1819,
	411, 1819,
	412, 1819,
	-2, 2036,
	-1, 2592,
	86, 1821,
	87, 1821,
	160, 1821,
	410, 1821,
	411, 1821,
	412, 1821,
	-2, 1979,
	-1, 2593,
	86, 1823,
	87, 1823,
	160, 1823,
	410, 1823,
	411, 1823,
	412, 1823,
	-2, 1956,
	-1, 2594,
	86, 1824,
	87, 1824,
	160, 1824,
	410, 1824,
	411, 1824,
	412, 1824,
	-2, 1957,
	-1, 2595,
	86, 1826,
	87, 1826,
	160, 1826,
	410, 1826,
	411, 1826,
	412, 1826,
	-2, 1895,
	-1, 2596,
	87, 1869,
	160, 1869,
	410, 1869,
	411, 1869,
	412, 1869,
	-2, 1930,
	-1, 2597,
	87, 1869,
	160, 1869,
	410, 1869,
	411, 1869,
	412, 1869,
	-2, 1946,
	-1, 2598,
	87, 1872,
	160, 1872,
	410, 1872,
	411, 1872,
	412, 1872,
	-2, 1926,
	-1, 2599,
	87, 1872,
	160, 1872,
	410, 1872,
	411, 1872,
	412, 1872,
	-2, 1995,
	-1, 2600,
	87, 1869,
	160, 1869,
	410, 1869,
	411, 1869,
	412, 1869,
	-2, 2018,
	-1, 2821,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	288, 1185,
	-2, 1179,
	-1, 2839,
	84, 732,
	160, 732,
	-2, 1363,
	-1, 3270,
	198, 1185,
	312, 1452,
	-2, 1424,
	-1, 3459,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1303,
	-1, 3461,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1303,
	-1, 3473,
	84, 732,
	160, 732,
	-2, 1363,
	-1, 3494,
	198, 1185,
	312, 1452,
	-2, 1425,
	-1, 3649,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1304,
	-1, 3677,
	87, 1265,
	160, 1265,
	-2, 1185,
	-1, 3823,
	87, 1265,
	160, 1265,
	-2, 1185,
	-1, 3993,
	87, 1269,
	160, 1269,
	-2, 1185,
	-1, 4048,
	87, 1270,
	160, 1270,
	-2, 1185,
}

const yyPrivate = 57344

const yyLast = 55655

var yyAct = [...]int{
	783, 759, 4102, 785, 4070, 2870, 223, 4094, 1638, 2000,
	3997, 1716, 3479, 3579, 4003, 3290, 3996, 4004, 3913, 3823,
	3890, 3256, 768, 3870, 3948, 3705, 3367, 3508, 3801, 1712,
	761, 3770, 2864, 3861, 1482, 3368, 1776, 1329, 3822, 3891,
	3637, 1550, 813, 2783, 3739, 2867, 649, 1184, 3583, 1061,
	3792, 3441, 3871, 3873, 3574, 3446, 1945, 3495, 1488, 1763,
	3651, 2417, 3265, 667, 1457, 673, 673, 3658, 2842, 3646,
	3213, 673, 691, 700, 1719, 3619, 700, 3227, 3189, 3365,
	3462, 2983, 2984, 2982, 3216, 2959, 3433, 208, 37, 2095,
	1781, 757, 2893, 3285, 68, 1178, 3267, 2564, 2098, 2111,
	3274, 3464, 2060, 2979, 2526, 2134, 3410, 2690, 3052, 2208,
	2562, 2166, 3012, 3330, 2420, 1543, 2809, 3194, 1960, 3273,
	2655, 3196, 3190, 1174, 3236, 3192, 3191, 708, 2970, 141,
	712, 2378, 36, 2322, 1627, 3187, 3160, 2321, 2822, 751,
	1616, 2346, 2192, 2615, 2061, 2633, 2175, 2174, 2139, 3100,
	1623, 3026, 1874, 941, 2167, 2204, 2203, 2091, 2793, 2895,
	697, 2798, 2505, 2064, 2875, 1990, 2527, 2418, 756, 1491,
	982, 1628, 2834, 1631, 1447, 2510, 219, 8, 2377, 218,
	7, 6, 1921, 2367, 1414, 2238, 2560, 2205, 1590, 1777,
	1710, 760, 1559, 1522, 1122, 666, 1528, 1492, 2358, 649,
	750, 2413, 1959, 1770, 2727, 769, 1750, 1701, 2361, 1200,
	2173, 15, 1660, 2170, 1642, 2155, 1597, 705, 1917, 1709,
	1920, 2534, 2506, 223, 1054, 223, 685, 1113, 1114, 1467,
	1581, 1471, 981, 682, 673, 1524, 1527, 908, 1715, 715,
	205, 209, 24, 1782, 1020, 25, 27, 714, 17, 758,
	1093, 1483, 979, 16, 10, 964, 1399, 699, 958, 1006,
	711, 201, 1639, 3880, 1110, 1375, 2212, 1330, 3789, 2763,
	910, 911, 3376, 669, 23, 2763, 1261, 1262, 1263, 1260,
	1088, 2763, 2536, 695, 14, 3476, 2726, 3243, 3069, 3068,
	33, 1261, 1262, 1263, 1260, 2222, 1179, 1070, 1055, 1261,
	1262, 1263, 1260, 3610, 3449, 1180, 3360, 2678, 2618, 2621,
	1109, 2619, 1111, 1887, 2616, 1600, 1604, 1453, 696, 1105,
	1106, 207, 668, 2320, 1394, 692, 1450, 1451, 1452, 1526,
	678, 3848, 1067, 703, 1368, 1069, 1040, 1106, 2326, 674,
	930, 928, 1888, 3170, 648, 1106, 1653, 2330, 1397, 3155,
	3152, 4082, 1089, 1505, 3153, 1179, 694, 3150, 1881, 2755,
	2753, 1390, 693, 1602, 3572, 1261, 1262, 1263, 1260, 3048,
	3046, 1778, 2144, 3856, 206, 64, 197, 168, 1261, 1262,
	1263, 1260, 3746, 3740, 8, 3575, 3366, 7, 2189, 1104,
	3875, 1324, 2169, 198, 909, 3129, 2161, 2458, 4108, 3869,
	189, 3808, 752, 2757, 199, 920, 4079, 3754, 4032, 206,
	206, 3620, 1259, 3589, 1223, 1405, 3624, 3463, 2664, 2369,
	2209, 2672, 1637, 140, 3867, 206, 3776, 1083, 1078, 1073,
	1077, 1081, 206, 3974, 2708, 3924, 1567, 1404, 126, 206,
	929, 927, 3752, 2368, 1646, 3809, 1400, 202, 206, 1403,
	1402, 1658, 753, 930, 928, 1086, 1071, 206, 3072, 1076,
	710, 3127, 2828, 2220, 206, 1422, 1439, 206, 64, 197,
	168, 2977, 1065, 1066, 1643, 1890, 1406, 2362, 1953, 2554,
	1651, 1655, 202, 202, 1035, 1033, 1258, 1034, 206, 64,
	197, 168, 206, 64, 197, 168, 2555, 140, 1645, 752,
	2108, 2541, 1650, 3019, 2540, 1657, 3060, 2542, 3020, 3021,
	1084, 2074, 2826, 140, 921, 2634, 3778, 925, 2782, 1087,
	2778, 202, 1029, 1702, 148, 149, 1706, 150, 151, 3260,
	202, 972, 152, 973, 1974, 153, 3154, 202, 1479, 3151,
	202, 1529, 899, 1531, 898, 900, 901, 1074, 902, 903,
	1705, 1718, 206, 64, 197, 168, 2795, 1195, 2075, 2076,
	1501, 202, 2829, 1502, 3599, 202, 2796, 1683, 1899, 1900,
	1256, 1085, 953, 1238, 1487, 1041, 1239, 1064, 1486, 1489,
	1490, 1251, 206, 64, 197, 168, 967, 1063, 963, 206,
	64, 197, 168, 2780, 3258, 2775, 3971, 1951, 167, 195,
	204, 196, 124, 1037, 1241, 1421, 1489, 1490, 1603, 1601,
	3878, 1075, 3877, 2758, 3876, 2794, 2309, 1669, 4007, 4008,
	4031, 194, 188, 187, 3967, 202, 3878, 3962, 70, 3877,
	3961, 3876, 3960, 4074, 4075, 3434, 3950, 2779, 3859, 2776,
	1722, 3369, 1707, 2659, 944, 3950, 3369, 1192, 3053, 3953,
	1189, 1504, 3054, 3743, 3055, 202, 1203, 1206, 2450, 2224,
	3887, 3383, 202, 2801, 2092, 2082, 1704, 1039, 1697, 2914,
	2216, 673, 673, 1107, 1108, 3629, 1203, 1206, 1112, 3976,
	3977, 3209, 673, 1188, 3862, 3863, 3864, 3865, 1082, 190,
	191, 192, 1236, 3972, 3973, 1198, 3980, 3979, 3978, 3981,
	3982, 3439, 700, 700, 2493, 673, 2971, 2357, 2785, 2500,
	3598, 3520, 167, 195, 204, 196, 3780, 3781, 3600, 969,
	970, 962, 2669, 2152, 1079, 2221, 3090, 1080, 200, 3969,
	966, 965, 1610, 1609, 2756, 194, 193, 3207, 1952, 1254,
	1255, 3088, 1477, 1253, 1038, 1116, 2456, 947, 1515, 136,
	1226, 954, 3573, 193, 1393, 137, 1237, 3203, 1423, 3047,
	2965, 2106, 2107, 2496, 2497, 1721, 1720, 3879, 1301, 2495,
	3785, 961, 3788, 3386, 3626, 697, 697, 697, 2781, 3094,
	2777, 4006, 3414, 1703, 1070, 2762, 2503, 3214, 2557, 1180,
	971, 1180, 1248, 3204, 3205, 960, 665, 3535, 1181, 959,
	1180, 1249, 1250, 4039, 3288, 946, 3289, 3225, 3733, 3206,
	2210, 952, 138, 2327, 2210, 1188, 2210, 1889, 3262, 1067,
	1503, 923, 1069, 3532, 3813, 63, 3070, 1090, 3237, 1072,
	2086, 3590, 3805, 1240, 3906, 2227, 2229, 2230, 3901, 950,
	1218, 3067, 2211, 1106, 2835, 1333, 1106, 2961, 1106, 2243,
	1106, 2488, 1106, 3286, 3287, 3807, 1106, 1070, 702, 1180,
	701, 1205, 1204, 2975, 2364, 924, 2223, 3525, 3161, 3892,
	3908, 3480, 3914, 3201, 65, 3257, 2869, 970, 2617, 3487,
	2341, 1205, 1204, 1036, 2865, 2866, 746, 2869, 1466, 748,
	3536, 1605, 1067, 3975, 747, 1069, 3774, 3734, 695, 695,
	695, 1197, 3292, 951, 3616, 698, 3215, 3422, 3177, 146,
	203, 2491, 147, 1191, 1193, 1196, 3886, 169, 1489, 1490,
	3753, 3696, 61, 909, 4114, 1396, 1194, 1398, 4097, 3425,
	698, 2754, 2557, 696, 696, 696, 2468, 2807, 2467, 1410,
	692, 692, 692, 1413, 1176, 1183, 1215, 1419, 667, 1182,
	1066, 3625, 169, 169, 1652, 1373, 2673, 3779, 1378, 1211,
	1212, 3586, 1209, 1401, 1891, 1207, 1539, 65, 169, 2423,
	1217, 694, 694, 694, 1478, 169, 1302, 693, 693, 693,
	968, 982, 169, 1489, 1490, 1538, 3814, 2800, 139, 45,
	698, 169, 65, 3215, 3806, 62, 2436, 3424, 3691, 5,
	169, 1231, 2416, 2439, 1233, 3210, 926, 169, 2489, 2490,
	169, 2093, 1216, 1297, 1298, 1299, 1300, 143, 144, 957,
	698, 145, 3685, 1692, 203, 1295, 1693, 698, 1464, 2972,
	3915, 169, 1234, 2499, 1463, 169, 673, 1481, 1480, 1517,
	1485, 3782, 1462, 673, 2804, 2805, 3827, 649, 649, 3968,
	3263, 3091, 65, 1459, 1187, 3793, 3630, 649, 649, 2803,
	2438, 1554, 1554, 3266, 673, 2915, 3465, 2916, 2917, 4098,
	2083, 1243, 1175, 1698, 1244, 3762, 3995, 3763, 1030, 3031,
	3032, 3149, 65, 2228, 3202, 700, 1582, 667, 2459, 65,
	1552, 1552, 1593, 1345, 1346, 169, 2216, 3291, 2416, 3762,
	3570, 3763, 1246, 1556, 1292, 3372, 2437, 223, 1431, 3947,
	2422, 3014, 3016, 1561, 1415, 2424, 649, 3757, 710, 945,
	1227, 943, 3223, 3286, 3287, 169, 972, 1525, 973, 1416,
	1417, 3765, 169, 3282, 3165, 1426, 1427, 1428, 1429, 1430,
	2665, 1432, 2546, 1420, 1223, 2454, 1229, 1438, 2213, 1728,
	1731, 1732, 1379, 2081, 2058, 3765, 1412, 1516, 1232, 1235,
	1729, 935, 1032, 3764, 2768, 1031, 2426, 1893, 1635, 2425,
	2342, 3321, 2433, 1640, 1548, 1549, 1377, 3093, 1437, 3826,
	1649, 1436, 1435, 1434, 1228, 1042, 1334, 3764, 704, 3427,
	1242, 2225, 2226, 3283, 3698, 1468, 1472, 1472, 1472, 976,
	977, 978, 2912, 4095, 4096, 1425, 3411, 1264, 2649, 1681,
	3102, 3101, 939, 2239, 1444, 1294, 1902, 937, 936, 1030,
	1468, 1468, 974, 1554, 1304, 1554, 1188, 2934, 2935, 1247,
	1659, 1473, 1474, 1446, 1222, 2085, 2772, 3692, 3693, 2334,
	1449, 3706, 3707, 3708, 3712, 3710, 3711, 3713, 3709, 1409,
	1313, 1903, 1506, 1507, 1245, 3224, 1611, 935, 3994, 2336,
	2335, 1230, 942, 1644, 1614, 3608, 1617, 1618, 1493, 1070,
	1656, 1496, 1901, 2943, 1407, 1408, 1070, 3687, 1619, 1620,
	3167, 3686, 1583, 697, 2333, 3015, 697, 697, 931, 1537,
	2480, 932, 3659, 1554, 938, 1625, 1626, 2349, 1185, 1691,
	1648, 2427, 2277, 1032, 1456, 2276, 1031, 1562, 934, 4116,
	1188, 1780, 1465, 937, 936, 2524, 1458, 1699, 1424, 1475,
	2350, 2351, 1764, 1811, 1812, 1829, 1815, 1494, 1495, 1568,
	1497, 1498, 678, 1499, 1830, 1630, 1458, 1574, 1634, 1633,
	3242, 3373, 1580, 1594, 2840, 1533, 1535, 1837, 1595, 1839,
	3957, 1840, 1841, 1842, 2933, 1546, 1547, 2813, 2817, 2818,
	2819, 2814, 2816, 2815, 4110, 4104, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1259, 2133,
	1714, 4092, 1761, 1762, 1185, 971, 2432, 4050, 1676, 1677,
	2430, 2360, 1188, 2769, 1221, 3758, 1894, 1730, 1892, 3872,
	3284, 4018, 1895, 4015, 1897, 1695, 695, 1814, 1872, 695,
	695, 4009, 1904, 1906, 1606, 1907, 2841, 1909, 1910, 3758,
	1043, 1668, 1582, 3759, 1671, 1672, 1259, 1918, 1554, 1923,
	1924, 1838, 1926, 1517, 673, 1733, 1662, 2218, 4105, 673,
	3991, 696, 1554, 2525, 696, 696, 982, 1259, 692, 1946,
	1030, 692, 692, 1689, 4051, 2396, 1685, 1690, 2525, 1688,
	4051, 1711, 1554, 1713, 1687, 1684, 2252, 1667, 1517, 1708,
	1670, 1828, 3941, 691, 4019, 1875, 4016, 3940, 3327, 694,
	1220, 1680, 694, 694, 2253, 693, 3327, 2841, 693, 693,
	1679, 2557, 1752, 1973, 2453, 1686, 1261, 1262, 1263, 1260,
	3323, 1223, 1980, 1980, 2636, 1517, 3430, 1517, 1517, 2359,
	3385, 673, 673, 3992, 2047, 1918, 2051, 2314, 1947, 1554,
	2055, 2056, 2131, 2664, 3296, 2071, 3294, 649, 2944, 2946,
	2947, 2948, 2945, 1374, 1032, 3159, 3157, 1031, 1759, 1760,
	1965, 649, 2251, 1554, 1592, 1259, 1261, 1262, 1263, 1260,
	1259, 1927, 786, 796, 2525, 1977, 1972, 1221, 3034, 1975,
	1976, 1925, 787, 3934, 788, 792, 795, 791, 789, 790,
	673, 1918, 1554, 2002, 2116, 2787, 673, 673, 673, 708,
	708, 2759, 1819, 1820, 1821, 2654, 2126, 2127, 2128, 2129,
	1878, 1843, 2395, 2135, 3909, 1835, 2109, 1717, 1836, 2049,
	223, 1700, 2641, 223, 223, 2209, 223, 1914, 1915, 1916,
	3897, 3846, 1873, 2073, 2409, 1849, 1850, 793, 2319, 1929,
	1930, 1931, 1932, 1983, 2313, 2312, 1261, 1262, 1263, 1260,
	1879, 913, 914, 915, 916, 1871, 2253, 4123, 2101, 2102,
	2284, 1961, 2200, 1963, 1964, 3845, 1829, 1829, 2177, 2078,
	794, 2080, 1913, 1261, 1262, 1263, 1260, 1970, 1829, 1829,
	1468, 3840, 2099, 2100, 2104, 2194, 1922, 2218, 3839, 3838,
	2087, 1802, 3125, 2057, 1472, 2118, 2119, 2120, 1943, 1942,
	1938, 2423, 2426, 3898, 3847, 1445, 1472, 2143, 1982, 1767,
	2146, 2147, 1956, 2149, 2188, 1540, 4106, 1946, 2094, 2249,
	1954, 1554, 2207, 2115, 1948, 1949, 1962, 3837, 1966, 1984,
	1985, 3817, 1723, 1724, 1725, 1726, 1727, 3438, 2382, 3476,
	1971, 3816, 3791, 3038, 1979, 1981, 913, 914, 915, 916,
	3541, 2843, 3489, 2048, 2253, 3455, 3403, 1644, 3399, 2053,
	1070, 2253, 2253, 1070, 1223, 2179, 2059, 3304, 3009, 2667,
	2666, 2658, 1070, 2201, 1768, 2745, 2403, 2054, 1772, 1773,
	1774, 1775, 697, 1883, 2733, 2088, 2725, 2184, 1813, 2077,
	2680, 2079, 2272, 2662, 2650, 1067, 1823, 2257, 1069, 3247,
	2253, 1957, 1958, 918, 2218, 2199, 2138, 1067, 2643, 2113,
	1069, 2114, 2172, 2638, 2218, 2253, 2121, 2122, 1967, 1968,
	2630, 2628, 3723, 2557, 2172, 3490, 2626, 1565, 3456, 3404,
	1711, 3400, 2124, 2140, 2624, 2381, 1664, 2427, 1978, 3539,
	3305, 2525, 2422, 2416, 2421, 2072, 2419, 2424, 2382, 1876,
	2315, 2291, 2290, 1310, 1208, 2275, 2266, 1259, 2157, 1259,
	1172, 2265, 1276, 1259, 1167, 1798, 2382, 2639, 1070, 2236,
	2237, 1292, 1795, 2264, 2103, 2254, 1797, 1794, 1796, 1800,
	1801, 2644, 2217, 2178, 1799, 1673, 2639, 1946, 933, 2187,
	3085, 2185, 1500, 2631, 2629, 2190, 1454, 1469, 918, 2625,
	1455, 2425, 2616, 1067, 2198, 695, 1069, 2625, 2382, 2324,
	2325, 1544, 2328, 2423, 2426, 2331, 3358, 4117, 4078, 3238,
	2197, 3902, 1545, 2314, 1259, 1259, 2337, 2202, 1259, 1259,
	2451, 1950, 751, 2255, 1259, 673, 673, 673, 3881, 3790,
	696, 3660, 3468, 2307, 2215, 3750, 1259, 692, 2253, 3689,
	673, 673, 673, 673, 3688, 2218, 1542, 1969, 1674, 2698,
	2231, 1818, 1817, 2379, 2196, 3903, 2240, 2687, 1101, 1102,
	1103, 3674, 2383, 2384, 2385, 3466, 2388, 1517, 694, 3633,
	1752, 2233, 1818, 1817, 693, 3661, 3469, 2610, 1166, 1162,
	1163, 1164, 1165, 2245, 2703, 1454, 2702, 2701, 2699, 1455,
	3239, 2141, 1100, 1517, 3448, 1097, 1284, 1285, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1276, 1876, 3328, 1470, 3467,
	2445, 1876, 1876, 3319, 3311, 2234, 2235, 3306, 1805, 1806,
	1807, 1808, 1809, 1810, 1803, 1804, 2232, 3218, 2968, 2967,
	940, 2811, 2390, 2391, 3240, 2764, 2677, 2642, 2548, 2427,
	2182, 2181, 2393, 2394, 2422, 2416, 2421, 2180, 2419, 2424,
	1541, 1441, 798, 142, 1440, 1190, 2700, 1771, 142, 2246,
	2411, 2142, 2452, 1771, 2145, 1855, 3039, 2148, 673, 1980,
	2150, 1279, 1280, 1281, 1282, 1283, 1276, 2529, 2529, 2071,
	2529, 2400, 2308, 2310, 2311, 2402, 1848, 2404, 1275, 1274,
	1284, 1285, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1276,
	649, 649, 2316, 2425, 1598, 1908, 2141, 2279, 1188, 1263,
	1260, 2405, 3959, 1260, 1554, 673, 3701, 2285, 2286, 3700,
	2288, 679, 2343, 3056, 142, 2904, 2193, 2295, 673, 2415,
	2414, 2902, 2881, 2879, 1188, 2601, 667, 3680, 1333, 3634,
	3635, 3627, 1593, 2552, 2071, 4088, 2392, 2606, 2747, 2608,
	2748, 2398, 223, 4113, 2399, 1094, 1095, 1096, 1099, 1758,
	1098, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1276, 2389,
	1312, 3436, 2408, 1070, 2810, 1755, 1757, 1754, 2543, 1756,
	2544, 2533, 2531, 1311, 2535, 1472, 1261, 1262, 1263, 1260,
	4087, 4086, 2646, 1261, 1262, 1263, 1260, 3361, 2537, 2549,
	2550, 3628, 3359, 2704, 2705, 2603, 2428, 2429, 1067, 2434,
	2660, 1069, 4084, 2207, 1261, 1262, 1263, 1260, 4112, 2401,
	1554, 1833, 1554, 4083, 1554, 2620, 4022, 2559, 3990, 1188,
	2242, 3437, 3989, 3904, 2247, 3442, 1834, 2679, 2784, 2611,
	3842, 2955, 2256, 3118, 3830, 3820, 2605, 1261, 1262, 1263,
	1260, 2670, 3810, 3741, 3663, 1068, 2689, 3447, 3662, 3481,
	142, 2504, 2498, 1554, 1188, 3470, 3435, 3307, 2711, 1261,
	1262, 1263, 1260, 3208, 3081, 142, 3051, 142, 2612, 2263,
	2538, 3195, 3050, 2718, 2938, 2717, 3104, 2270, 1554, 2937,
	2936, 2268, 1552, 1261, 1262, 1263, 1260, 2953, 2397, 2656,
	2657, 2954, 1599, 2928, 2706, 4109, 3117, 2553, 2922, 2287,
	1261, 1262, 1263, 1260, 2292, 2293, 2294, 1552, 1598, 2297,
	2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2719,
	2604, 2602, 2556, 1261, 1262, 1263, 1260, 2766, 2767, 2921,
	2920, 2770, 2069, 2722, 2723, 1274, 1284, 1285, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1276, 2691, 2952, 2691, 1188,
	2919, 2267, 2951, 1188, 1261, 1262, 1263, 1260, 2695, 2760,
	1554, 2676, 2632, 1517, 2545, 1261, 1262, 1263, 1260, 2051,
	2671, 2720, 1261, 1262, 1263, 1260, 2709, 2839, 1261, 1262,
	1263, 1260, 2318, 2845, 2160, 2159, 2846, 2158, 1533, 1535,
	2663, 2940, 2661, 4107, 2154, 2153, 4000, 672, 672, 2110,
	2668, 2652, 1898, 680, 2856, 1261, 1262, 1263, 1260, 1896,
	2685, 4089, 2950, 2751, 1188, 1665, 1392, 3783, 3784, 2250,
	2681, 2682, 2878, 1261, 1262, 1263, 1260, 3580, 2823, 1188,
	1188, 1188, 1980, 4076, 4038, 1188, 4037, 2888, 2889, 2890,
	2891, 1188, 2898, 2707, 2899, 2900, 2697, 2901, 1711, 2903,
	3604, 2939, 2824, 746, 4034, 3592, 748, 2849, 1170, 2827,
	2898, 747, 2852, 3591, 3965, 1070, 3964, 3771, 4115, 1334,
	2002, 3945, 2529, 2836, 3889, 1536, 3638, 1261, 1262, 1263,
	1260, 2808, 1261, 1262, 1263, 1260, 2956, 3883, 3866, 2684,
	1261, 1262, 1263, 1260, 3529, 2565, 649, 1261, 1262, 1263,
	1260, 2857, 3857, 3834, 2051, 2859, 3829, 3828, 1188, 2071,
	2071, 2071, 2071, 2071, 2071, 3787, 3773, 1169, 2847, 3772,
	3742, 1261, 1262, 1263, 1260, 1188, 2071, 3682, 2790, 2529,
	2792, 1876, 3642, 1876, 2876, 2962, 2872, 3631, 2876, 2789,
	3391, 3613, 2806, 3611, 3609, 3017, 3606, 1554, 3603, 2260,
	3602, 2883, 1876, 1876, 2830, 2838, 3578, 8, 673, 673,
	7, 3576, 2844, 3549, 3546, 3543, 680, 1261, 1262, 1263,
	1260, 2855, 3121, 2960, 3432, 2861, 3419, 2728, 2729, 2858,
	3120, 3412, 3396, 2734, 1592, 2874, 3394, 3119, 2880, 3389,
	2674, 3339, 3933, 2744, 2886, 3317, 3316, 3314, 1922, 1261,
	1262, 1263, 1260, 3313, 3308, 2877, 3005, 1261, 1262, 1263,
	1260, 3302, 3301, 223, 1261, 1262, 1263, 1260, 223, 2918,
	1261, 1262, 1263, 1260, 4064, 3219, 3182, 3018, 3181, 2973,
	3180, 2248, 3171, 2645, 3169, 2648, 3166, 3164, 2930, 2323,
	1829, 3095, 1829, 3092, 3071, 3066, 1261, 1262, 1263, 1260,
	3049, 2963, 3024, 2986, 2987, 2988, 2989, 2990, 2991, 3080,
	2969, 2949, 2941, 3035, 2931, 1554, 2457, 2929, 3087, 2460,
	2461, 2462, 2463, 2464, 2465, 2466, 2925, 2924, 2469, 2470,
	2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 3006,
	2481, 2482, 2483, 2484, 2485, 3008, 2486, 3002, 2923, 2688,
	3040, 3007, 2694, 3022, 2773, 3044, 3025, 2848, 1618, 1261,
	1262, 1263, 1260, 2712, 2713, 2765, 2853, 2854, 1619, 1620,
	2788, 2715, 2716, 2761, 2565, 2653, 2743, 3061, 2338, 142,
	142, 142, 1068, 1070, 1625, 1626, 1875, 2721, 2332, 3073,
	2329, 3065, 854, 853, 3931, 1070, 2163, 2156, 1886, 1885,
	1666, 1341, 3063, 1261, 1262, 1263, 1260, 1337, 3042, 1336,
	1173, 922, 3041, 3074, 3921, 3917, 1723, 1876, 3767, 1630,
	3168, 3766, 1634, 1633, 3755, 3751, 3605, 3172, 3173, 3174,
	3176, 3089, 3178, 3179, 3587, 2873, 3062, 3559, 3461, 3064,
	3059, 3057, 1188, 3460, 2966, 1816, 3084, 3077, 3198, 3076,
	2873, 2884, 2885, 3459, 3075, 1293, 2887, 3429, 3212, 3408,
	3406, 3405, 2894, 673, 3402, 206, 3096, 197, 168, 3401,
	3083, 3395, 3393, 3374, 3364, 3363, 3228, 1188, 3350, 3349,
	673, 3116, 1188, 1188, 3248, 3185, 3109, 3156, 3111, 3107,
	3108, 2071, 2379, 3103, 3246, 3123, 3114, 3106, 2850, 2851,
	3158, 3105, 3097, 3110, 3112, 3113, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1265, 2445, 2742, 3099, 3033, 2786, 2627,
	2623, 2622, 2296, 3222, 2289, 2283, 3272, 2282, 3275, 2985,
	3275, 3275, 2823, 2281, 2280, 1188, 3184, 2278, 202, 3929,
	2274, 2273, 1261, 1262, 1263, 1260, 2985, 3163, 2271, 3162,
	2262, 2259, 2258, 3297, 2741, 2162, 1869, 3293, 2740, 1868,
	1867, 1554, 1554, 3249, 1832, 1831, 1822, 3231, 3251, 3252,
	1566, 1070, 3235, 1070, 3259, 3261, 1564, 3200, 1070, 3183,
	2871, 1261, 1262, 1263, 1260, 1261, 1262, 1263, 1260, 4063,
	1552, 1552, 4021, 3244, 3939, 1331, 3916, 3852, 3250, 3255,
	3849, 3836, 3298, 3299, 1380, 1070, 1067, 2739, 673, 1069,
	3221, 3241, 3230, 206, 2738, 3198, 3831, 3233, 3234, 3736,
	3735, 3270, 3717, 3245, 3699, 3695, 3271, 3673, 1517, 3657,
	3280, 2051, 2051, 3254, 1261, 1262, 1263, 1260, 2415, 2414,
	1876, 1261, 1262, 1263, 1260, 3560, 3557, 3527, 3526, 3276,
	3277, 3523, 3522, 672, 1177, 3488, 3485, 3281, 3483, 3450,
	3115, 3130, 3131, 2737, 1186, 3295, 2797, 3132, 3133, 3134,
	3135, 1613, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143,
	3144, 3145, 3146, 2736, 1624, 1188, 202, 1214, 1615, 2711,
	1261, 1262, 1263, 1260, 4056, 2735, 1629, 3362, 3326, 2732,
	1632, 709, 1621, 1448, 2996, 2957, 2882, 3303, 2832, 2831,
	1261, 1262, 1263, 1260, 2825, 2791, 3278, 2746, 2637, 3043,
	3342, 3045, 1261, 1262, 1263, 1260, 1261, 1262, 1263, 1260,
	2547, 3309, 3312, 2487, 3324, 3325, 3310, 2731, 2380, 2352,
	1876, 3318, 2730, 2317, 673, 1876, 3322, 1753, 3315, 202,
	2123, 1912, 3335, 1882, 3336, 2724, 1696, 2193, 1647, 1563,
	2714, 2910, 2911, 679, 1261, 1262, 1263, 1260, 1622, 1261,
	1262, 1263, 1260, 1391, 3343, 1376, 2926, 2927, 2710, 3346,
	3347, 3348, 1261, 1262, 1263, 1260, 1372, 1261, 1262, 1263,
	1260, 1371, 3098, 1370, 1369, 3352, 1368, 1367, 1366, 142,
	1365, 1364, 2964, 1363, 1362, 1261, 1262, 1263, 1260, 2686,
	1361, 1360, 1359, 2873, 1358, 1357, 1356, 2135, 3416, 1355,
	3122, 3418, 3375, 3253, 1354, 3420, 1353, 4054, 1766, 1352,
	3426, 1351, 1350, 1349, 3377, 3378, 1261, 1262, 1263, 1260,
	1348, 1347, 1344, 1343, 3382, 3397, 1342, 1340, 2873, 1339,
	1338, 1335, 2691, 2873, 2873, 1261, 1262, 1263, 1260, 1328,
	1327, 1325, 3387, 3381, 1324, 673, 2051, 142, 1323, 3421,
	1322, 3423, 1321, 1320, 142, 1319, 3454, 1318, 1317, 1316,
	1315, 1314, 1309, 1308, 1307, 1306, 1305, 142, 1225, 1171,
	142, 142, 2529, 2071, 3473, 3331, 3332, 3927, 3524, 2387,
	3409, 2366, 1213, 142, 4005, 3334, 2873, 2812, 2558, 2165,
	1224, 3004, 2994, 2999, 3341, 3340, 2997, 3491, 3000, 3413,
	1188, 2998, 3415, 2993, 3001, 3428, 2519, 2520, 3562, 3272,
	3337, 1070, 3431, 1188, 3003, 2992, 3563, 3958, 1070, 125,
	67, 3868, 66, 3678, 2651, 1188, 2640, 3538, 1442, 1940,
	1941, 1554, 1935, 1936, 1937, 3217, 3268, 3079, 3269, 3474,
	3379, 3380, 2455, 3534, 3443, 3475, 3353, 2040, 3477, 3445,
	1607, 2635, 673, 2675, 2051, 2656, 2657, 2339, 1188, 1661,
	1552, 3514, 3521, 1641, 2125, 3279, 3561, 1219, 3193, 3186,
	2906, 2860, 3540, 2833, 2407, 3472, 3471, 2907, 2908, 2909,
	3482, 2375, 3484, 1944, 1911, 4067, 3478, 3833, 675, 676,
	223, 677, 1818, 1817, 1387, 1388, 1385, 1386, 1512, 1383,
	1384, 3300, 3550, 1188, 3553, 1523, 2501, 3533, 3530, 3528,
	2494, 3821, 1381, 1382, 3564, 2052, 1509, 3537, 1508, 1252,
	2183, 3542, 3345, 3027, 2340, 2195, 1560, 3545, 3544, 1461,
	1460, 1433, 3547, 3548, 1484, 4028, 2565, 3552, 4026, 3983,
	3554, 3955, 3954, 3952, 3893, 3607, 3853, 3731, 3730, 3668,
	3577, 3551, 3398, 3371, 3370, 3356, 3615, 3555, 2440, 2410,
	1663, 1188, 3355, 3037, 3585, 1275, 1274, 1284, 1285, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1276, 3571, 1458, 4058,
	4057, 1188, 1554, 1554, 3581, 3417, 3082, 3228, 3582, 2771,
	2368, 2261, 1395, 1210, 4057, 4058, 3612, 3697, 3614, 3650,
	3351, 3650, 913, 914, 915, 916, 1185, 1185, 210, 3,
	1476, 1552, 1764, 75, 1188, 3667, 1188, 3639, 3644, 3645,
	2, 4080, 4081, 3640, 1, 3670, 2752, 3672, 1880, 1389,
	917, 912, 1530, 1554, 2539, 2105, 1558, 3623, 1884, 3622,
	3621, 919, 3641, 3010, 3632, 3011, 3344, 3013, 2774, 2214,
	2974, 673, 2492, 1188, 1188, 3618, 2356, 1188, 1188, 3211,
	1443, 3655, 1764, 975, 3643, 3654, 3664, 3665, 3671, 1824,
	1678, 1202, 3475, 1675, 1201, 3719, 3666, 1199, 3647, 1769,
	800, 3714, 3679, 3676, 1070, 3514, 3521, 2168, 1946, 3703,
	3704, 3728, 3683, 3715, 3716, 2958, 2932, 2070, 3727, 2179,
	4066, 3390, 4101, 3737, 3738, 4020, 4069, 1694, 3392, 784,
	3675, 3946, 3858, 4024, 3860, 3747, 1554, 2219, 3725, 1257,
	3681, 2507, 1275, 1274, 1284, 1285, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1276, 3724, 3058, 1002, 841, 811, 3768,
	3407, 1326, 1654, 3128, 3726, 1552, 3126, 810, 3440, 3566,
	3761, 2802, 3732, 3030, 3720, 3804, 1003, 3749, 2514, 2518,
	2519, 2520, 2515, 2523, 2516, 2521, 2151, 3744, 2517, 3855,
	2522, 3492, 142, 3748, 3745, 142, 142, 1608, 142, 1612,
	3756, 3760, 2406, 982, 3531, 3812, 3912, 3677, 3802, 3796,
	3775, 3601, 3264, 2868, 1636, 3907, 2894, 3486, 3597, 3595,
	3669, 3596, 716, 2084, 1188, 647, 1052, 3718, 2164, 717,
	3593, 2386, 3594, 3970, 3786, 3819, 3835, 3825, 1068, 955,
	2365, 142, 956, 948, 2821, 2820, 1734, 1266, 1751, 2985,
	1068, 3797, 3147, 3798, 3585, 3148, 3799, 1303, 755, 2244,
	2799, 3509, 3811, 3023, 3815, 74, 142, 73, 1188, 72,
	71, 231, 802, 1554, 1275, 1274, 1284, 1285, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1276, 230, 3794, 3769, 3636,
	3832, 3942, 4071, 1070, 2985, 781, 780, 779, 778, 777,
	776, 2512, 1552, 2513, 3841, 2511, 2509, 2508, 2066, 2065,
	3036, 3354, 2130, 2132, 3843, 1876, 1928, 3226, 2897, 2892,
	1991, 1933, 1989, 1521, 2435, 2442, 1988, 3885, 4002, 3388,
	3874, 1876, 3588, 3922, 3556, 3923, 3694, 3558, 2942, 3854,
	3584, 1934, 2431, 2008, 2913, 2005, 1293, 2004, 2905, 3690,
	3684, 2036, 2873, 3800, 3649, 3894, 3493, 3494, 3565, 2514,
	2518, 2519, 2520, 2515, 2523, 2516, 2521, 3500, 3882, 2517,
	2374, 2522, 1121, 1117, 1119, 1120, 1118, 2696, 3320, 2412,
	3888, 3188, 2348, 3911, 2347, 2345, 2344, 1188, 1418, 3896,
	3884, 3966, 3617, 1986, 1987, 1554, 3905, 2563, 3936, 2561,
	1168, 3333, 3329, 3943, 2176, 1717, 3338, 1717, 3926, 3928,
	3930, 3932, 3910, 2995, 2191, 3078, 2067, 3944, 2063, 2062,
	3919, 1092, 1091, 3925, 1552, 1589, 2976, 2502, 3777, 1939,
	949, 3451, 3452, 3453, 2363, 109, 3935, 3457, 3458, 41,
	122, 108, 185, 59, 3951, 3949, 1554, 184, 58, 3802,
	120, 182, 2112, 57, 103, 102, 119, 180, 2112, 2112,
	2112, 56, 3963, 215, 214, 3993, 217, 216, 213, 2613,
	2614, 4001, 212, 1596, 211, 1552, 3984, 3986, 3956, 3653,
	3987, 3988, 3124, 3938, 907, 44, 43, 3985, 186, 42,
	110, 60, 40, 39, 38, 34, 13, 12, 4017, 35,
	22, 21, 1682, 4010, 20, 4011, 26, 4012, 32, 4013,
	31, 135, 4014, 134, 30, 133, 4027, 132, 4029, 4030,
	131, 130, 129, 128, 4025, 4023, 127, 29, 19, 51,
	50, 49, 3874, 4033, 1188, 48, 1275, 1274, 1284, 1285,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1276, 3850, 3851,
	47, 46, 9, 3825, 123, 118, 4046, 116, 28, 117,
	114, 4047, 4049, 4048, 115, 113, 4052, 112, 111, 4055,
	4065, 4053, 4073, 106, 104, 4072, 86, 85, 84, 99,
	98, 4059, 4060, 4061, 4062, 97, 96, 95, 94, 92,
	4085, 93, 4077, 1001, 83, 1717, 1188, 82, 81, 2683,
	80, 79, 101, 107, 105, 90, 100, 4090, 3911, 4091,
	91, 89, 4093, 88, 87, 78, 4099, 77, 76, 4103,
	166, 165, 4100, 1275, 1274, 1284, 1285, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1276, 1510, 1511, 164, 1513, 1514,
	163, 1518, 1519, 1520, 162, 160, 161, 4111, 159, 158,
	157, 156, 155, 154, 52, 53, 4073, 4119, 54, 4072,
	4118, 2532, 55, 176, 175, 177, 179, 181, 4103, 4120,
	178, 183, 173, 171, 4124, 1569, 1570, 1571, 1572, 1573,
	174, 1575, 1576, 1577, 1578, 1579, 172, 170, 69, 1585,
	1586, 1587, 1588, 11, 1844, 1845, 1846, 1847, 121, 18,
	1851, 1852, 1853, 1854, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1866, 4, 0, 206, 64, 197,
	168, 0, 0, 0, 0, 0, 2070, 0, 0, 0,
	0, 1287, 0, 1291, 142, 0, 198, 0, 0, 0,
	0, 0, 0, 189, 3721, 2241, 0, 199, 3722, 1288,
	1290, 1286, 0, 1289, 1275, 1274, 1284, 1285, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1276, 140, 3498, 1313, 1275,
	1274, 1284, 1285, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1276, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 2353, 2354, 2355,
	0, 0, 0, 0, 0, 0, 0, 0, 3510, 0,
	0, 0, 2370, 2371, 2372, 2373, 0, 0, 0, 0,
	0, 3501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3496, 0, 3918, 0, 0, 3518, 3519, 0,
	0, 0, 0, 3497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 990, 1275, 1274, 1284, 1285, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1276, 148, 149, 0,
	150, 151, 0, 0, 0, 152, 0, 0, 153, 0,
	3502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 727, 734, 724, 0, 4044, 0, 0, 0, 0,
	0, 0, 0, 731, 732, 0, 733, 737, 0, 3998,
	718, 0, 0, 0, 0, 0, 986, 987, 0, 0,
	742, 0, 3844, 0, 0, 0, 0, 1030, 0, 0,
	1523, 167, 195, 204, 196, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 194, 188, 187, 1717, 0, 0,
	0, 70, 0, 142, 0, 0, 746, 0, 3517, 748,
	2421, 0, 0, 0, 747, 0, 0, 1560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3998, 0,
	2112, 0, 0, 0, 0, 3506, 3895, 0, 0, 0,
	0, 3899, 3900, 0, 0, 0, 0, 0, 0, 0,
	0, 1032, 0, 0, 1031, 0, 0, 3503, 3507, 3505,
	3504, 0, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 3920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3998, 0, 0, 0, 0, 0,
	0, 0, 0, 1016, 0, 0, 0, 3512, 3513, 0,
	0, 200, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 193, 0, 137, 993,
	0, 2070, 2070, 2070, 2070, 2070, 2070, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2070, 0,
	4122, 3520, 0, 0, 719, 721, 720, 0, 0, 0,
	0, 0, 0, 3499, 0, 726, 0, 0, 0, 3511,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 745, 138, 0, 0, 0, 0,
	0, 723, 0, 0, 1015, 1013, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 2117, 0, 0, 0,
	4035, 4036, 0, 0, 0, 0, 0, 4040, 4041, 4042,
	4043, 0, 1012, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 142, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 992, 1025, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 203, 0, 147, 0, 0, 0, 2837,
	169, 0, 0, 0, 0, 61, 0, 0, 0, 3516,
	0, 0, 0, 0, 0, 1022, 1026, 0, 0, 725,
	729, 735, 0, 736, 738, 0, 0, 739, 740, 741,
	0, 0, 743, 744, 0, 1009, 0, 1007, 1011, 1029,
	0, 0, 0, 1008, 1005, 1004, 0, 1010, 995, 996,
	994, 997, 998, 999, 1000, 0, 1027, 0, 1028, 0,
	0, 2037, 0, 0, 0, 0, 1998, 0, 0, 1023,
	1024, 139, 45, 0, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 3515, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 2040, 2007, 0,
	143, 144, 0, 0, 145, 0, 1019, 2041, 2042, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 2006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2014, 0, 0, 728, 727, 734, 724, 0, 1068,
	0, 142, 0, 0, 0, 0, 142, 731, 732, 0,
	733, 737, 0, 2070, 718, 0, 0, 0, 0, 0,
	3028, 3029, 0, 0, 742, 0, 0, 0, 722, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 0,
	0, 988, 989, 983, 1125, 0, 0, 0, 984, 2030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 1152, 1154, 1156, 1158,
	1159, 1161, 0, 1166, 1162, 1163, 1164, 1165, 0, 1143,
	1144, 1145, 1146, 1123, 1124, 1149, 0, 1126, 0, 1128,
	1129, 1130, 1131, 1127, 1132, 1133, 1134, 1135, 1136, 1139,
	1141, 1137, 1138, 1147, 0, 0, 0, 0, 0, 0,
	0, 1151, 1153, 1155, 1157, 1160, 0, 0, 0, 0,
	0, 0, 0, 1997, 1999, 1996, 0, 0, 1993, 0,
	0, 0, 0, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2024, 0, 0, 0, 0, 0,
	2037, 1142, 2009, 0, 1992, 1998, 0, 0, 0, 0,
	0, 0, 0, 0, 2012, 2046, 0, 0, 2013, 2015,
	2017, 0, 2019, 2020, 2021, 2025, 2026, 2027, 2029, 2032,
	2033, 2034, 0, 0, 0, 0, 2040, 2007, 0, 2022,
	2031, 2023, 0, 0, 0, 0, 2041, 2042, 0, 0,
	0, 2001, 0, 0, 0, 0, 0, 0, 719, 721,
	720, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 2006, 0, 0, 2038, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 745, 0,
	2014, 0, 0, 0, 0, 723, 0, 728, 727, 734,
	724, 0, 0, 0, 0, 0, 0, 0, 1994, 1995,
	731, 732, 0, 733, 737, 3220, 0, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 2035, 742, 0, 0,
	0, 0, 3232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2011, 0, 0, 0, 0, 2692, 2693,
	2010, 0, 0, 0, 0, 0, 0, 0, 2030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 2028, 0, 748, 0, 0, 0,
	0, 747, 0, 2016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2044, 2043, 0, 142,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 725, 729, 735, 0, 736, 738, 0,
	0, 739, 740, 741, 0, 0, 743, 744, 0, 0,
	0, 0, 1997, 2863, 1996, 0, 0, 2862, 0, 0,
	0, 0, 2018, 0, 0, 0, 0, 0, 0, 2003,
	0, 0, 0, 2024, 0, 2070, 0, 0, 0, 0,
	2112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2012, 2046, 0, 0, 2013, 2015, 2017,
	0, 2019, 2020, 2021, 2025, 2026, 2027, 2029, 2032, 2033,
	2034, 2039, 1150, 0, 2045, 0, 0, 0, 2022, 2031,
	2023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 721, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 2038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 0, 0, 723, 0,
	0, 0, 713, 0, 0, 0, 0, 1994, 1995, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 2035, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3384, 0, 0, 0,
	0, 0, 2011, 0, 0, 0, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2028, 0, 0, 0, 0, 0, 0,
	0, 0, 2016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2044, 2043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 725, 729, 735, 0,
	736, 738, 0, 0, 739, 740, 741, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2003, 0,
	0, 0, 0, 0, 0, 0, 0, 2112, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 770, 0,
	2039, 0, 337, 2045, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 809, 569, 520, 435, 386, 587, 586,
	0, 0, 878, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 762, 0, 0,
	799, 854, 853, 786, 796, 0, 0, 310, 229, 515,
	635, 517, 516, 787, 0, 788, 792, 795, 791, 789,
	790, 0, 869, 0, 2112, 0, 0, 0, 0, 754,
	766, 0, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 764, 0, 0,
	0, 142, 819, 0, 765, 0, 0, 814, 793, 797,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 794, 817, 821, 331, 892, 815, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 893, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 812, 0, 632, 0,
	471, 0, 0, 876, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 816, 0, 424, 404, 889, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 3702, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 1826, 1825, 1827, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 873,
	400, 597, 630, 631, 522, 0, 888, 868, 870, 871,
	875, 879, 880, 881, 882, 883, 885, 887, 891, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	890, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	820, 572, 573, 390, 391, 392, 393, 877, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 899, 872, 898, 900,
	901, 897, 902, 903, 884, 775, 0, 827, 895, 894,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 782, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 861, 834, 835, 836, 772, 837,
	831, 832, 773, 833, 862, 825, 858, 859, 801, 828,
	838, 857, 839, 860, 863, 864, 904, 905, 845, 829,
	257, 906, 842, 865, 856, 855, 840, 826, 866, 867,
	808, 803, 843, 844, 830, 849, 850, 851, 774, 822,
	823, 824, 846, 847, 804, 805, 806, 807, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 852, 640, 439, 440, 0, 848,
	643, 644, 641, 375, 426, 445, 433, 818, 657, 518,
	519, 658, 629, 0, 767, 0, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	770, 0, 0, 0, 337, 1877, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 809, 569, 520, 435, 386,
	587, 586, 0, 0, 878, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 2096, 0, 0, 762,
	0, 0, 799, 854, 853, 786, 796, 0, 0, 310,
	229, 515, 635, 517, 516, 787, 0, 788, 792, 795,
	791, 789, 790, 0, 869, 0, 0, 0, 0, 0,
	0, 754, 766, 0, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 764,
	0, 0, 0, 0, 819, 0, 765, 0, 0, 2097,
	793, 797, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 794, 817, 821, 331, 892, 815, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 893, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 812, 0,
	632, 0, 471, 0, 0, 876, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 816, 0, 424, 404,
	889, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 873, 400, 597, 630, 631, 522, 0, 888, 868,
	870, 871, 875, 879, 880, 881, 882, 883, 885, 887,
	891, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 890, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 820, 572, 573, 390, 391, 392, 393, 877,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 899, 872,
	898, 900, 901, 897, 902, 903, 884, 775, 0, 827,
	895, 894, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 782, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 861, 834, 835, 836,
	772, 837, 831, 832, 773, 833, 862, 825, 858, 859,
	801, 828, 838, 857, 839, 860, 863, 864, 904, 905,
	845, 829, 257, 906, 842, 865, 856, 855, 840, 826,
	866, 867, 808, 803, 843, 844, 830, 849, 850, 851,
	774, 822, 823, 824, 846, 847, 804, 805, 806, 807,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 852, 640, 439, 440,
	0, 848, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 0, 767, 206, 818, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 1296, 569, 520, 435,
	386, 587, 586, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	310, 229, 515, 635, 517, 516, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 754, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 794, 817, 821, 331, 892, 815,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 893, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 812,
	0, 632, 0, 471, 0, 0, 876, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 816, 0, 424,
	404, 889, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 873, 400, 597, 630, 631, 522, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 890, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 820, 572, 573, 390, 391, 392, 393,
	877, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 782, 293, 528, 371,
	169, 415, 344, 593, 594, 0, 645, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 852, 640, 439,
	440, 0, 848, 643, 644, 641, 375, 426, 445, 433,
	818, 657, 518, 519, 658, 629, 0, 767, 0, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 337, 4121, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 809, 569,
	520, 435, 386, 587, 586, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 762, 0, 0, 799, 854, 853, 786, 796,
	0, 0, 310, 229, 515, 635, 517, 516, 787, 0,
	788, 792, 795, 791, 789, 790, 0, 869, 0, 0,
	0, 0, 0, 0, 754, 766, 0, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 764, 0, 0, 0, 0, 819, 0, 765,
	0, 0, 814, 793, 797, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 794, 817, 821, 331,
	892, 815, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 893, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 812, 0, 632, 0, 471, 0, 0, 876, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 816,
	0, 424, 404, 889, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 873, 400, 597, 630, 631, 522,
	0, 888, 868, 870, 871, 875, 879, 880, 881, 882,
	883, 885, 887, 891, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 890, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 820, 572, 573, 390, 391,
	392, 393, 877, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 899, 872, 898, 900, 901, 897, 902, 903, 884,
	775, 0, 827, 895, 894, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 782, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 861,
	834, 835, 836, 772, 837, 831, 832, 773, 833, 862,
	825, 858, 859, 801, 828, 838, 857, 839, 860, 863,
	864, 904, 905, 845, 829, 257, 906, 842, 865, 856,
	855, 840, 826, 866, 867, 808, 803, 843, 844, 830,
	849, 850, 851, 774, 822, 823, 824, 846, 847, 804,
	805, 806, 807, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 852,
	640, 439, 440, 0, 848, 643, 644, 641, 375, 426,
	445, 433, 818, 657, 518, 519, 658, 629, 0, 767,
	0, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	809, 569, 520, 435, 386, 587, 586, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 310, 229, 515, 635, 517, 516,
	787, 0, 788, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 794, 817,
	821, 331, 892, 815, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	893, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 812, 0, 632, 0, 471, 0, 0,
	876, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 816, 0, 424, 404, 889, 3999, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 873, 400, 597, 630,
	631, 522, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 890, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 820, 572, 573,
	390, 391, 392, 393, 877, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	782, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 852, 640, 439, 440, 0, 848, 643, 644, 641,
	375, 426, 445, 433, 818, 657, 518, 519, 658, 629,
	0, 767, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 337, 1877, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 809, 569, 520, 435, 386, 587, 586, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 762, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 310, 229, 515, 635,
	517, 516, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 754, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 0, 0, 0,
	0, 819, 0, 765, 0, 0, 814, 793, 797, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	794, 817, 821, 331, 892, 815, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 893, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 812, 0, 632, 0, 471,
	0, 0, 876, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 816, 0, 424, 404, 889, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 873, 400,
	597, 630, 631, 522, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 890,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 820,
	572, 573, 390, 391, 392, 393, 877, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 782, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 852, 640, 439, 440, 0, 848, 643,
	644, 641, 375, 426, 445, 433, 818, 657, 518, 519,
	658, 629, 0, 767, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 809, 569, 520, 435, 386, 587,
	586, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 762, 0,
	0, 799, 854, 853, 786, 796, 0, 0, 310, 229,
	515, 635, 517, 516, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 869, 0, 0, 0, 0, 0, 0,
	754, 766, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 764, 1591,
	0, 0, 0, 819, 0, 765, 0, 0, 814, 793,
	797, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 794, 817, 821, 331, 892, 815, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 893, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 812, 0, 632,
	0, 471, 0, 0, 876, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 816, 0, 424, 404, 889,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	873, 400, 597, 630, 631, 522, 0, 888, 868, 870,
	871, 875, 879, 880, 881, 882, 883, 885, 887, 891,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 890, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 820, 572, 573, 390, 391, 392, 393, 877, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 899, 872, 898,
	900, 901, 897, 902, 903, 884, 775, 0, 827, 895,
	894, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 782, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 861, 834, 835, 836, 772,
	837, 831, 832, 773, 833, 862, 825, 858, 859, 801,
	828, 838, 857, 839, 860, 863, 864, 904, 905, 845,
	829, 257, 906, 842, 865, 856, 855, 840, 826, 866,
	867, 808, 803, 843, 844, 830, 849, 850, 851, 774,
	822, 823, 824, 846, 847, 804, 805, 806, 807, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 852, 640, 439, 440, 0,
	848, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 818, 767, 0, 2269, 0, 0,
	0, 0, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 809, 569, 520, 435, 386, 587, 586, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 762, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 310, 229, 515, 635,
	517, 516, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 754, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 0, 0, 0,
	0, 819, 0, 765, 0, 0, 814, 793, 797, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	794, 817, 821, 331, 892, 815, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 893, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 812, 0, 632, 0, 471,
	0, 0, 876, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 816, 0, 424, 404, 889, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 873, 400,
	597, 630, 631, 522, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 890,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 820,
	572, 573, 390, 391, 392, 393, 877, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 782, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 852, 640, 439, 440, 0, 848, 643,
	644, 641, 375, 426, 445, 433, 818, 657, 518, 519,
	658, 629, 0, 767, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 809, 569, 520, 435, 386, 587,
	586, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 762, 0,
	0, 799, 854, 853, 786, 796, 0, 0, 310, 229,
	515, 635, 517, 516, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 869, 0, 0, 0, 0, 0, 0,
	754, 766, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 764, 1870,
	0, 0, 0, 819, 0, 765, 0, 0, 814, 793,
	797, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 794, 817, 821, 331, 892, 815, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 893, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 812, 0, 632,
	0, 471, 0, 0, 876, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 816, 0, 424, 404, 889,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	873, 400, 597, 630, 631, 522, 0, 888, 868, 870,
	871, 875, 879, 880, 881, 882, 883, 885, 887, 891,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 890, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 820, 572, 573, 390, 391, 392, 393, 877, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 899, 872, 898,
	900, 901, 897, 902, 903, 884, 775, 0, 827, 895,
	894, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 782, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 861, 834, 835, 836, 772,
	837, 831, 832, 773, 833, 862, 825, 858, 859, 801,
	828, 838, 857, 839, 860, 863, 864, 904, 905, 845,
	829, 257, 906, 842, 865, 856, 855, 840, 826, 866,
	867, 808, 803, 843, 844, 830, 849, 850, 851, 774,
	822, 823, 824, 846, 847, 804, 805, 806, 807, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 852, 640, 439, 440, 0,
	848, 643, 644, 641, 375, 426, 445, 433, 818, 657,
	518, 519, 658, 629, 0, 767, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 809, 569, 520, 435,
	386, 587, 586, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	762, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	310, 229, 515, 635, 517, 516, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 754, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 794, 817, 821, 331, 892, 815,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 893, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 812,
	0, 632, 0, 471, 0, 0, 876, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 816, 0, 424,
	404, 889, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 873, 400, 597, 630, 631, 522, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 890, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 820, 572, 573, 390, 391, 392, 393,
	877, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 782, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 852, 640, 439,
	440, 0, 848, 643, 644, 641, 375, 426, 445, 433,
	818, 657, 518, 519, 658, 629, 0, 767, 0, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 770, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 809, 569,
	520, 435, 386, 587, 586, 0, 0, 878, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 762, 0, 0, 799, 854, 853, 786, 796,
	0, 0, 310, 229, 515, 635, 517, 516, 787, 0,
	788, 792, 795, 791, 789, 790, 0, 869, 0, 0,
	0, 0, 0, 0, 754, 766, 0, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 764, 0, 0, 0, 0, 819, 0, 765,
	0, 0, 814, 793, 797, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 794, 817, 821, 331,
	892, 815, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 893, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 812, 0, 632, 0, 471, 0, 0, 876, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 816,
	0, 424, 404, 889, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 873, 400, 597, 630, 631, 522,
	0, 888, 868, 870, 871, 875, 879, 880, 881, 882,
	883, 885, 887, 891, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 890, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 820, 572, 573, 390, 391,
	392, 393, 877, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 899, 872, 898, 900, 901, 897, 902, 903, 884,
	775, 0, 827, 895, 894, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 782, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 861,
	834, 835, 836, 772, 837, 831, 832, 773, 833, 862,
	825, 858, 859, 801, 828, 838, 857, 839, 860, 863,
	864, 904, 905, 845, 829, 257, 906, 842, 865, 856,
	855, 840, 826, 866, 867, 808, 803, 843, 844, 830,
	849, 850, 851, 774, 822, 823, 824, 846, 847, 804,
	805, 806, 807, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 852,
	640, 439, 440, 0, 3567, 643, 3568, 3569, 375, 426,
	445, 433, 818, 657, 518, 519, 658, 629, 0, 767,
	0, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 770, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	809, 569, 520, 435, 386, 587, 586, 0, 0, 878,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 762, 0, 0, 799, 854, 853,
	786, 796, 0, 0, 310, 229, 515, 635, 517, 516,
	2749, 0, 2750, 792, 795, 791, 789, 790, 0, 869,
	0, 0, 0, 0, 0, 0, 754, 766, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 764, 0, 0, 0, 0, 819,
	0, 765, 0, 0, 814, 793, 797, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 794, 817,
	821, 331, 892, 815, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	893, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 812, 0, 632, 0, 471, 0, 0,
	876, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 816, 0, 424, 404, 889, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 873, 400, 597, 630,
	631, 522, 0, 888, 868, 870, 871, 875, 879, 880,
	881, 882, 883, 885, 887, 891, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 890, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 820, 572, 573,
	390, 391, 392, 393, 877, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 899, 872, 898, 900, 901, 897, 902,
	903, 884, 775, 0, 827, 895, 894, 896, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	782, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 861, 834, 835, 836, 772, 837, 831, 832, 773,
	833, 862, 825, 858, 859, 801, 828, 838, 857, 839,
	860, 863, 864, 904, 905, 845, 829, 257, 906, 842,
	865, 856, 855, 840, 826, 866, 867, 808, 803, 843,
	844, 830, 849, 850, 851, 774, 822, 823, 824, 846,
	847, 804, 805, 806, 807, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 852, 640, 439, 440, 0, 848, 643, 644, 641,
	375, 426, 445, 433, 818, 657, 518, 519, 658, 629,
	0, 767, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 1735, 0, 0, 0, 770, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 809, 569, 520, 435, 386, 587, 586, 0,
	0, 878, 886, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 0, 762, 0, 0, 799,
	854, 853, 786, 796, 0, 0, 310, 229, 515, 635,
	517, 516, 787, 0, 788, 792, 795, 791, 789, 790,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 764, 0, 0, 0,
	0, 819, 0, 765, 0, 0, 814, 793, 797, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	794, 817, 821, 331, 892, 815, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 893, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 812, 0, 632, 0, 471,
	0, 0, 876, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 816, 0, 424, 404, 889, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 1736, 1737, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 873, 400,
	597, 630, 631, 522, 0, 888, 868, 870, 871, 875,
	879, 880, 881, 882, 883, 885, 887, 891, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 890,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 820,
	572, 573, 390, 391, 392, 393, 877, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 899, 872, 898, 900, 901,
	897, 902, 903, 884, 775, 0, 827, 895, 894, 896,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 782, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 861, 834, 835, 836, 772, 837, 831,
	832, 773, 833, 862, 825, 858, 859, 801, 828, 838,
	857, 839, 860, 863, 864, 904, 905, 845, 829, 257,
	906, 842, 865, 856, 855, 840, 826, 866, 867, 808,
	803, 843, 844, 830, 849, 850, 851, 774, 822, 823,
	824, 846, 847, 804, 805, 806, 807, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 852, 640, 439, 440, 0, 848, 643,
	644, 641, 375, 426, 445, 433, 818, 657, 518, 519,
	658, 629, 0, 767, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 809, 569, 520, 435, 386, 587,
	586, 0, 0, 878, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 762, 0,
	0, 799, 854, 853, 786, 796, 0, 0, 310, 229,
	515, 635, 517, 516, 787, 0, 788, 792, 795, 791,
	789, 790, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 763, 764, 0,
	0, 0, 0, 819, 0, 765, 0, 0, 814, 793,
	797, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 794, 817, 821, 331, 892, 815, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 893, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 812, 0, 632,
	0, 471, 0, 0, 876, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 816, 0, 424, 404, 889,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	873, 400, 597, 630, 631, 522, 0, 888, 868, 870,
	871, 875, 879, 880, 881, 882, 883, 885, 887, 891,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 890, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 820, 572, 573, 390, 391, 392, 393, 877, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 899, 872, 898,
	900, 901, 897, 902, 903, 884, 775, 0, 827, 895,
	894, 896, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 782, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 861, 834, 835, 836, 772,
	837, 831, 832, 773, 833, 862, 825, 858, 859, 801,
	828, 838, 857, 839, 860, 863, 864, 904, 905, 845,
	829, 257, 906, 842, 865, 856, 855, 840, 826, 866,
	867, 808, 803, 843, 844, 830, 849, 850, 851, 774,
	822, 823, 824, 846, 847, 804, 805, 806, 807, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 852, 640, 439, 440, 0,
	848, 643, 644, 641, 375, 426, 445, 433, 818, 657,
	518, 519, 658, 629, 0, 767, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 809, 569, 520, 435,
	386, 587, 586, 0, 0, 878, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 799, 854, 853, 786, 796, 0, 0,
	310, 229, 515, 635, 517, 516, 787, 0, 788, 792,
	795, 791, 789, 790, 0, 869, 0, 0, 0, 0,
	0, 0, 754, 766, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 763,
	764, 0, 0, 0, 0, 819, 0, 765, 0, 0,
	814, 793, 797, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 794, 817, 821, 331, 892, 815,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 893, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 812,
	0, 632, 0, 471, 0, 0, 876, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 816, 0, 424,
	404, 889, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 873, 400, 597, 630, 631, 522, 0, 888,
	868, 870, 871, 875, 879, 880, 881, 882, 883, 885,
	887, 891, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 890, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 820, 572, 573, 390, 391, 392, 393,
	877, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 899,
	872, 898, 900, 901, 897, 902, 903, 884, 775, 0,
	827, 895, 894, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 782, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 861, 834, 835,
	836, 772, 837, 831, 832, 773, 833, 862, 825, 858,
	859, 801, 828, 838, 857, 839, 860, 863, 864, 904,
	905, 845, 829, 257, 906, 842, 865, 856, 855, 840,
	826, 866, 867, 808, 803, 843, 844, 830, 849, 850,
	851, 774, 822, 823, 824, 846, 847, 804, 805, 806,
	807, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 852, 640, 439,
	440, 0, 848, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 0, 767, 206, 64,
	197, 168, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 198, 0, 0,
	0, 0, 0, 0, 189, 0, 337, 0, 199, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 140, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 167, 195, 204, 196, 124, 0, 0, 628,
	0, 0, 632, 0, 471, 0, 0, 221, 0, 0,
	0, 441, 0, 0, 367, 194, 188, 187, 487, 0,
	424, 404, 233, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 607, 608, 609, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 466, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 224,
	579, 582, 512, 234, 0, 576, 591, 549, 590, 235,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 138, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 232,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 239, 305, 454, 240, 0, 293, 528,
	371, 169, 415, 344, 593, 594, 61, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 236, 45, 222, 225, 227, 226, 0, 62,
	577, 589, 623, 5, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 143, 237, 518, 519, 238, 629, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 140, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 2423, 2426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 2427, 471, 0, 0, 0, 2422, 0, 2421,
	441, 2419, 2424, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 2425, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	169, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 228, 0, 0, 786, 796, 0, 0, 310,
	229, 515, 635, 517, 516, 787, 0, 788, 792, 795,
	791, 789, 790, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	793, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 794, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 206, 64, 197, 168, 0,
	0, 0, 0, 0, 0, 402, 683, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 687, 688, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 684, 686,
	315, 494, 416, 698, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 169, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 1140, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1125, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 2587, 2590,
	2591, 2592, 2593, 2594, 2595, 0, 2600, 2596, 2597, 2598,
	2599, 0, 2582, 2583, 2584, 2585, 1123, 2566, 2588, 0,
	2567, 398, 2568, 2569, 2570, 2571, 1127, 2572, 2573, 2574,
	2575, 2576, 2579, 2580, 2577, 2578, 2586, 410, 374, 411,
	356, 388, 387, 389, 1151, 1153, 1155, 1157, 1160, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 2581, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 2589, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 2423, 2426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 2427, 471,
	0, 0, 0, 2422, 0, 2421, 441, 2419, 2424, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 2425, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 2444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 2443, 471, 0,
	0, 0, 2449, 2446, 2448, 441, 0, 2447, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 2441, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 2444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 2443, 471, 0, 0,
	0, 2449, 2446, 2448, 441, 0, 2447, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 2136, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 2137,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 1261, 1262, 1263, 1260, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 206, 657, 518, 519, 658, 629, 0,
	0, 0, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 140, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2186, 0, 228,
	0, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 169, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 206, 657, 518, 519,
	658, 629, 0, 0, 0, 0, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 140, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	2171, 0, 228, 0, 0, 0, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 169,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 1051, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 1058, 1059, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 1045, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 1032, 469, 304,
	1031, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 1049,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 1050,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 1053, 572, 573, 390, 391, 392, 393, 350, 598,
	1048, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 1060, 1046, 1056, 1047, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 1057, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 1044, 426, 445, 433, 206, 657,
	518, 519, 658, 629, 0, 0, 0, 0, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 140, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2068, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 632, 0, 471, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 487, 0,
	424, 404, 660, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 661, 662, 663, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 656, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 0,
	579, 582, 512, 655, 0, 576, 591, 659, 590, 652,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 664,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 653, 650, 454, 654, 0, 293, 528,
	371, 169, 415, 344, 593, 594, 0, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 651, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 657, 518, 519, 658, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 1058, 1059, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 1032,
	469, 304, 1031, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 1060, 2089, 1056, 2090, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 1057, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 2978, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 2981, 0, 0, 0, 2980, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 1557, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 1555, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 1551, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1555, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1553, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 0, 458, 486, 331, 477, 0, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 502, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 487, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4068, 0, 228,
	854, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 1555, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1553, 0, 0, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 0, 471, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	2488, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 980, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 1555,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1765, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 657, 518, 519, 658, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 2528, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2530, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 660, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 0, 642, 643, 644, 641, 375, 426,
	445, 433, 0, 657, 518, 519, 658, 629, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 2136, 0, 0, 0, 0, 337, 0, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 0, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 2137, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 632, 0, 471, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 487, 0,
	424, 404, 660, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 661, 662, 663, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 656, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 0,
	579, 582, 512, 655, 0, 576, 591, 659, 590, 652,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 664,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 653, 650, 454, 654, 0, 293, 528,
	371, 0, 415, 344, 593, 594, 0, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 651, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 657, 518, 519, 658, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 3197, 3199, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 2551, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 1555, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 670, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 854, 0, 0, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 0, 458, 486, 331, 477, 0, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 502, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 487, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4045, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 3803, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 0, 471, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 3937, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1779, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 657, 518, 519, 658, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3818, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 660, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 0, 642, 643, 644, 641, 375, 426,
	445, 433, 0, 657, 518, 519, 658, 629, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 0, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 632, 0, 471, 0, 0, 0, 3729, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 487, 0,
	424, 404, 660, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 661, 662, 663, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 656, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 0,
	579, 582, 512, 655, 0, 576, 591, 659, 590, 652,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 664,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 653, 650, 454, 654, 0, 293, 528,
	371, 0, 415, 344, 593, 594, 0, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 651, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 657, 518, 519, 658, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 3229, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2068, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 3444, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 0, 458, 486, 331, 477, 0, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 502, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 487, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 0, 471, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1555, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 2530,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 657, 518, 519, 658, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 2896,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 660, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 0, 642, 643, 644, 641, 375, 426,
	445, 433, 0, 657, 518, 519, 658, 629, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 0, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 632, 0, 471, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 487, 0,
	424, 404, 660, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 661, 662, 663, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 656, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 0,
	579, 582, 512, 655, 0, 576, 591, 659, 590, 652,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 664,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 653, 650, 454, 654, 0, 293, 528,
	371, 0, 415, 344, 593, 594, 0, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 651, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 657, 518, 519, 658, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2647, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2607, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 2376, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 0, 458, 486, 331, 477, 0, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 502, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 487, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 1919, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 2050, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 0, 471, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1555, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 1955, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 1584,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 657, 518, 519, 658, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 660, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 0, 642, 643, 644, 641, 375, 426,
	445, 433, 0, 657, 518, 519, 658, 629, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 0, 569, 520,
	435, 386, 587, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 310, 229, 515, 635, 517, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 0, 458, 486, 331, 477,
	0, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 502, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 681, 632, 0, 471, 0, 0, 0, 0, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 487, 0,
	424, 404, 660, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 661, 662, 663, 499, 0, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 0, 0, 0,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 656, 330, 400, 597, 630, 631, 522, 0,
	584, 523, 532, 322, 556, 568, 567, 396, 482, 0,
	579, 582, 512, 655, 0, 576, 591, 659, 590, 652,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 467, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 491, 572, 573, 390, 391, 392,
	393, 350, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 664,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 653, 650, 454, 654, 0, 293, 528,
	371, 0, 415, 344, 593, 594, 0, 645, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 596, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 651, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 637, 640,
	439, 440, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 657, 518, 519, 658, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 660, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 661, 662, 663, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 656, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 655, 0, 576, 591, 659, 590, 652, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 664, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 980, 0, 548, 449, 324, 285, 320,
	321, 328, 653, 650, 454, 654, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 651, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 0, 642, 643, 644, 641, 375, 426, 445, 433,
	0, 657, 518, 519, 658, 629, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 0, 569, 520, 435, 386,
	587, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 310,
	229, 515, 635, 517, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 0, 458, 486, 331, 477, 0, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 502, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 0, 0,
	632, 0, 471, 0, 0, 0, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 487, 0, 424, 404,
	660, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 661, 662, 663, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	656, 330, 400, 597, 630, 631, 522, 0, 584, 523,
	532, 322, 556, 568, 567, 396, 482, 0, 579, 582,
	512, 655, 0, 576, 591, 659, 590, 652, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 467, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 491, 572, 573, 390, 391, 392, 393, 350,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 664, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 653, 650, 454, 654, 0, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	596, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	651, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 637, 640, 439, 440,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	657, 518, 519, 658, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 660,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 3175, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	661, 662, 663, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 656,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	655, 0, 576, 591, 659, 590, 652, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 664, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	653, 650, 454, 654, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 651,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 0,
	642, 643, 644, 641, 375, 426, 445, 433, 0, 657,
	518, 519, 658, 629, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 0, 569, 520, 435, 386, 587, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 310, 229, 515,
	635, 517, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 1905, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 0, 458, 486, 331, 477, 0, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 502, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 632, 0,
	471, 0, 0, 0, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 487, 0, 424, 404, 660, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 661,
	662, 663, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 656, 330,
	400, 597, 630, 631, 522, 0, 584, 523, 532, 322,
	556, 568, 567, 396, 482, 0, 579, 582, 512, 655,
	0, 576, 591, 659, 590, 652, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	467, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	491, 572, 573, 390, 391, 392, 393, 350, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 664, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 653,
	650, 454, 654, 0, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 596, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 651, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 637, 640, 439, 440, 0, 642,
	643, 644, 641, 375, 426, 445, 433, 0, 657, 518,
	519, 658, 629, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 0, 569, 520, 435, 386, 587, 586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 310, 229, 515, 635,
	517, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 442, 1534, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	0, 458, 486, 331, 477, 0, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 502, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 0, 0, 632, 0, 471,
	0, 0, 0, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 487, 0, 424, 404, 660, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 661, 662,
	663, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 656, 330, 400,
	597, 630, 631, 522, 0, 584, 523, 532, 322, 556,
	568, 567, 396, 482, 0, 579, 582, 512, 655, 0,
	576, 591, 659, 590, 652, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 467,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 491,
	572, 573, 390, 391, 392, 393, 350, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 664, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 653, 650,
	454, 654, 0, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 596, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 651, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 637, 640, 439, 440, 0, 642, 643,
	644, 641, 375, 426, 445, 433, 0, 657, 518, 519,
	658, 629, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 0, 569, 520, 435, 386, 587, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 310, 229, 515, 635, 517,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 442, 1532, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 0,
	458, 486, 331, 477, 0, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 502, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 0, 0, 632, 0, 471, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 487, 0, 424, 404, 660, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 661, 662, 663,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 656, 330, 400, 597,
	630, 631, 522, 0, 584, 523, 532, 322, 556, 568,
	567, 396, 482, 0, 579, 582, 512, 655, 0, 576,
	591, 659, 590, 652, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 467, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 491, 572,
	573, 390, 391, 392, 393, 350, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 664, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 653, 650, 454,
	654, 0, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 596, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 651, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 637, 640, 439, 440, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 0, 657, 518, 519, 658,
	629, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	0, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 1411,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 660, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 661, 662, 663, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 656, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 655, 0, 576, 591,
	659, 590, 652, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 664, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 653, 650, 454, 654,
	0, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 651, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 0, 642, 643, 644, 641,
	375, 426, 445, 433, 0, 657, 518, 519, 658, 629,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 0,
	569, 520, 435, 386, 587, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 310, 229, 515, 635, 517, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 0, 458, 486,
	331, 477, 0, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 502,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 0, 0, 632, 0, 471, 0, 0, 0,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	487, 0, 424, 404, 660, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 749, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 661, 662, 663, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 656, 330, 400, 597, 630, 631,
	522, 0, 584, 523, 532, 322, 556, 568, 567, 396,
	482, 0, 579, 582, 512, 655, 0, 576, 591, 659,
	590, 652, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 467, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 491, 572, 573, 390,
	391, 392, 393, 350, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 664, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 653, 650, 454, 654, 0,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 596, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 651, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	637, 640, 439, 440, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 657, 518, 519, 658, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 660, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 706, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 661, 662, 663, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 656, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 655, 0, 576, 591, 659, 590,
	652, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 707, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	664, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 1140, 0, 548, 449, 324,
	285, 320, 321, 328, 653, 650, 454, 654, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	1140, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 651, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 0, 642, 643, 644, 641, 375, 426,
	445, 433, 0, 657, 518, 519, 658, 629, 0, 1125,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 1152, 1154, 1156, 1158, 1159, 1161, 0, 1166, 1162,
	1163, 1164, 1165, 0, 1143, 1144, 1145, 1146, 1123, 1124,
	1149, 0, 1126, 0, 1128, 1129, 1130, 1131, 1127, 1132,
	1133, 1134, 1135, 1136, 1139, 1141, 1137, 1138, 1147, 0,
	0, 0, 2037, 0, 1125, 0, 1151, 1153, 1155, 1157,
	1160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 1152, 1154, 1156, 1158,
	1159, 1161, 0, 1166, 1162, 1163, 1164, 1165, 2040, 1143,
	1144, 1145, 1146, 1123, 1124, 1149, 1142, 1126, 0, 1128,
	1129, 1130, 1131, 1127, 1132, 1133, 1134, 1135, 1136, 1139,
	1141, 1137, 1138, 1147, 0, 0, 0, 0, 0, 2037,
	0, 1151, 1153, 1155, 1157, 1160, 206, 0, 0, 0,
	0, 0, 3824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2014, 0, 0, 0, 0, 0, 0, 3648,
	0, 0, 0, 0, 0, 2040, 0, 2037, 0, 0,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2040, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2014,
	2030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2037, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2040, 0, 0, 0, 1261, 1262, 1263, 1260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2024, 0, 0, 0, 0,
	0, 3795, 0, 0, 2014, 2030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2012, 2046, 0, 0, 2013,
	2015, 2017, 0, 2019, 2020, 2021, 2025, 2026, 2027, 2029,
	2032, 2033, 2034, 0, 1802, 0, 0, 0, 0, 0,
	2022, 2031, 2023, 0, 0, 0, 0, 0, 0, 0,
	0, 2018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2024, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2030, 1802, 0, 0, 2038, 1150, 0, 0,
	0, 0, 2012, 2046, 0, 0, 2013, 2015, 2017, 2018,
	2019, 2020, 2021, 2025, 2026, 2027, 2029, 2032, 2033, 2034,
	2024, 0, 0, 0, 0, 0, 0, 2022, 2031, 2023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2012, 2046, 0, 0, 2013, 2015, 2017, 2035, 2019, 2020,
	2021, 2025, 2026, 2027, 2029, 2032, 2033, 2034, 0, 0,
	0, 0, 1150, 2038, 2011, 2022, 2031, 2023, 0, 0,
	0, 2010, 0, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2024, 0, 0,
	0, 0, 0, 0, 0, 2028, 0, 0, 0, 0,
	0, 2038, 0, 0, 2016, 0, 0, 2012, 2046, 0,
	0, 2013, 2015, 2017, 2035, 2019, 2020, 2021, 2025, 2026,
	2027, 2029, 2032, 2033, 2034, 0, 0, 0, 1798, 0,
	0, 2011, 2022, 2031, 2023, 1795, 0, 0, 2010, 1797,
	1794, 1796, 1800, 1801, 0, 0, 0, 1799, 0, 0,
	0, 0, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2028, 0, 0, 0, 0, 1798, 2038, 2011,
	0, 2016, 0, 0, 1795, 0, 2010, 0, 1797, 1794,
	1796, 1800, 1801, 0, 0, 0, 1799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2028, 0, 0, 0, 0, 0, 0, 0, 0, 2016,
	0, 0, 3656, 0, 0, 0, 0, 0, 0, 2035,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2011, 0, 0, 0,
	0, 0, 0, 2010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2028, 0, 0,
	0, 0, 0, 0, 0, 0, 2016, 0, 0, 3652,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1805, 1806, 1807, 1808, 1809, 1810, 1803, 1804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3656, 0, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1805, 1806, 1807, 1808, 1809, 1810, 1803, 1804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3656,
}

var yyPact = [...]int{
	361, -1000, -1000, -1000, -341, 15195, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49733, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 431, 49733, -339, 31202, 47816, -1000, -1000, 2802, -1000,
	48455, 17132, 49733, 532, 530, 49733, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 942, -1000, 54206, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 866, 5114, 53567, 11334,
	-224, -1000, 1625, -43, 2669, 500, -206, -207, 1120, 1126,
	1140, 1044, 49733, 1091, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 474, 965, 49094,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4276, 238, 939, 965, 22252, 117,
	107, 1625, 451, -91, 182, -1000, 1915, 4154, 194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11334, 11334, 15195, -401, 15195, 11334, 49733, 49733, -1000, -1000,
	-1000, -1000, -339, 48455, 866, 5114, 11334, 2669, 500, -206,
	-207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -91, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 107, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 54713, -1000, 1685,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2425, 3153, 1681, 2668, 803,
	47816, 49733, -1000, 137, 803, -1000, -1000, -1000, 1625, 3466,
	-1000, 49733, 49733, 202, 1917, -1000, 569, 479, 454, 435,
	344, 1675, -1000, -1000, -1000, -1000, -1000, -1000, 677, 3446,
	-1000, 49733, 49733, 3168, 49733, -1000, 2364, 735, -1000, 4337,
	3300, 1397, 984, 3177, -1000, -1000, 3152, -1000, 360, 755,
	327, 825, 427, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	332, -1000, 3361, -1000, -1000, 348, -1000, -1000, 341, -1000,
	-1000, -1000, 100, -1000, -1000, -1000, -1000, -1000, -1000, -16,
	-1000, -1000, 1266, 2291, 11334, 2728, -1000, 4063, 1696, -1000,
	-1000, -1000, 6834, 13902, 13902, 13902, 13902, 49733, -1000, -1000,
	3013, 11334, 3150, 3149, 3148, 3147, -1000, -1000, -1000, -1000,
	-1000, -1000, 3146, 1674, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2068, -1000, -1000, -1000, 14544, -1000, 3145,
	3144, 3143, 3142, 3141, 3139, 3137, 3136, 3134, 3132, 3128,
	3125, 3124, 3123, 2859, 16483, 3115, 2667, 2665, 3114, 3113,
	3111, 2659, 3110, 3107, 3106, 2859, 2859, 3105, 3104, 3097,
	3096, 3095, 3093, 3090, 3088, 3083, 3080, 3079, 3078, 3076,
	3075, 3074, 3068, 3067, 3065, 3064, 3062, 3061, 3060, 3058,
	3057, 3055, 3050, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1373, -1000, 3039,
	3465, 2950, -1000, 3349, 3336, 3333, 3331, -275, 3037, 2314,
	-1000, -1000, 96, 3445, 49733, -297, 49733, 413, -100, -101,
	-113, -1000, -80, -1000, -1000, 1102, -1000, 1075, 52928, 906,
	-1000, -1000, 49733, 862, 862, 862, 49733, 49733, 216, 1069,
	862, 862, 862, 862, 862, 860, 862, 3377, 937, 936,
	935, 932, 862, -47, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1916, 1913, 3238, 1038, -1000, -1000, -1000, -1000, 1525,
	49733, -1000, 2967, 413, -327, 1740, 1740, 3430, 3430, 3376,
	3375, 767, 759, 753, 1740, 573, -1000, 1860, 1860, 1860,
	1860, 1740, 494, 762, 3382, 3382, 104, 1860, 49, 1740,
	1740, 49, 1740, 1740, -1000, 1839, 314, -287, -1000, -1000,
	-1000, -1000, 1860, 1860, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3356, 3354, 866, 866, 49733, 866, 208, 49733, 866,
	866, 866, 49733, 876, -326, 48, 52289, 51650, 2386, 2364,
	708, 689, 1535, 1912, -1000, 1763, 49733, 49733, 1763, 1763,
	25451, 24812, -1000, 49733, -1000, 3465, 2950, 2839, 1720, 2833,
	2950, -114, 413, 866, 866, 866, 866, 866, 317, 866,
	866, 866, 866, 866, 49733, 49733, 47177, 866, 866, 866,
	866, 9402, 1915, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15195, 2186, 2169, 190,
	-21, -317, 264, -1000, -1000, 49733, 3278, 322, -1000, -1000,
	-1000, 2935, -1000, 2952, 2952, 2952, 2952, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2952, 2952, 2966,
	3032, -1000, -1000, 2948, 2948, 2948, 2935, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2960, 2960, 2964, 2964, 2960, 49733, -134, -1000,
	-1000, 11334, 49733, 3293, 412, 3022, 803, -1000, -1000, 49733,
	310, 419, 3465, 3289, 3382, 3409, -1000, -1000, 1657, 2313,
	2658, -1000, 344, -1000, 539, 344, -1000, 576, 576, 1778,
	-1000, 1280, -1000, -1000, -1000, -1000, -1000, -1000, 49733, -16,
	475, -1000, -1000, 2652, 3020, -1000, 635, 1234, 1584, -1000,
	277, 4851, 40148, 2364, 40148, 49733, -1000, -1000, -1000, -1000,
	-1000, -1000, 81, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 313, -1000, 11334,
	11334, 11334, 11334, 11334, -1000, 1042, 13260, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13902, 13902, 13902, 13902, 13902, 13902,
	13902, 13902, 13902, 13902, 13902, 13902, 3011, 2029, 13902, 13902,
	13902, 13902, 28007, 1720, 3091, 1529, 305, 1696, 1696, 1696,
	1696, 11334, -1000, 1931, 2291, 11334, 11334, 11334, 11334, 34397,
	49733, -1000, -1000, 55030, 11334, 11334, 55069, 11334, 3329, 11334,
	11334, 11334, 2829, 5541, 49733, 11334, -1000, 2828, 2827, -1000,
	-1000, 2124, 11334, -1000, -1000, 11334, -1000, -1000, 11334, 13902,
	11334, -1000, 11334, 11334, 11334, -1000, -1000, 1477, 3329, 3329,
	3329, 1929, 11334, 11334, 3329, 3329, 3329, 1908, 3329, 3329,
	3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 3329, 2823,
	2822, 2819, 10692, 3382, -224, -1000, 8760, 3289, 3382, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -279,
	3017, 49733, 2657, 2656, -350, 172, 458, 49733, 1150, -1000,
	-1000, 49733, 2307, 49733, 2300, 72, 1103, 1043, 1079, -1000,
	-1000, 49733, 51011, -1000, 49733, 1977, 49733, 49733, 3318, -1000,
	3015, 49733, 862, 862, 862, -1000, 45260, 40148, 49733, 49733,
	2364, 49733, 49733, 49733, 862, 862, 862, 862, 49733, -1000,
	3248, 40148, 3242, 876, -1000, 49733, 1525, 3317, 49733, -1000,
	-1000, -1000, -1000, 3430, 13902, 13902, -1000, -1000, 11334, -1000,
	232, 46538, 1860, 1740, 1740, -1000, -1000, 49733, -1000, -1000,
	-1000, 1860, 49733, 1860, 1860, 3430, 1860, -1000, -1000, -1000,
	1740, 1740, -1000, -1000, 11334, -1000, -1000, 1860, 1860, -1000,
	-1000, 3430, 49733, 64, 3430, 3430, 131, -1000, -1000, -1000,
	1740, 49733, 49733, 862, 49733, -1000, 49733, 49733, -1000, -1000,
	49733, 49733, 4765, 49733, 45260, 45899, 3353, -1000, 40148, 49733,
	49733, 1513, -1000, 904, 37592, -1000, 49733, 1453, -1000, 17,
	-1000, 62, 48, 1763, 48, 1763, 903, -1000, 632, 797,
	23534, 572, 40148, 6183, -1000, -1000, 1763, 1763, 6183, 6183,
	1699, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1504, -1000,
	266, 3382, -1000, -1000, -1000, -1000, -1000, 2297, -1000, 49733,
	45260, 40148, 2364, 49733, 866, 49733, 49733, 49733, 49733, 49733,
	-1000, 3014, 1653, -1000, 3297, 49733, 49733, 49733, 49733, 1362,
	-1000, -1000, 20327, 1627, -1000, -1000, 1972, -1000, 11334, 15195,
	-257, 11334, 15195, 15195, 11334, 15195, -1000, 11334, 311, -1000,
	-1000, -1000, -1000, 2293, -1000, 2292, -1000, -1000, -1000, -1000,
	-1000, 2655, 2655, -1000, 2285, -1000, -1000, -1000, -1000, 2283,
	-1000, -1000, 2282, -1000, -1000, -1000, -1000, -166, 2818, 1266,
	-1000, 2654, 3176, -226, -1000, 21613, 49733, 49733, 412, -358,
	1909, 1903, 1902, 3365, -1000, -226, -1000, 20970, 49733, 3382,
	-1000, -231, 3289, 11334, 49733, -1000, 3371, -1000, -1000, 344,
	-1000, -1000, -1000, 576, 415, -1000, -1000, -1000, -1000, -1000,
	-1000, 1626, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -93, -94, 1482, -1000, 49733, -1000, -1000, 277,
	40148, 42065, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 260,
	-1000, -1000, 176, -1000, 898, 240, 1775, -1000, -1000, 212,
	203, 213, 963, 2291, -1000, 1983, 1983, 1986, -1000, 728,
	-1000, -1000, -1000, -1000, 3013, -1000, -1000, -1000, 1843, 2193,
	-1000, 1914, 1914, 1690, 1690, 1690, 1690, 1690, 2006, 2006,
	-1000, -1000, -1000, 6834, 3011, 13902, 13902, 13902, 13902, 949,
	949, 4164, 4078, -1000, -1000, -1000, -1000, 11334, 185, 1925,
	-1000, 11334, 2595, 1539, 2383, 1382, 1768, -1000, 2935, 11334,
	1618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2815, 2814, 2532, 3444, 2813, 11334, -1000, -1000, 1766,
	1754, 1749, -1000, 2264, 10050, -1000, -1000, -1000, 2811, 1613,
	2804, -1000, -1000, -1000, 2803, 1748, 1218, 2800, 1937, 2797,
	2796, 2790, 2788, 1480, 11334, 11334, 11334, 11334, 2787, 1745,
	1744, 11334, 11334, 11334, 11334, 2785, 11334, 11334, 11334, 11334,
	11334, 11334, 11334, 11334, 11334, 11334, 49733, 151, 151, 151,
	1465, 1464, -1000, -1000, 1743, -1000, 2291, -1000, -1000, 3289,
	-1000, 3007, 2280, 1458, -1000, -1000, -336, 2547, 49733, 49733,
	168, 49733, 2648, -298, 49733, -1000, -1000, 2646, -1000, -1000,
	-1000, 1114, 1065, 1086, -1000, 49733, -1000, 2636, 3290, 3370,
	856, 49733, 1159, 3003, 49733, 49733, 49733, 291, -1000, -1000,
	1349, -1000, 240, -29, 537, 1341, 3167, 3443, -137, 49733,
	49733, 49733, 49733, 3315, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44621, -1000, 3002, 1728, -1000, -1000, 1696, 1696,
	2291, 49733, 49733, 49733, 3165, 49733, 49733, 3430, 3430, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1860, 3430, 3430, 1432,
	1740, 1860, -1000, -1000, 1860, -358, -1000, 1860, -1000, -358,
	1597, -358, 49733, -1000, -1000, -1000, 3308, 2967, 1454, -1000,
	-1000, -1000, 3408, 1781, 844, 844, 1136, 748, 3407, 19049,
	-1000, 1782, 1339, 895, 3268, 355, -1000, 1782, -163, 819,
	1782, 1782, 1782, 1782, 1782, 1782, 1782, 652, 650, 1782,
	1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782,
	1125, 1782, 1782, 1782, 1782, 1782, -1000, 1782, 2997, 519,
	-1000, -1000, -1000, -1000, -1000, -1000, 727, 597, 288, 3348,
	398, -1000, 392, 1349, 666, 3344, 421, 49733, 49733, 3559,
	1283, -1000, -1000, -1000, -1000, -1000, 28646, 28646, 22895, 28646,
	-1000, 196, 1763, 48, 6, -1000, -1000, 1453, 6183, 1453,
	6183, 2262, -1000, -1000, 892, -1000, -1000, 1341, -1000, 49733,
	49733, -1000, -1000, 2994, 1900, -1000, -1000, 16483, -1000, 6183,
	6183, -1000, -1000, 30563, 49733, -1000, -23, -1000, 0, 3289,
	-1000, 1331, -1000, -1000, 1445, 1341, 3175, 49733, 1331, 1331,
	1331, -1000, -1000, 17771, 49733, 49733, -1000, -1000, -1000, -1000,
	3430, 9402, -1000, 37592, -1000, -1000, 43982, -1000, 43343, 1842,
	-1000, 15195, 2145, 188, -1000, 251, -325, 186, 2090, 184,
	2291, -1000, -1000, 2784, 2783, 1727, -1000, 1719, 2782, 1714,
	1713, 2260, -1000, 40, -1000, 3280, 1344, -1000, 2982, -1000,
	1706, 3234, -1000, 1442, -1000, 1899, 1701, -1000, -1000, -1000,
	11334, 42704, 11334, 1016, 1344, 1687, 3232, 1442, 3289, 2633,
	-1000, 1425, -1000, 2251, 1592, 195, -1000, -1000, -1000, 49733,
	2652, 1686, 42065, 1363, -1000, 890, 1591, 1590, -1000, 40148,
	328, 40148, -1000, 40148, -1000, -1000, 400, -1000, 49733, 3283,
	-1000, -1000, -1000, 2547, 1898, -356, 49733, -1000, -1000, -1000,
	-1000, -1000, 1683, -1000, 949, 949, 4164, 3932, -1000, 13902,
	-1000, 13902, 3072, -1000, 1822, -1000, 11334, 2123, 4768, 11334,
	4768, 1783, 26729, 34397, -119, 3287, 3041, 49733, -1000, -1000,
	11334, 11334, -1000, 3023, -1000, -1000, -1000, -1000, 11334, 11334,
	2258, -1000, 49733, -1000, -1000, -1000, -1000, 26729, -1000, 13902,
	-1000, -1000, -1000, -1000, 11334, 1287, 1287, 3018, 1679, 151,
	151, 151, 3005, 3000, 2962, 1677, 151, 2958, 2946, 2926,
	2877, 2870, 2821, 2817, 2778, 2639, 2506, 1668, -1000, 2981,
	-1000, -1000, 2036, 12618, 8760, -1000, -1000, 296, 1421, 2257,
	2631, 121, -1000, 1897, -1000, 2623, 49733, 49733, 1147, -1000,
	49733, 3442, -1000, -1000, -1000, -1000, 1062, -1000, 2612, -1000,
	274, 272, 2126, 306, 2781, 1415, -1000, -1000, 49733, -1000,
	-1000, -1000, 17771, 2967, 2979, 2967, 138, 1782, 620, 40148,
	660, -1000, 49733, 2065, 1893, 3174, 1013, 3275, 49733, 2978,
	426, 2973, 2972, 3307, 510, 54778, 49733, 1327, -1000, 1572,
	4154, -1000, 49733, -1000, -1000, 49733, -1000, 2364, -1000, 1740,
	-1000, -1000, 3430, -1000, -1000, 11334, 11334, 3430, 1740, 1740,
	-1000, 1860, -1000, 49733, -1000, -358, 510, 54778, 3305, 5024,
	570, 2844, -1000, 49733, -1000, -1000, -1000, 857, -1000, 1053,
	862, 49733, 2010, 1053, 2009, 2970, -1000, -1000, 49733, 49733,
	49733, 49733, -1000, -1000, 49733, -1000, 49733, 49733, 49733, 49733,
	49733, 41426, -1000, 49733, 49733, -1000, 49733, 2008, 49733, 2002,
	3298, -1000, 1782, 1782, 1004, -1000, -1000, 627, -1000, 41426,
	2248, 2228, 2227, 2196, 2606, 2585, 2584, 1782, 1782, 2191,
	2575, 40787, 2572, 1181, 2178, 2177, 2172, 2349, 2570, 1231,
	-1000, 2569, 2310, 2245, 2189, 49733, 2969, 2481, 514, -1000,
	-1000, 2126, 138, 1782, 389, 49733, 1891, 1890, 620, 610,
	610, 536, -35, 24173, -1000, -1000, -1000, 49733, 37592, 37592,
	37592, 37592, 37592, 37592, -1000, 3216, 3193, 2968, -1000, 3197,
	3194, 3205, 3215, 3181, 49733, 37592, 2967, -1000, 40787, -1000,
	-1000, -1000, 1720, 1661, 3740, 1034, 11334, 6183, -1000, -1000,
	8, 9, -1000, -1000, -1000, -1000, 40148, 2560, 572, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3369, 49733, 49733, 772,
	2780, 1398, -1000, -1000, -1000, 54778, 2952, 2952, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2952, 2952, 2966,
	-1000, -1000, 2948, 2948, 2948, 2935, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2960, 2960, 2964, 2964,
	2960, -1000, -1000, 3414, -1000, 1394, -1000, -1000, 1564, -1000,
	1935, -342, 15195, 1857, 1756, -1000, 11334, 15195, 11334, -259,
	375, -261, -1000, -1000, -1000, 2558, -1000, -1000, -1000, 2170,
	-1000, 2164, -1000, 189, 198, 2000, -226, 8760, 444, 49733,
	-226, 49733, 8760, -1000, 49733, 177, -375, -376, 162, 2552,
	396, -226, 3369, 40, 11334, 3262, -1000, -1000, 49733, 2162,
	-1000, -1000, -1000, 3439, 40148, 2364, 1723, 39509, -1000, 346,
	-1000, 258, 634, 2551, -1000, 931, 115, 2549, 2547, -1000,
	-1000, -1000, -1000, 13902, 1696, -1000, -1000, -1000, 2291, 11334,
	2779, -1000, 1029, 1029, 2240, 2764, 2760, -1000, 2952, 2952,
	-1000, 2935, 2948, 2935, 1029, 1029, 2759, -1000, 2924, -1000,
	3287, -1000, 2209, 2500, -1000, 2493, 2485, 11334, -1000, 2758,
	3845, 1512, -54, -194, 151, 151, -1000, -1000, -1000, -1000,
	151, 151, 151, 151, -1000, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 812, -103, -292, -106,
	-293, -1000, 2750, 1376, -1000, -1000, -1000, -1000, -1000, 55069,
	1375, 546, 546, 2547, 2545, -1000, 884, 2544, 1110, 49733,
	2542, -302, -1000, 2540, -1000, -1000, 49733, 49733, 49733, 50372,
	594, 49733, 49733, 2538, -1000, 2536, 2534, 1159, 54778, 2748,
	3303, 18410, 3302, 2175, -1000, -1000, -1000, 29924, 610, -1000,
	-1000, -1000, 715, 373, 2161, 579, -1000, 49733, 541, 3252,
	1889, 2533, 49733, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3275, -1000, 967, 470, 36314, 15844, -1000, 397, 49733,
	-1000, 18410, 18410, 397, 492, 1878, -1000, 803, 1256, 128,
	37592, 49733, -1000, 36953, 2747, -1000, -1000, 1341, 3430, -1000,
	2291, 2291, -358, 3430, 3430, 1740, -1000, -1000, 492, -1000,
	397, -1000, 1569, 19688, 557, 508, 443, -1000, 705, -1000,
	-1000, 794, 3260, 54778, -1000, 49733, -1000, 49733, -1000, 49733,
	49733, 862, 11334, 3260, 49733, 883, -1000, 1161, 511, 456,
	784, 784, 1366, -1000, 3287, -1000, -1000, 1364, -1000, -1000,
	-1000, -1000, 49733, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26729, 26729, 3339, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2520, 2519, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49733, 1660, -1000,
	1879, 2155, 2512, 2175, 29924, 1876, 1763, 2511, 2505, 610,
	-1000, 2504, 2503, -1000, 2065, 1875, 925, 49733, -1000, 1340,
	49733, 49733, -1000, 1318, -1000, 1869, 3162, 3172, 3162, -1000,
	3162, -1000, -1000, -1000, -1000, 3211, 2499, -1000, 3196, -1000,
	3195, -1000, -1000, -1000, -1000, 1318, -1000, -1000, -1000, -1000,
	-1000, 1034, -1000, 3368, 1053, 1053, 1053, 2742, -1000, -1000,
	-1000, -1000, 1363, 2741, -1000, -1000, -1000, 3455, -1000, -1000,
	-1000, -1000, -1000, -1000, 17771, 3274, 3412, 3404, 38870, -1000,
	-342, 1771, -1000, 2069, 181, 2062, 49733, -1000, -1000, -1000,
	2738, 2737, -234, 192, 3403, 3402, 1090, -1000, 2736, 1357,
	-226, -1000, -1000, 1344, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -392, -226, -1000, 1344, -1000, 189, -1000, -1000, 3264,
	-1000, -1000, 2364, -1000, 254, -1000, -1000, -1000, -1000, -1000,
	-1000, 222, -1000, 49733, -1000, 1350, 109, -1000, 2291, -1000,
	-1000, -1000, -1000, -1000, 4768, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2497, -1000, -1000, 11334, -1000,
	-1000, -1000, 2453, -1000, -1000, 11334, 2735, 2494, 2734, 2490,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3465, -1000, 3401,
	1651, 2732, 2727, 1649, 2724, 2723, -1000, 11334, 2722, 55069,
	1014, 2489, 1014, -1000, -1000, 417, 29285, 49733, 3438, -1000,
	49733, 2484, -1000, -1000, 49733, 2126, 593, 2126, 683, 49733,
	-1000, -1000, -1000, -1000, -1000, 945, 397, 2720, 1346, -1000,
	-1000, -1000, -1000, 397, -1000, 2482, 205, -1000, -1000, -1000,
	-1000, 2154, -1000, -1000, 2119, 1559, 279, -1000, -1000, -1000,
	-1000, -1000, -1000, 2129, 49733, 38231, 2151, 1856, -359, -1000,
	2923, -1000, 1782, 1782, 1782, 49733, 1648, -1000, 1782, 1782,
	2716, -1000, -1000, 2706, 2701, -139, 798, 1853, 1820, -1000,
	2153, 28646, 37592, 36953, 1298, -1000, 1560, -1000, -1000, -1000,
	-1000, -1000, -1000, 3430, 798, -1000, 552, 2147, 13902, 2922,
	13902, 2920, 563, 2919, 1645, -1000, 49733, -1000, -1000, 49733,
	4175, 2916, -1000, 2915, 3164, 545, 2912, 2911, 49733, 2407,
	-1000, 3260, 49733, 781, 3271, -1000, -1000, -1000, 441, -1000,
	-1000, -1000, 577, -1000, 49733, -1000, 49733, -1000, 1664, -1000,
	26729, -1000, -1000, 1643, -1000, 2481, 2473, 55069, -1000, -1000,
	205, 2472, 6183, -1000, -1000, -1000, -1000, -1000, 3252, 2471,
	2129, 49733, -1000, 49733, 1340, 1340, 3465, 49733, 8760, -1000,
	-1000, 11334, 2910, -1000, 11334, -1000, -1000, -1000, 2700, -1000,
	-1000, -1000, -1000, -1000, 2909, 3267, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1460, -1000, 11334, 11976, -1000, 848, 15195,
	-266, 368, -1000, -1000, -1000, -236, 2469, -1000, -1000, 3399,
	2464, 2335, 49733, -1000, -1000, 1344, -1000, 1344, -234, -1000,
	-1000, 1341, -1000, -1000, 1108, 676, -1000, 2697, 275, -1000,
	2376, -1000, 2368, 151, -1000, 151, -1000, 250, 11334, -1000,
	2458, -1000, -1000, -1000, 2456, -1000, -1000, 2363, -1000, 2689,
	-1000, 2454, -1000, -1000, 49733, -1000, -1000, 1095, 2452, -360,
	-1000, 2451, 2126, 2449, 2126, 49733, 590, 54778, -145, -139,
	18410, -145, -1000, -1000, 395, 406, -1000, -1000, 2089, 633,
	-1000, -1000, 2445, 628, -1000, 1340, -1000, 1831, 2021, 2384,
	34397, 26729, 28007, 2440, -1000, -1000, 36314, 1460, 1460, 54993,
	313, 55098, -1000, 2893, 1128, 1819, -1000, 2146, -1000, 2142,
	-1000, 3430, 1298, 126, -1000, -1000, 1632, -1000, 1128, 2844,
	3398, -1000, 3583, 49733, 3451, 49733, 2891, 1823, 13902, -1000,
	794, 3231, -1000, -1000, 4175, -1000, -1000, 2020, 13902, -1000,
	-1000, 2435, 28007, 980, 1806, 1801, 956, 2889, -1000, 609,
	3452, -1000, -1000, -1000, 996, 2888, -1000, 1996, 1993, -1000,
	49733, -1000, 34397, 34397, 897, 897, 34397, 34397, 2886, 784,
	-1000, -1000, 13902, -1000, -1000, 1782, -1000, -1000, -1000, 1782,
	1647, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2151, -1000,
	-1000, 1331, -1000, 3382, -1000, -1000, 2291, 49733, 2291, -1000,
	35675, -1000, 3397, 3396, -1000, 2291, 252, 248, 2884, 2883,
	-1000, -342, 49733, 49733, -239, 2141, -1000, 2428, 197, -1000,
	-1000, 1326, -236, -241, 131, 26729, 1797, -1000, 2688, 366,
	-150, -1000, -1000, -1000, -1000, 2687, -1000, 997, -1000, -1000,
	-1000, 1266, 2684, 2681, -1000, -1000, -1000, -1000, 49733, -1000,
	2375, -1000, 2427, -1000, 2424, 582, 2126, -129, -1000, -1000,
	455, -1000, -1000, -1000, 624, 2325, -1000, -1000, 402, -1000,
	-1000, -1000, 2129, 2423, -1000, -1000, 108, -1000, 1791, 1635,
	-1000, -1000, -1000, -1000, -1000, -1000, 786, -1000, 397, 55031,
	-1000, 1339, 27368, -1000, 1108, 786, 519, 33119, 659, 299,
	-1000, 2140, -1000, -1000, 3465, -1000, 651, -1000, 559, -1000,
	1634, -1000, 1624, 35036, 2133, 3294, -1000, 54926, 908, -1000,
	-1000, 4164, -1000, -1000, -1000, -1000, -1000, -1000, 2415, 2414,
	-1000, -1000, -1000, -1000, -1000, 2132, 2880, 37, 3325, 2411,
	-1000, -1000, 2865, 1620, 1582, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1581, 1574, 34397, -1000, -1000,
	4164, 2128, 26729, 1782, -1000, -1000, 1558, 1524, -1000, -1000,
	-1000, -1000, -1000, -320, 2864, 11334, 11334, -1000, -1000, -1000,
	2861, -1000, -1000, 3395, -239, -251, 2410, 179, 230, -1000,
	2396, -1000, -131, 3225, -159, -1000, -1000, 973, -228, 148,
	146, 144, -1000, -1000, -1000, 11334, -1000, -1000, -1000, 103,
	-1000, 1790, -1000, -1000, 2126, 2395, 49733, 604, -1000, -1000,
	-1000, -1000, 221, -1000, -1000, -1000, -1000, -1000, -1000, 2384,
	2382, -1000, 548, 3393, -1000, 55098, -1000, 1782, -1000, 548,
	1523, -1000, 1782, 1782, -1000, 503, -1000, 1799, -1000, 2121,
	-1000, 3382, -1000, 499, -1000, 550, -1000, -1000, -1000, 1507,
	-1000, -1000, -1000, 54926, 553, -1000, 758, 2860, -1000, -1000,
	2678, 11334, 2859, 1782, 2677, -117, 34397, 3163, 2805, 2660,
	2508, 1476, -1000, -1000, 26729, -1000, -1000, 33758, -1000, 2858,
	1390, 1385, 49733, 2335, -1000, -1000, 2379, -1000, 858, 187,
	230, -1000, 3392, 193, 3391, 3390, 1190, 3221, -1000, -1000,
	1985, -1000, 165, 163, 160, -1000, -1000, -1000, -1000, -1000,
	2375, 2374, 2372, -1000, 588, -1000, 334, -1000, -1000, -1000,
	337, -1000, 3388, 570, -1000, 26729, -1000, -1000, 33119, 1460,
	1460, -1000, -1000, 2120, -1000, -1000, -1000, -1000, 2116, -1000,
	-1000, -1000, 1353, -1000, 49733, 990, 8118, -1000, 2309, -1000,
	49733, -1000, 3171, -1000, 308, 1324, 337, 897, 337, 897,
	337, 897, 337, 897, 315, -1000, -1000, -1000, 1316, 11334,
	-1000, -1000, 1314, -1000, -1000, -1000, 2856, 2114, 192, 178,
	3387, -1000, 2335, 3384, 2335, 2335, -1000, 157, -148, 973,
	-1000, -1000, -1000, -1000, -1000, -1000, 2362, -1000, -1000, -1000,
	-1000, 1782, 1782, 2344, 2342, 462, -1000, -1000, 1782, 1782,
	1782, 1782, -1000, 32480, 557, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 553, 55098, -1000, 8118, 1300, -1000, 2291, -1000,
	784, -1000, -1000, 3094, 2961, 3434, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2853, 2537, -1000, 49733,
	3323, 26090, 174, -1000, -1000, -1000, 2341, -1000, 2335, -1000,
	-1000, 1770, -151, -1000, -290, 2111, 2100, -1000, -1000, 49733,
	2079, 2078, 2033, 2319, -1000, 49733, 552, -1000, 55098, 1294,
	-1000, 8118, -1000, -1000, 3450, -1000, 3448, 896, 896, 337,
	337, 337, 337, 11334, -1000, -1000, -1000, 49733, -1000, 1278,
	-1000, -1000, -1000, 1537, -1000, -1000, -1000, -1000, 2301, -160,
	-1000, -1000, 2203, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1277, 2844, -1000, -1000, -1000, -1000, -1000, 2101, 615, -1000,
	2381, 1149, -1000, 1769, -1000, 31841, 49733, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49733, 7476, -1000, 1478,
	-1000, -1000, 2291, 49733, -1000,
}

var yyPgo = [...]int{
	0, 181, 3478, 241, 179, 4165, 87, 254, 284, 253,
	248, 245, 4149, 4148, 4143, 3292, 3290, 4138, 4137, 4136,
	4130, 4123, 4122, 4121, 4120, 4117, 4116, 4115, 4114, 4113,
	4112, 4108, 4105, 4104, 4103, 4102, 4101, 4100, 4099, 4098,
	4096, 4095, 4094, 4090, 4087, 4071, 4070, 242, 4068, 4067,
	4065, 4064, 4063, 4061, 4060, 4056, 4055, 4054, 4053, 4052,
	4051, 4050, 4048, 4047, 4044, 4043, 4041, 4039, 4038, 4037,
	4036, 4035, 4030, 4029, 4028, 4027, 4026, 4024, 4023, 4018,
	4017, 4015, 4014, 4010, 4009, 246, 4008, 3289, 4007, 4005,
	4004, 4002, 4001, 4000, 3985, 3981, 3980, 3979, 3978, 226,
	3977, 3976, 3973, 3972, 3971, 3970, 3967, 3965, 3964, 3963,
	3961, 3960, 3958, 290, 3956, 3954, 3952, 3951, 274, 3950,
	211, 3949, 176, 132, 3947, 3946, 3945, 3944, 3943, 3942,
	3941, 3940, 3939, 3938, 3936, 3935, 3934, 3933, 237, 212,
	74, 3929, 48, 3928, 3924, 216, 3923, 148, 3922, 143,
	3920, 3919, 3918, 3917, 3916, 3914, 3913, 3911, 3907, 3906,
	3905, 3904, 3903, 3901, 3900, 3898, 3897, 3893, 3892, 3891,
	3890, 3889, 3885, 3884, 51, 3880, 255, 3879, 75, 3878,
	183, 3877, 70, 3876, 88, 129, 261, 2042, 240, 3875,
	188, 3872, 3871, 250, 178, 3869, 3868, 273, 3866, 144,
	221, 163, 102, 120, 3865, 142, 3864, 265, 47, 34,
	251, 146, 3863, 3856, 56, 174, 123, 3854, 213, 103,
	113, 3852, 3851, 151, 3850, 230, 186, 3849, 110, 3847,
	3842, 3841, 3840, 3838, 200, 195, 3836, 3835, 141, 3834,
	3832, 95, 135, 3831, 78, 126, 167, 125, 3829, 2332,
	131, 99, 3828, 122, 107, 3827, 97, 3826, 3825, 3824,
	3823, 194, 3822, 3820, 149, 57, 3817, 3807, 3806, 69,
	3804, 80, 3803, 41, 3801, 59, 3800, 3799, 3798, 3797,
	3795, 3794, 3793, 3792, 3791, 3790, 3788, 3786, 54, 3785,
	3783, 3782, 3779, 7, 14, 17, 3778, 27, 3776, 165,
	3775, 3774, 162, 3773, 193, 3772, 3770, 96, 92, 3769,
	93, 159, 3768, 9, 28, 77, 3767, 3763, 3762, 64,
	3761, 3760, 3759, 271, 3758, 3757, 3756, 175, 3755, 3753,
	3751, 2795, 3750, 3749, 3748, 3747, 3746, 3745, 371, 3742,
	1, 215, 44, 3741, 133, 137, 3739, 40, 31, 3738,
	49, 118, 202, 136, 106, 3736, 3722, 3721, 658, 201,
	104, 29, 0, 105, 217, 166, 3720, 3719, 3717, 257,
	3715, 233, 231, 222, 317, 259, 169, 3713, 3711, 61,
	3710, 161, 30, 53, 168, 91, 22, 249, 3709, 452,
	10, 185, 3708, 206, 3707, 8, 16, 262, 154, 3705,
	3702, 37, 267, 3698, 3697, 3696, 138, 3695, 3694, 184,
	60, 3693, 3692, 3690, 3689, 36, 3686, 189, 20, 3683,
	130, 3681, 239, 3679, 238, 155, 190, 182, 156, 219,
	220, 82, 81, 3678, 1868, 157, 109, 15, 3677, 224,
	3676, 298, 115, 3675, 89, 3673, 247, 260, 207, 3672,
	187, 11, 50, 39, 32, 45, 12, 286, 204, 3671,
	3669, 23, 52, 3668, 58, 3667, 21, 3665, 3664, 43,
	3663, 62, 5, 3662, 3657, 19, 18, 3656, 38, 205,
	172, 124, 101, 67, 3655, 3652, 134, 140, 3649, 150,
	171, 173, 3647, 79, 3644, 3639, 3636, 3626, 3051, 258,
	3625, 3623, 3622, 3621, 3618, 3617, 3616, 3613, 214, 3612,
	111, 42, 3611, 3608, 3607, 3606, 98, 152, 3605, 3589,
	3587, 3585, 33, 145, 3584, 13, 3583, 26, 24, 35,
	3582, 108, 3581, 3, 191, 3579, 3577, 4, 3576, 3575,
	2, 3572, 3570, 119, 3568, 100, 25, 164, 114, 3566,
	3565, 85, 210, 147, 3557, 3550, 90, 243, 203, 3549,
	94, 232, 252, 3547, 209, 3544, 3543, 3541, 3540, 3539,
	1222, 3533, 3530, 235, 68, 83, 3529, 218, 121, 3526,
	3522, 86, 158, 117, 128, 55, 84, 3520, 116, 208,
	3519, 198, 3518, 256, 3517, 3516, 112, 3515, 3513, 3511,
	3508, 192, 3506, 3505, 196, 236, 3504, 3502, 270, 3501,
	3500, 3499, 3498, 3496, 3494, 3492, 3491, 3490, 3483, 229,
	197, 3480,
}

//line mysql_sql.y:12984
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 614, 617, 617, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 353, 353, 354, 354, 130, 349, 349, 348, 348,
	131, 132, 133, 593, 593, 134, 135, 165, 592, 592,
	592, 592, 592, 167, 167, 167, 167, 167, 167, 167,
	469, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 599, 599, 599, 600, 600, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 542, 542, 541, 541, 540, 540, 494, 494, 495,
	495, 340, 340, 340, 539, 539, 539, 538, 538, 537,
	537, 536, 536, 534, 534, 535, 533, 532, 532, 532,
	530, 530, 530, 526, 526, 528, 527, 527, 529, 521,
	521, 524, 524, 522, 522, 522, 522, 525, 520, 520,
	520, 519, 519, 112, 112, 112, 436, 436, 111, 111,
	450, 450, 450, 450, 450, 448, 448, 448, 448, 448,
	448, 447, 447, 446, 446, 451, 451, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	605, 605, 604, 604, 606, 606, 606, 606, 607, 607,
	103, 103, 103, 104, 445, 445, 445, 101, 102, 102,
	435, 435, 440, 440, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 444, 444, 444,
	442, 442, 441, 441, 443, 443, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 432, 432, 431, 108, 108, 109,
	602, 602, 601, 603, 603, 603, 603, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 567, 567, 567, 567, 568, 568,
	367, 368, 618, 370, 366, 366, 366, 563, 563, 564,
	565, 566, 566, 566, 114, 14, 224, 224, 468, 468,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 303, 303, 304, 298, 298,
	305, 305, 170, 306, 306, 306, 311, 311, 312, 312,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 283, 283, 283, 278, 278, 278, 278, 279,
	279, 280, 280, 281, 281, 281, 281, 282, 282, 359,
	359, 307, 307, 307, 309, 309, 308, 302, 300, 300,
	300, 300, 300, 300, 300, 301, 301, 301, 301, 301,
	310, 310, 82, 88, 88, 88, 88, 580, 580, 83,
	83, 83, 591, 591, 498, 498, 381, 381, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 503, 504, 377, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 79, 80, 81, 54, 57,
	58, 169, 172, 172, 172, 172, 53, 53, 53, 421,
	421, 52, 619, 619, 352, 352, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 515, 515, 621, 621, 621,
	74, 75, 497, 497, 497, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 160, 59, 161, 161,
	374, 374, 374, 376, 376, 372, 620, 620, 464, 464,
	375, 375, 48, 48, 48, 48, 77, 373, 373, 351,
	371, 371, 371, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 429, 429, 426, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 194, 194,
	250, 250, 574, 574, 570, 570, 571, 571, 571, 572,
	572, 573, 573, 120, 509, 509, 509, 509, 509, 509,
	8, 8, 219, 219, 508, 508, 508, 508, 508, 508,
	433, 433, 433, 552, 552, 552, 553, 218, 218, 211,
	211, 510, 510, 398, 554, 554, 518, 518, 517, 517,
	516, 516, 216, 216, 217, 217, 197, 197, 139, 139,
	523, 523, 523, 523, 531, 531, 493, 493, 288, 288,
	342, 342, 343, 343, 184, 184, 185, 185, 185, 185,
	185, 185, 608, 608, 609, 610, 611, 611, 612, 612,
	612, 613, 613, 613, 613, 613, 560, 560, 562, 562,
	561, 215, 215, 209, 209, 210, 210, 210, 208, 208,
	207, 206, 206, 205, 203, 203, 203, 204, 204, 204,
	223, 223, 187, 187, 187, 186, 186, 186, 186, 186,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 188, 191, 191, 192, 192, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 320, 320, 321,
	321, 321, 321, 321, 137, 137, 502, 502, 319, 319,
	189, 189, 190, 190, 190, 190, 318, 318, 317, 202,
	202, 201, 200, 200, 200, 195, 195, 195, 195, 195,
	196, 329, 329, 328, 328, 327, 327, 327, 327, 330,
	123, 136, 136, 138, 222, 222, 213, 212, 326, 325,
	325, 325, 325, 221, 221, 220, 220, 214, 214, 199,
	199, 199, 199, 324, 198, 322, 598, 598, 597, 597,
	596, 594, 594, 594, 595, 595, 595, 595, 544, 544,
	544, 544, 544, 360, 360, 360, 365, 365, 363, 363,
	363, 363, 363, 369, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 39, 233, 234, 40,
	235, 235, 236, 236, 237, 237, 238, 239, 240, 240,
	240, 240, 38, 225, 225, 226, 226, 227, 227, 228,
	229, 229, 229, 232, 230, 231, 231, 616, 616, 615,
	37, 37, 30, 175, 175, 176, 176, 176, 178, 178,
	284, 284, 284, 177, 177, 179, 179, 179, 575, 577,
	577, 579, 578, 578, 578, 581, 581, 581, 581, 581,
	582, 582, 582, 582, 583, 583, 31, 157, 157, 182,
	182, 162, 586, 586, 586, 585, 585, 587, 587, 588,
	588, 346, 346, 347, 347, 173, 174, 174, 164, 159,
	181, 181, 181, 181, 181, 183, 183, 252, 252, 158,
	163, 166, 168, 576, 584, 584, 584, 430, 430, 427,
	428, 428, 425, 424, 424, 424, 590, 590, 589, 589,
	589, 361, 361, 32, 420, 420, 422, 423, 423, 423,
	414, 414, 414, 414, 36, 418, 418, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 415,
	415, 417, 417, 413, 413, 413, 413, 413, 413, 413,
	413, 35, 180, 180, 412, 412, 409, 409, 407, 407,
	408, 408, 406, 406, 406, 410, 410, 43, 78, 44,
	45, 46, 42, 411, 411, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 141, 140, 140, 140, 140,
	140, 143, 143, 345, 345, 344, 344, 142, 285, 285,
	41, 263, 263, 485, 485, 480, 480, 480, 480, 480,
	500, 500, 500, 481, 481, 481, 482, 482, 482, 484,
	484, 484, 483, 483, 483, 483, 483, 499, 499, 501,
	501, 501, 452, 452, 453, 453, 453, 456, 456, 472,
	472, 473, 473, 471, 471, 478, 478, 477, 477, 476,
	476, 475, 475, 474, 474, 474, 474, 467, 467, 466,
	466, 454, 454, 454, 454, 454, 455, 455, 455, 465,
	465, 470, 470, 316, 316, 315, 315, 271, 271, 272,
	272, 314, 314, 269, 269, 270, 270, 270, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 550, 550, 551, 274, 274, 286,
	286, 286, 286, 286, 286, 273, 273, 275, 275, 251,
	251, 249, 249, 241, 241, 241, 241, 241, 241, 242,
	242, 243, 243, 244, 244, 244, 248, 248, 247, 247,
	247, 247, 245, 245, 246, 246, 246, 246, 246, 246,
	438, 438, 547, 547, 548, 548, 543, 543, 543, 546,
	546, 546, 546, 546, 546, 546, 546, 549, 549, 549,
	545, 545, 253, 339, 339, 339, 362, 362, 362, 362,
	364, 338, 338, 338, 268, 268, 267, 267, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	437, 437, 378, 378, 379, 379, 297, 296, 296, 296,
	296, 296, 294, 295, 293, 293, 293, 293, 293, 290,
	290, 289, 289, 289, 291, 291, 291, 291, 291, 416,
	416, 287, 287, 277, 277, 277, 276, 276, 276, 479,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	292, 336, 336, 336, 337, 337, 337, 337, 337, 337,
	337, 337, 388, 388, 394, 394, 559, 559, 558, 254,
	254, 254, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 264, 264, 264, 461, 461, 461, 461, 462, 462,
	462, 462, 463, 463, 463, 459, 459, 460, 460, 399,
	400, 400, 506, 506, 507, 507, 457, 457, 458, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 514, 514, 514, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 569, 569, 569, 555, 555, 555, 556, 556, 556,
	556, 556, 556, 556, 556, 556, 556, 556, 556, 557,
	557, 557, 557, 557, 557, 557, 557, 557, 557, 557,
	557, 557, 557, 557, 557, 557, 334, 334, 334, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 401, 401, 402,
	402, 511, 511, 511, 511, 511, 511, 512, 512, 513,
	513, 513, 513, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 386, 331, 331, 331, 403, 395, 395,
	396, 396, 397, 397, 389, 389, 389, 389, 389, 389,
	390, 390, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 391, 391, 393, 393, 405, 405,
	405, 404, 404, 404, 404, 404, 404, 404, 266, 266,
	266, 266, 383, 383, 383, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 256, 256, 256,
	256, 260, 260, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 261, 261, 261,
	261, 261, 259, 259, 259, 259, 259, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 121, 122, 122, 258,
	341, 341, 486, 486, 489, 489, 487, 487, 488, 490,
	490, 490, 491, 491, 491, 492, 492, 492, 496, 496,
	350, 350, 350, 358, 358, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 3,
	1, 1, 7, 7, 7, 8, 8, 0, 4, 7,
	6, 6, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 4, 3,
	3, 3, 4, 5, 6, 5, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	4, 7, 6, 6, 3, 5, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 1, 4, 4, 4, 3, 4,
	3, 2, 2, 2, 2, 2, 3, 2, 3, 2,
	4, 1, 3, 4, 0, 2, 1, 3, 1, 1,
	2, 2, 3, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 3, 0, 1, 1, 3, 1, 3, 0, 1,
	1, 1, 14, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 0, 1, 2,
	9, 9, 7, 1, 2, 3, 3, 3, 0, 4,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 3, 3, 4, 3, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 10, 2,
	2, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 8,
	0, 2, 2, 3, 3, 0, 2, 0, 2, 4,
	4, 4, 4, 1, 0, 2, 2, 1, 3, 2,
	1, 3, 2, 1, 3, 2, 0, 1, 3, 4,
	3, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	0, 1, 1, 1, 11, 0, 2, 3, 3, 2,
	2, 3, 1, 1, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 6, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 4, 7, 3, 3, 0,
	3, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 2, 2,
	2, 2, 4, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 3, 9,
	1, 4, 4, 4, 7, 9, 7, 7, 7, 9,
	7, 7, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 5, 0, 1, 3,
	0, 1, 0, 2, 0, 2, 0, 1, 6, 8,
	8, 6, 6, 5, 5, 5, 6, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 4, 1, 2, 3, 5, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -614, -617, -2, -5, 638, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 628, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 561, 634, 464, 14, 513, -15, -16, -560, -17,
	267, -366, -367, -368, -370, -618, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 388, 394, 451, 627,
	62, -185, -187, 656, 657, 660, 548, 551, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 556,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 392, 260, 238, 240, 15, 32, 43,
	367, -186, 86, 549, 239, -188, 13, 662, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 629, -362, 384, 630, 632, 631, 89, 97,
	-355, -357, 464, 267, 388, 394, 627, 657, 660, 548,
	551, 563, 564, 565, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 576, 577, 578, 588, 589, 579, 580,
	581, 582, 583, 584, 585, 586, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	516, 613, 614, 615, 616, 544, 571, 607, 608, 609,
	610, 365, 366, 553, 279, 303, 419, 309, 316, 363,
	163, 183, 177, 206, 197, 549, 172, 283, 321, 284,
	96, 166, 499, 111, 476, 448, 169, 298, 300, 302,
	545, 546, 378, 305, 543, 304, 306, 308, 547, 285,
	368, 193, 188, 297, 281, 186, 286, 41, 287, 360,
	359, 211, 288, 289, 558, 472, 364, 478, 313, 53,
	446, 187, 473, 301, 475, 215, 219, 490, 350, 491,
	181, 182, 480, 493, 210, 213, 214, 259, 356, 357,
	44, 555, 271, 494, 217, 652, 209, 204, 502, 317,
	315, 361, 208, 180, 203, 282, 66, 221, 220, 222,
	442, 443, 444, 445, 290, 291, 382, 489, 200, 189,
	369, 173, 23, 497, 266, 477, 395, 292, 310, 318,
	216, 218, 273, 278, 333, 557, 450, 362, 277, 314,
	495, 185, 270, 299, 265, 498, 653, 174, 397, 293,
	167, 307, 492, 655, 501, 65, 410, 179, 170, 645,
	646, 256, 164, 275, 280, 654, 294, 295, 296, 542,
	320, 319, 311, 171, 550, 201, 272, 207, 191, 178,
	202, 165, 274, 500, 411, 625, 367, 429, 199, 196,
	276, 249, 496, 479, 168, 433, 412, 194, 322, 620,
	621, 622, 383, 355, 323, 324, 192, 263, 470, 471,
	327, 439, 345, 413, 449, 420, 414, 228, 229, 331,
	482, 484, 212, 623, 334, 335, 336, 474, 337, 338,
	339, 340, 387, 57, 59, 98, 101, 100, 658, 659,
	64, 30, 373, 376, 408, 415, 347, 626, 554, 344,
	348, 349, 377, 26, 431, 399, 435, 434, 49, 50,
	51, 54, 55, 56, 58, 60, 61, 52, 541, 392,
	405, 503, 46, 48, 402, 28, 379, 430, 452, 343,
	432, 463, 47, 461, 462, 483, 27, 381, 380, 63,
	45, 438, 440, 441, 325, 341, 390, 635, 504, 385,
	401, 404, 386, 346, 375, 406, 68, 67, 398, 636,
	393, 391, 342, 559, 560, 351, 587, 370, 447, 538,
	537, 536, 535, 534, 533, 532, 531, 328, 329, 330,
	416, 417, 418, 428, 421, 422, 423, 424, 425, 426,
	427, 466, 467, 637, 485, 487, 488, 486, 244, 661,
	371, 372, 247, 639, 640, 99, 641, 643, 642, 29,
	644, 651, 648, 649, 650, 562, 232, -443, -441, -362,
	549, 627, 394, 548, 551, 388, 367, 657, 660, 392,
	267, 328, 329, 330, 464, 365, -235, -362, 661, -197,
	251, 40, -249, -362, -197, -87, -16, -15, -186, -187,
	-249, 246, -371, 24, 446, -99, 447, 241, 242, 86,
	78, -362, -9, -113, -8, -120, -85, -184, 451, -369,
	-362, 328, 328, -369, 246, -364, 277, 427, -362, -498,
	252, -447, -420, 278, -446, -422, -449, -423, 33, 237,
	239, 238, 561, 274, 16, 392, 248, 14, 13, 393,
	260, 26, 27, 29, 15, 394, 396, 30, 397, 400,
	401, 402, 43, 405, 406, 267, 89, 97, 92, 285,
	-234, -362, -397, -389, 118, -392, -384, -385, -387, -340,
	-534, -382, 86, 145, 146, 153, 119, 663, -386, -479,
	37, 121, 567, 571, 607, 514, -332, -333, -334, -335,
	-336, -337, 552, -362, -535, -533, 92, 102, 104, 108,
	109, 107, 105, 157, 190, 106, 93, 158, -187, 89,
	-555, 577, -356, 600, 613, 614, 615, 616, 599, 62,
	-505, -513, 245, -511, 156, 195, 263, 191, 14, 151,
	439, 192, 608, 609, 610, 574, 596, 516, 578, 588,
	603, 569, 570, 572, 564, 565, 566, 568, 579, 581,
	595, -514, 591, 601, 602, 587, 611, 612, 648, 604,
	605, 606, 643, 91, 90, 594, 593, 580, 575, 576,
	582, 563, 573, 583, 584, 592, 597, 598, 376, 111,
	377, 378, 506, 368, 81, 379, 252, 446, 71, 380,
	381, 382, 383, 384, 513, 385, 72, 386, 375, 267,
	429, 387, 194, 212, 518, 517, 519, 510, 507, 505,
	508, 509, 511, 512, 585, 586, 590, -136, -138, 618,
	-608, -323, -609, 6, 7, 8, 9, -610, 158, -599,
	448, 557, 92, 321, 365, 17, 506, 647, 547, 647,
	547, 168, 165, -434, 168, 117, 174, 173, 250, 168,
	-434, -362, 171, 647, 170, 645, 331, 273, -411, -175,
	365, 429, 337, 98, 277, -414, -412, 545, -499, 325,
	321, 297, 247, 114, -176, 257, 256, 112, 506, 245,
	403, 316, 57, 59, -570, -571, 234, 235, 236, -562,
	539, -561, -362, 647, 652, 378, 100, 101, 645, 646,
	28, 246, 389, 273, 484, 482, 483, 485, 486, 487,
	488, -65, -515, -497, 479, 478, -375, 471, 477, 469,
	481, 472, 366, 339, 561, 338, 237, 639, 546, 540,
	-350, 413, 449, 503, 504, 390, 450, 490, 492, 473,
	111, 198, 195, 247, 249, 246, 645, 365, 506, 429,
	98, 337, 246, -570, 652, 165, 490, 492, 448, 277,
	427, 42, -440, 439, -439, -441, 491, 502, 90, 91,
	489, -350, 111, 470, 470, -608, -323, -185, -187, -123,
	-560, 547, 647, 247, 365, 429, 277, 248, 246, 542,
	545, 249, 506, 245, 328, 389, 273, 337, 98, 170,
	645, -191, -192, -193, 230, 231, 232, 70, 235, 233,
	67, 33, 34, 35, -1, 125, 662, -389, -389, -6,
	665, -6, -389, -362, -362, 160, -256, -260, -257, -259,
	-258, -262, -261, 195, 196, 156, 199, 205, 201, 202,
	203, 204, 206, 207, 208, 209, 210, 213, 214, 211,
	32, 212, 263, 191, 192, 193, 194, 215, 177, 197,
	554, 223, 178, 224, 179, 225, 180, 226, 181, 182,
	227, 183, 186, 187, 188, 189, 185, 159, -224, 92,
	33, 86, 159, 92, -216, 269, -197, -249, -241, 159,
	663, -216, -608, -207, -208, 11, -249, -338, -362, 448,
	128, -99, 78, -99, 447, 78, -99, 447, 241, -563,
	-564, -565, -567, 241, 447, 446, 242, -118, 159, 285,
	17, -369, -369, 84, -249, -422, 277, -447, -420, 37,
	83, 160, 250, 160, 83, 86, 390, 365, 429, 391,
	506, 246, 403, 249, 277, 404, 365, 429, 246, 249,
	506, 277, 365, 246, 249, 429, 277, 404, 365, 469,
	470, 249, 28, 395, 398, 399, 470, -519, 502, 160,
	117, 114, 115, 116, -389, 135, -404, 128, 129, 130,
	131, 132, 133, 134, 142, 141, 152, 145, 146, 147,
	148, 149, 150, 151, 143, 144, 138, 118, 136, 140,
	137, 120, 155, -187, -389, -397, 62, -387, -387, -387,
	-387, -362, -479, -394, -389, 86, 86, 86, 86, 86,
	159, 105, 92, -389, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, -512, 86, 86, -401,
	-402, 86, 86, -382, -338, 86, 92, 92, 86, 86,
	86, 92, 86, 86, 86, -402, -402, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, -208, 160, -207, 86, -207, -208, -188,
	-187, 33, 34, 33, 34, 33, 34, 33, 34, -611,
	636, 86, 102, 658, 228, 17, -362, 645, -362, -593,
	33, 550, 550, 550, 550, 495, 556, 172, 173, 174,
	-362, 171, 250, -362, -409, 252, -409, -409, -233, -362,
	-235, 389, 249, 542, 249, -176, -409, -409, -409, -409,
	-409, 248, -409, 24, 246, 246, 246, 246, -409, 513,
	128, 128, 60, -572, 176, 160, -562, -215, 86, -593,
	653, 654, 655, -374, 136, 140, -374, -319, 18, -319,
	24, 24, 275, 275, 275, -374, 315, -619, -620, 17,
	138, -372, -620, -372, -372, -374, -621, 248, 480, 44,
	276, 275, -209, -210, 22, -209, 474, 470, -464, 475,
	476, -376, -620, -375, -374, -374, -375, -374, -374, -374,
	33, 246, 249, 506, 337, 640, -619, -619, 32, 32,
	-498, -498, -249, -498, -498, 540, -351, -362, -498, -498,
	-498, -303, -304, -249, -573, 251, 655, -605, -604, 493,
	-607, 495, 165, -441, 165, -441, 89, -422, 277, 277,
	160, 128, 24, -442, 128, 139, -441, -441, -442, -442,
	-273, 42, -361, 156, -362, 92, -273, 42, -602, -601,
	-249, -208, -188, -187, 87, 87, 87, 550, -593, -498,
	-498, -498, -498, -498, -499, -498, -498, -498, -498, -498,
	-369, -225, -362, -235, 252, -498, -498, -498, -498, -189,
	-190, 147, -389, -362, -193, -3, -146, -145, 122, 123,
	125, 630, 384, 629, 633, 627, -441, 42, -492, 411,
	410, -486, -488, 86, -487, 86, -487, -487, -487, -487,
	-487, 86, 86, -489, 86, -489, -489, -486, -490, 86,
	-490, -491, 86, -491, -490, -362, -468, 556, -395, -397,
	-362, 40, -508, 62, -184, 86, 32, 86, -216, -362,
	192, 170, 644, 36, -509, 62, -184, 86, 32, -208,
	-139, 40, -210, 21, 159, 102, 92, -118, -99, 78,
	-118, -99, -99, 87, 160, -566, 108, 109, -568, 210,
	201, -362, -116, 92, -7, -11, -8, -9, -10, -47,
	-85, -184, 548, 551, -536, -534, 86, 33, 438, 83,
	17, -448, 246, 506, 389, 273, 249, 365, -446, -429,
	-426, -424, -361, -422, -425, -424, -451, -338, 470, -140,
	453, 452, 327, -389, -389, -389, -389, -389, 107, 118,
	355, 108, 109, -384, -405, 33, 323, 324, -385, -385,
	-385, -385, -385, -385, -385, -385, -385, -385, -385, -385,
	-393, -403, -479, 86, 138, 136, 140, 137, 120, -387,
	-387, -385, -385, -275, -361, 156, 87, 160, -389, -559,
	-558, 122, -389, -389, -389, -389, -415, -417, -338, 86,
	-362, -556, -557, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 380, 375, 381, 379, 368, 387,
	382, 383, 194, 537, 538, 531, 532, 533, 534, 535,
	536, -395, -395, -389, -556, -395, -331, 34, 33, -397,
	-397, -397, 87, -389, -569, 353, 352, 354, -211, -362,
	-395, 87, 87, 87, 102, -397, -397, -395, -385, -395,
	-395, -395, -395, -557, -331, -331, -331, -331, 147, -397,
	-397, -331, -331, -331, -331, 147, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, -331, 87, 87, 87,
	147, -397, -209, -138, -517, -516, -389, 42, -139, -210,
	-612, 637, 86, -338, -600, 92, 92, 663, 170, 645,
	17, 506, -362, 17, 246, -362, 102, -362, 102, 496,
	497, 169, 173, 172, -362, 171, -362, -362, 118, -362,
	-362, 36, 86, -225, -409, -409, -409, -577, -362, 93,
	-430, -427, -424, -362, -362, -420, -362, -351, -249, -409,
	-409, -409, -409, -249, -284, 54, 55, 56, -424, -177,
	57, 58, -573, -561, 36, -214, -362, -319, -387, -387,
	-389, 365, 506, 246, -424, 277, -619, -374, -374, -352,
	-351, -376, -371, -376, -376, -319, -372, -374, -374, -389,
	-376, -372, -319, -362, 470, -319, -319, -464, -374, -373,
	-362, -373, -409, -351, -352, -352, -249, -249, -298, -305,
	-299, -306, 269, 243, 373, 374, 240, 238, 11, 239,
	-313, 316, -410, 514, -279, -280, 78, 43, -282, 267,
	415, 408, 279, 283, 96, 284, 448, 285, 248, 287,
	288, 289, 304, 306, 259, 290, 291, 292, 439, 293,
	164, 305, 294, 295, 296, 391, -274, 6, 340, 556,
	42, 52, 53, 462, 461, 559, 280, -362, -577, -575,
	32, -362, 32, -430, -424, -362, -362, 160, 250, -200,
	-202, -199, -195, -196, -201, -322, -324, -198, 86, -249,
	-187, -362, -441, 160, 494, 496, 497, -605, -442, -605,
	-442, 250, 33, 438, -445, 438, 33, -420, -439, 490,
	492, -435, 92, 439, -425, -444, 83, 156, -516, -442,
	-442, -444, -444, 155, 160, -603, 495, 496, 234, -209,
	102, -251, -249, -577, -429, -420, -362, -498, -251, -251,
	-251, -364, -364, 86, 159, 37, -362, -362, -362, -362,
	-318, 160, -317, 17, -363, -362, 36, 92, 159, -147,
	-145, 124, -389, -6, 629, -389, -6, -6, -389, -6,
	-389, -496, 412, 102, 102, -341, 92, -341, 102, 102,
	102, 562, 87, 92, -433, 83, -510, -398, -554, 618,
	-218, 87, -211, -552, -553, -211, -217, -362, -508, -241,
	128, 128, 128, 25, -510, -218, 87, -552, -209, 619,
	-139, -206, -205, -389, -362, 24, -118, -99, -564, 159,
	160, -214, -448, -428, -425, -450, 147, -362, -436, 160,
	556, 666, 90, 250, -590, -589, 430, 87, 160, -520,
	251, 513, 92, 663, 446, 228, 229, 107, 355, 108,
	109, -479, -397, -393, -387, -387, -385, -385, -391, 264,
	-391, 117, -389, 664, -388, -558, 124, -389, 36, 160,
	36, 160, 84, 160, 87, -486, -389, 159, 87, 87,
	17, 17, 87, -389, 87, 87, 87, 87, 17, 17,
	-389, 87, 159, 87, 87, 87, 87, 84, 87, 160,
	87, 87, 87, 87, 160, -397, -397, -389, -397, 87,
	87, 87, -389, -389, -389, -397, 87, -389, -389, -389,
	-389, -389, -389, -389, -389, -389, -389, -214, -458, 465,
	-458, -458, 160, 160, 160, 87, -139, 86, 102, 160,
	659, -345, -344, 92, -362, -362, 170, 645, -362, 92,
	645, -362, 92, 170, 174, 174, 173, -362, 92, 37,
	24, 24, 314, -234, -236, -237, -238, -239, -240, 138,
	161, 162, 86, -249, -249, -249, -579, 416, -591, 160,
	42, -589, 506, -173, 327, -413, 84, -180, 17, 556,
	-249, -249, -249, -249, -263, 36, 17, -194, -250, -362,
	86, 87, 160, -362, -362, -362, -421, 84, -362, -352,
	-319, -319, -376, -319, -319, 160, 23, -374, -376, -376,
	-241, -372, -241, 159, -241, -351, -485, 36, -215, 160,
	21, 269, -248, -359, -245, -247, 254, -379, -246, 257,
	-548, 255, 253, 112, 258, 312, 113, 248, -359, -359,
	254, -283, 250, 36, -359, -301, 248, 358, 312, 255,
	21, 269, -300, 248, 113, -362, 254, 258, 255, 253,
	-358, 128, -350, 155, 250, 44, 391, -358, 560, 269,
	-358, -358, -358, -358, -358, -358, -358, 286, 286, -358,
	-358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
	165, -358, -358, -358, -358, -358, -358, 86, 332, 281,
	282, 314, -580, 416, 32, 371, 371, 372, -591, 367,
	43, 32, -181, 365, -304, -302, -373, 32, -325, -326,
	-327, -328, -330, -329, 69, 73, 75, 79, 70, 71,
	72, 76, 81, 74, 32, 160, -360, -365, 36, -362,
	92, -360, -187, -202, -200, -360, 86, -442, -604, -606,
	498, 495, 501, -444, -444, 102, 250, 86, 128, -444,
	-444, 42, -361, -601, 502, 496, -139, 160, 83, -251,
	-226, -227, -228, -229, -256, -338, 196, 199, 201, 202,
	203, 204, 206, 207, 208, 209, 210, 213, 214, 211,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 554,
	178, 179, 180, 181, 182, 183, 186, 187, 188, 189,
	185, -362, -235, -319, -190, -202, -362, 92, -362, 147,
	125, -6, 123, -151, -150, -149, 126, 627, 633, 125,
	125, 125, 87, 87, 87, 160, 87, 87, 87, 160,
	87, 160, 102, -523, 475, 41, 160, 86, 87, 160,
	62, 160, 128, 87, 160, -389, -362, 92, -389, 192,
	87, 62, -139, 92, 160, -203, 38, 39, 159, 448,
	-362, -534, 87, -450, 160, 250, 159, 159, -426, 394,
	-361, -428, 21, 556, -338, 40, -345, 128, 663, -362,
	87, -391, -391, 117, -387, -384, 87, 125, -389, 123,
	-254, -256, 410, 411, -389, -254, -255, -261, 156, 195,
	263, 194, 193, 191, 410, 411, -273, -417, 553, -203,
	87, -362, -389, -389, 87, -389, -389, 17, -362, -273,
	-385, -389, -208, -208, 87, 87, -457, -458, -457, -457,
	87, 87, 87, 87, -457, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 86, 102, 104, 102,
	104, -516, -613, 64, 635, 63, 438, 107, 317, 160,
	102, 92, 664, 160, 128, 92, -362, -362, 17, 246,
	-362, 17, 174, 92, -592, 321, 365, 506, 246, 365,
	321, 506, 246, -469, 102, 402, 87, 160, -338, -226,
	-215, 86, -215, -582, 477, 418, 428, -358, -381, -380,
	367, 43, -503, 439, 424, 425, -427, 277, -351, -588,
	99, 128, 83, 344, 348, 350, 349, 345, 346, 347,
	-407, -408, -406, -410, -575, 86, 86, -184, 36, 136,
	-180, 86, 86, 36, -480, 334, -256, -249, -194, -362,
	17, 160, -574, 159, -1, -362, -362, -420, -374, -319,
	-389, -389, -319, -374, -374, -376, -362, -241, -480, -256,
	36, -299, 243, 239, -454, 314, 315, -455, -470, 317,
	-472, 86, -253, -338, -246, -547, -548, -409, -362, 113,
	-547, 113, 86, -253, -338, -338, -302, -338, -362, -362,
	-362, -362, -309, -308, -338, -311, 33, -312, -362, -362,
	-362, -362, 113, -362, 113, -278, 42, 49, 50, 51,
	-358, -358, 198, -281, 42, 438, 440, 441, -311, 102,
	102, 102, 102, 92, 92, 92, -358, -358, 102, 92,
	-365, 92, -549, 173, 46, 47, 102, 102, 102, 102,
	42, 92, -286, 42, 297, 301, 298, 299, 300, 92,
	102, 42, 102, 42, 102, 42, -362, 86, -550, -551,
	92, 333, -469, -582, -358, 371, -441, 128, 128, -381,
	-584, 96, 419, -584, -587, 327, -183, 506, 33, -219,
	243, 239, -575, -432, -431, -338, -199, -199, -199, -199,
	-199, -199, 69, 80, 69, -212, 86, 69, 74, 69,
	74, 69, -327, 69, 80, -432, -201, -215, -365, 87,
	-598, -597, -596, -594, 77, 251, 78, -395, -444, 495,
	499, 500, -428, -377, 92, -435, -223, 24, -249, -249,
	-501, 307, 308, 87, 160, -256, -321, 19, 159, 121,
	-6, -147, -149, -389, -6, -389, 629, 384, 630, 92,
	102, 102, -531, 459, 454, 456, 113, -398, -518, -517,
	62, -184, -211, -510, -553, -516, -362, 664, 664, 664,
	664, 92, 62, -184, -510, -223, -523, -205, -204, 45,
	-362, 102, 17, -425, -420, 147, 147, -362, 395, -436,
	92, 417, 92, 246, 664, 92, -345, -384, -389, 87,
	-264, 182, 181, -264, 36, 87, 87, -487, -487, -486,
	-489, -486, -264, -264, 87, 86, -203, 87, 24, 87,
	87, 87, -389, 87, 87, 160, -506, 515, -507, 589,
	-457, -457, -457, -457, -457, -457, -457, -457, -457, -457,
	-457, -457, -457, -457, -457, -457, -457, -400, -399, 269,
	460, 642, 642, 460, 642, 642, 87, 160, -556, 160,
	-353, 322, -353, -344, 92, 250, 92, 170, -362, 92,
	645, 92, -362, -362, -362, 314, -362, 314, -362, -362,
	92, 92, 92, -238, -256, 87, 36, -242, -243, -244,
	-253, -245, -247, 36, -583, 96, -578, 92, -362, 93,
	-584, 158, 369, 42, 420, 421, 436, 364, 102, 102,
	426, -576, -362, -182, 246, 365, -586, 53, 128, 92,
	-249, -406, -350, 155, 288, 337, -316, -315, -362, 92,
	-242, -184, -249, -242, -242, -184, -481, 336, 21, 102,
	146, -216, 84, 159, -202, -250, -362, 147, 87, -319,
	-241, -319, -319, -374, -481, -184, -466, 318, 86, -464,
	86, -464, 113, 345, -473, -471, 269, -307, 46, 48,
	-256, -545, -362, -543, -545, -362, -543, -543, -409, -389,
	-307, -253, 250, 32, 239, -310, 342, 343, 348, 350,
	-437, 313, 118, -437, 160, -203, 160, -362, -273, -273,
	32, 92, 92, -251, 87, 160, 128, 102, 92, -583,
	-578, 128, -442, 92, 92, -584, 92, 92, -588, 128,
	-252, 246, -351, 160, -219, -219, -319, 160, 128, -221,
	-220, 83, 84, -222, 83, -220, -220, 69, -213, 92,
	69, 69, -319, -596, -595, 24, -548, -548, -548, 87,
	87, 15, -228, 42, -320, 20, 21, 147, 125, 123,
	125, 125, -362, 87, 87, -493, 620, -527, -529, 454,
	21, 21, 15, 251, 87, -510, 664, -510, -531, 46,
	47, -420, -436, 439, -249, 160, 664, -254, -292, 92,
	-389, 87, -389, 87, 92, 87, 92, -208, 21, 87,
	160, 87, 87, 87, 160, 87, 87, -389, 87, -556,
	-354, 192, 92, -354, 365, -363, -362, 17, -362, 92,
	-362, -469, 314, -469, 314, 246, -362, 244, -184, 87,
	160, -184, 92, -581, 430, 102, 42, 102, 158, 422,
	-504, -174, 96, -251, 33, -219, -585, 96, 128, 663,
	86, -358, -358, -358, -362, 87, 160, -358, -358, 87,
	87, 87, -271, 556, -482, 268, 102, 146, 102, 146,
	102, -360, -202, -362, -319, -574, 159, -319, -482, -456,
	319, 102, -385, 86, -385, 86, -465, 316, 86, 87,
	160, -362, -338, -268, -267, -265, 107, 118, 42, 408,
	-266, 96, 155, 302, 305, 304, 280, 303, -297, -378,
	83, 414, 342, 343, -410, 620, 544, 253, 112, 113,
	396, -379, 86, 86, 84, 322, 86, 86, -545, 87,
	-307, -338, 42, -310, 42, 356, 313, -308, -362, 155,
	-273, 87, -551, 92, -556, -581, 92, -444, -586, 92,
	-174, -251, -575, -208, -431, -516, -389, 86, -389, 87,
	86, 69, 11, 19, -382, -389, -397, 648, 650, 651,
	252, -6, 630, 384, -288, 621, 92, 21, 92, -525,
	92, -432, -493, -142, -285, -350, 285, 87, -291, 138,
	556, 87, 87, -457, -457, -460, -459, -463, 460, 314,
	468, -397, 92, 92, 87, 87, 92, -362, 170, 92,
	663, 92, -469, 92, -469, -362, 314, -230, -256, -178,
	556, -271, -244, -178, 21, 556, 368, 42, 102, 42,
	423, 92, -182, 128, 108, 109, -346, -347, 92, -415,
	-273, -275, 92, -315, -382, -382, -269, -184, 36, -270,
	-313, -410, 556, -141, -140, -269, 556, 86, -483, 164,
	102, 146, 102, 102, -319, -319, -483, -472, 21, 87,
	-451, 87, -451, 86, 128, -385, -471, -474, 62, -265,
	107, -385, 92, -275, -276, 42, 301, 297, 128, 128,
	-277, 42, 281, 282, -287, 86, 312, 15, 198, 86,
	113, 113, -249, -415, -415, -546, 344, 345, 346, 351,
	348, 349, 347, 350, -546, -415, -415, 86, -438, -437,
	-385, -358, -358, 155, -585, -209, -214, -544, -362, 253,
	21, 21, -502, 556, 649, 86, 86, -362, -362, -342,
	622, 102, 92, 456, -288, -494, 623, -521, -464, -273,
	128, 87, 76, 554, 557, 87, -462, 120, 422, 426,
	-383, -386, 102, 104, 190, 158, 87, 87, -362, -349,
	-348, 92, 92, 92, 314, -469, 555, -179, 61, 502,
	92, 93, 417, 92, 93, 368, -174, 92, 664, 160,
	128, 87, -452, 269, -184, 160, -313, -350, -142, -452,
	-272, -314, -362, 92, -500, 173, 335, 556, 102, 146,
	102, -208, -484, 173, 335, -455, 87, 87, 87, -451,
	102, 87, -478, -475, 86, -313, 271, 138, 92, 92,
	102, 86, -511, 32, 92, -416, 86, 87, 87, 87,
	87, -415, 102, -273, -358, 87, 87, 160, 651, 86,
	-397, -397, 86, 21, -342, -495, 624, 92, -530, 459,
	-524, -522, 454, 455, 456, 457, 92, 555, 66, 558,
	-461, -462, 426, -383, -386, 618, 466, 466, 466, 664,
	160, 128, -469, 92, -232, -362, 312, 439, -347, 92,
	-418, -453, 321, 21, -313, -358, -453, 87, 160, -358,
	-358, 335, 102, 146, 102, -209, 335, -467, 320, 87,
	-478, -313, -477, -476, 319, 272, 86, 87, -389, -401,
	-358, 87, -290, -289, 552, -415, -418, 84, -418, 84,
	-418, 84, -418, 84, 87, -273, -362, 253, -137, 86,
	87, 87, -343, -362, -525, 92, -532, 251, -528, -529,
	458, -522, 21, 456, 21, 21, -143, 160, 66, 117,
	467, 467, 467, -348, 92, 92, -231, 36, 461, 395,
	-419, 259, 356, 357, 96, 556, 342, 343, 361, 360,
	359, 362, 363, 21, -454, -273, -314, -382, -382, 102,
	102, 87, 160, -362, 268, 86, -396, -390, -389, 268,
	87, -362, -296, -294, -295, 83, 473, 310, 311, 87,
	-546, -546, -546, -546, -297, 87, 160, -395, 87, 160,
	-539, 86, 102, -527, -526, -528, 21, -525, 21, -525,
	-525, 463, 556, -461, 92, -358, -358, 92, 92, 341,
	-358, -358, -358, -358, -338, 86, -466, -476, -475, -396,
	87, 160, -437, -295, 83, -294, 83, 16, 15, -418,
	-418, -418, -418, 86, 87, -362, -542, 32, 87, -538,
	-537, -339, -533, -362, 459, 460, 92, -525, 128, 557,
	-616, -615, 641, 102, 102, -362, 102, 102, 102, 92,
	-451, -456, 87, -390, -293, 307, 308, 32, 173, -293,
	-395, -541, -540, -340, 87, 160, 159, 92, 558, 92,
	87, -472, 107, 42, 309, 87, 160, 128, -537, -362,
	-540, 42, -389, 159, -362,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 0, 0, 0, 0, 0, 721, 722, 0, 685,
	0, 0, 0, 0, 0, 0, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 534, 0, 0, 0,
	0, 804, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, -2, 734, 0,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 734, 0, 0,
	0, 812, 0, 0, 0, 855, 873, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1416, 1417,
	1418, 1419, 2223, 2193, -2, 1955, 1929, 2117, 2118, 2012,
	2025, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
	2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278,
	2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288,
	2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
	2309, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, -2,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
	2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
	2191, 2192, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, -2, -2, -2,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,
	2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
	2243, 2244, 2245, 2246, 2247, 2248, 2249, 0, 314, 312,
	1899, 1929, 1955, 2012, 2025, 2026, 2065, 2117, 2118, 2150,
	2193, 2209, 2210, 2211, 2223, 0, 0, 1010, 0, 782,
	0, 0, 787, 1363, 782, 351, 723, 724, 812, 838,
	683, 0, 388, 0, 1945, 392, 2200, 0, 0, 0,
	0, 680, 382, 383, 384, 385, 386, 387, 0, 0,
	983, 0, 0, 378, 0, 345, 2015, 2222, 1420, 0,
	0, 0, 0, 0, 201, 1134, 203, 1136, 207, 215,
	0, 0, 0, 220, 221, 224, 225, 226, 227, 228,
	0, 232, 0, 234, 237, 0, 239, 240, 0, 243,
	244, 245, 0, 255, 256, 257, 1137, 1138, 1139, -2,
	130, 1008, 1856, 1742, 0, 1749, 1762, 1773, 1502, 1503,
	1504, 1505, 0, 0, 0, 0, 0, 0, 1513, 1514,
	0, 1544, 2264, 2305, 2306, 0, 1522, 1523, 1524, 1525,
	1526, 1527, 0, 141, 153, 154, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 0, 1803, 1804, 1805, 1713, 1489, 1416,
	0, 2273, 0, 2295, 2300, 2301, 2302, 2303, 2294, 0,
	0, 1697, 0, 1687, 0, 0, -2, -2, 0, 0,
	2090, -2, 2307, 2308, 2309, 2270, 2291, 2299, 2274, 2275,
	2298, 2266, 2267, 2268, 2261, 2262, 2263, 2265, 2277, 2279,
	2290, 0, 2286, 2296, 2297, 2198, 0, 0, 2245, 0,
	0, 0, 2240, 155, 156, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1708, -2, 1710, -2, 1712, -2, 1715, -2,
	-2, -2, -2, 1720, 1721, -2, 1723, -2, -2, -2,
	-2, -2, -2, -2, 1699, 1700, 1701, 1702, 1691, 1692,
	1693, 1694, 1695, 1696, -2, -2, -2, 838, 931, 0,
	838, 0, 813, 860, 863, 866, 869, 816, 0, 0,
	103, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 329, 331, 0, 335, 0, 0, 331,
	328, 322, 0, 1176, 1176, 1176, 0, 0, 0, 0,
	1176, 1176, 1176, 1176, 1176, 0, 1176, 0, 0, 0,
	0, 0, 1176, 0, 1043, 1141, 1142, 1143, 1174, 1175,
	1248, 0, 0, 0, 739, 735, 736, 737, 738, 826,
	0, 828, 831, 0, 0, 660, 660, 898, 898, 0,
	606, 0, 0, 0, 660, 0, 620, 612, 0, 0,
	0, 660, 0, 0, 833, 833, 0, 663, 670, 660,
	660, -2, 660, 660, 657, 660, 0, 0, 1188, 626,
	627, 628, 612, 612, 631, 632, 633, 643, 644, 671,
	1880, 0, 0, 534, 534, 0, 534, 534, 0, 534,
	534, 534, 0, 741, 1971, 2060, 1952, 2031, 1909, 2015,
	2222, 0, 287, 2090, 292, 0, 1954, 1974, 0, 0,
	1993, 0, -2, 0, 367, 838, 0, 0, 812, 0,
	0, 0, 0, 534, 534, 534, 534, 534, 1247, 534,
	534, 534, 534, 534, 0, 0, 0, 534, 534, 534,
	534, 0, 874, 875, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 109, 108, 0, 1857, 1875, 1808, 1809,
	1810, 1862, 1812, 1866, 1866, 1866, 1866, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1866, 1866, 0,
	0, 1855, 1832, 1864, 1864, 1864, 1862, 1859, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1869, 1869, 1872, 1872, 1869, 0, 428, 426,
	427, 1738, 0, 0, 0, 0, 782, 786, 1361, 0,
	0, 0, 838, -2, 0, 0, 684, 389, 1421, 0,
	0, 393, 0, 394, 0, 0, 396, 0, 0, 0,
	417, 0, 420, 404, 405, 406, 407, 400, 0, 181,
	0, 380, 381, 0, 0, 347, 0, 0, 0, 535,
	0, 0, 0, 0, 0, 0, 212, 208, 216, 219,
	229, 236, 0, 248, 250, 253, 209, 217, 222, 223,
	230, 251, 210, 213, 214, 218, 252, 254, 211, 231,
	235, 249, 233, 238, 241, 242, 247, 0, 182, 0,
	0, 0, 0, 0, 1748, 0, 0, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1742, 0, 0, 1508, 1509, 1510,
	1511, 0, 1515, 0, 1545, 0, 0, 0, 0, 0,
	0, 1802, 1806, 0, 1738, 1738, 0, 1738, 1734, 0,
	0, 0, 0, 0, 0, 1738, 1670, 0, 0, 1672,
	1688, 0, 0, 1674, 1675, 0, 1678, 1679, 1738, 0,
	1738, 1683, 1738, 1738, 1738, 1666, 1667, 0, 1734, 1734,
	1734, 1734, 0, 0, 1734, 1734, 1734, 1734, 1734, 1734,
	1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 0,
	0, 0, 0, 833, 0, 839, 0, -2, 0, 857,
	859, 861, 862, 864, 865, 867, 868, 870, 871, 818,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 71,
	73, 0, 0, 0, 0, 0, 0, 333, 0, 338,
	324, 2052, 0, 323, 0, 0, 0, 0, 0, 1007,
	0, 0, 1176, 1176, 1176, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 1176, 1176, 1176, 1176, 0, 1194,
	0, 0, 0, 741, 740, 0, 827, 0, 0, 70,
	595, 596, 597, 898, 0, 0, 599, 600, 0, 601,
	0, 0, 612, 660, 660, 618, 619, 614, 613, 666,
	667, 663, 0, 663, 663, 898, 0, 637, 638, 639,
	660, 660, 645, 834, 0, 646, 647, 663, 0, 668,
	669, 898, 0, 0, 898, 898, 0, 655, 656, 658,
	660, 0, 0, 1176, 0, 676, 614, 614, 1881, 1882,
	0, 0, 1185, 0, 0, 0, 0, 679, 0, 0,
	0, 444, 445, 0, 0, 742, 0, 266, 270, 0,
	273, 0, 2060, 0, 2060, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 310, 311, 0, 0, 0, 0,
	301, 304, 1355, 1356, 1131, 1132, 305, 306, 359, 360,
	0, 833, 856, 858, 852, 853, 854, 0, 72, 0,
	0, 0, 0, 0, 534, 0, 0, 0, 0, 0,
	717, 0, 1023, 719, 0, 0, 0, 0, 0, 906,
	900, 902, 978, 141, 876, 8, 126, 123, 0, 19,
	0, 0, 19, 19, 0, 19, 315, 0, 1878, 1876,
	1877, 1811, 1863, 0, 1837, 0, 1838, 1839, 1840, 1851,
	1852, 0, 0, 1833, 0, 1834, 1835, 1836, 1827, 0,
	1828, 1829, 0, 1830, 1831, 313, 425, 0, 0, 1739,
	1011, 0, 760, 774, 755, 0, 763, 0, 0, 1363,
	0, 0, 0, 0, 743, 774, 745, 0, 763, 833,
	810, 0, 788, 0, 0, 390, 0, 401, 395, 0,
	402, 397, 398, 0, 0, 419, 421, 422, 423, 408,
	409, 681, 376, 377, 368, 369, 370, 371, 372, 373,
	374, 375, 0, 0, 379, 151, 0, 348, 349, 0,
	0, 0, 195, 196, 197, 198, 199, 200, 202, 186,
	706, 708, 1123, 1135, 0, 1126, 0, 205, 246, 178,
	0, 0, 0, 1743, 1744, 1745, 1746, 1747, 1752, 0,
	1754, 1756, 1758, 1760, 0, 1778, -2, -2, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1763, 1776, 1777, 0, 0, 0, 0, 0, 0, 1774,
	1774, 1769, 0, 1528, 1357, 1358, 1506, 0, 0, 1542,
	1546, 0, 0, 0, 0, 0, 0, 1159, 1862, 0,
	142, 1733, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 0, 0, 1742, 0, 0, 0, 1735, 1736, 0,
	0, 0, 1625, 0, 0, 1631, 1632, 1633, 0, 769,
	0, 1698, 1671, 1689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 930, 932, 0, 778, 780, 781, 807, 788,
	814, 0, 0, 0, 101, 106, 0, 1215, 0, 0,
	0, 0, 0, 0, 0, 74, 1189, 75, 1191, 342,
	343, 0, 0, 337, 325, 2052, 327, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 1059, 1060,
	532, 1117, 0, 0, 0, 1133, 1163, 1172, 0, 0,
	0, 0, 0, 1221, 1045, 1050, 1051, 1052, 1046, 1047,
	1053, 1054, 0, 829, 0, 0, 947, 598, 661, 662,
	899, 602, 0, 0, 609, 2015, 614, 898, 898, 621,
	615, 622, 665, 623, 624, 625, 663, 898, 898, 835,
	660, 663, 648, 664, 663, 1363, 652, 0, 659, 1363,
	677, 1363, 0, 675, 629, 630, 1223, 831, 442, 443,
	448, 450, 0, 499, 499, 499, 482, 499, 0, 0,
	470, 1883, 0, 0, 0, 0, 479, 1883, 0, 0,
	1883, 1883, 1883, 1883, 1883, 1883, 1883, 0, 0, 1883,
	1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883,
	0, 1883, 1883, 1883, 1883, 1883, 1340, 1883, 0, 498,
	1186, 489, 490, 491, 492, 497, 0, 0, 527, 0,
	0, 1058, 0, 532, 0, 0, 1100, 0, 0, 911,
	0, 912, 913, 914, 909, 949, 973, 973, 0, 973,
	953, 1363, 0, 0, 0, 278, 279, 267, 0, 268,
	0, 0, 281, 282, 0, 284, 285, 286, 293, 1952,
	2031, 288, 290, 0, 0, 294, 307, 308, 309, 0,
	0, 299, 300, 0, 0, 362, 363, 365, 0, 788,
	1190, 703, 1359, 704, 705, 709, 0, 0, 712, 713,
	714, 715, 716, 1025, 0, 0, 1109, 1110, 1111, 1112,
	898, 0, 907, 0, 903, 979, 0, 981, 0, 0,
	124, 19, 0, 117, 114, 0, 0, 0, 0, 0,
	1858, 1807, 1879, 0, 0, 0, 1860, 0, 0, 0,
	0, 0, 107, 790, 750, 0, 754, 771, 0, 775,
	0, 0, 767, 759, 764, 0, 0, 784, 751, 1362,
	0, 0, 0, 0, 744, 0, 0, 749, 788, 0,
	811, 840, 841, 844, 1422, 0, 403, 399, 418, 0,
	0, 0, 0, 189, 1120, 0, 190, 194, 184, 0,
	0, 0, 1125, 0, 1122, 1127, 0, 204, 0, 0,
	179, 180, 1206, 1215, 0, 0, 0, 1753, 1755, 1757,
	1759, 1761, 0, 1764, 1774, 1774, 1770, 0, 1765, 0,
	1767, 0, 1743, 1512, 0, 1547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 1615, 1616,
	0, 0, 1620, 0, 1622, 1623, 1624, 1626, 0, 0,
	0, 1630, 0, 1669, 1690, 1673, 1676, 0, 1680, 0,
	1682, 1684, 1685, 1686, 0, 838, 838, 0, 0, 1586,
	1586, 1586, 0, 0, 0, 0, 1586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1531, 0,
	1532, 1533, 0, 0, 0, 933, 808, 0, 0, 0,
	0, 0, 1213, 0, 91, 0, 0, 0, 0, 96,
	0, 0, 76, 344, 332, 334, 0, 326, 0, 1177,
	0, 0, 0, 0, 0, 1013, 1014, 1016, 0, 1019,
	1020, 1021, 1025, 831, 0, 831, 1070, 1883, 536, 0,
	0, 1119, 0, 1089, 0, 0, 0, -2, 0, 0,
	1172, 0, 0, 0, 1225, 0, 0, 0, 728, 732,
	23, 832, 0, 605, 603, 0, 607, 0, 608, 660,
	616, 617, 898, 640, 641, 0, 0, 898, 660, 660,
	651, 663, 672, 0, 673, 1363, 1225, 0, 0, 1185,
	1291, 1259, 460, 0, 1376, 1377, 500, 0, 1383, 1392,
	1176, 1454, 0, 1392, 0, 0, 1394, 1395, 0, 0,
	0, 0, 483, 484, 0, 469, 0, 0, 0, 0,
	0, 0, 468, 0, 0, 510, 0, 0, 0, 0,
	0, 1884, 1883, 1883, 0, 477, 478, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 1883, 1883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 1070, 1883, 0, 0, 0, 0, 536, 1114,
	1114, 1087, 1105, 0, 446, 447, 507, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 831, 974, 0, 976,
	977, 951, -2, 0, 911, 956, 1738, 0, 271, 272,
	0, 0, 277, 295, 297, 269, 0, 0, 0, 296,
	298, 302, 303, 361, 364, 366, 850, 0, 0, 1249,
	0, 1026, 1027, 1029, 1030, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1936,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1024, 720, 889, 901, 908, 980, 982, 142, 904,
	0, 127, 19, 126, 118, 119, 0, 19, 0, 0,
	0, 0, 1868, 1867, 1853, 0, 1854, 1865, 1870, 0,
	1873, 0, 429, 794, 0, 0, 774, 776, 0, 0,
	774, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 774, 850, 790, 0, 847, 845, 846, 0, 0,
	682, 152, 424, 0, 0, 0, 0, 0, 707, 0,
	1124, 186, 0, 0, 206, 0, 0, 0, 1215, 1210,
	1737, 1766, 1768, 0, 1775, 1771, 1507, 1516, 1543, 0,
	0, 1549, 1561, 1561, 0, 0, 0, 1552, 1866, 1866,
	1555, 1862, 1864, 1862, 1561, 1561, 0, 1160, 0, 1161,
	844, 143, 0, 0, 1621, 0, 0, 0, 770, 0,
	0, 0, 1582, 1584, 1586, 1586, 1593, 1587, 1594, 1595,
	1586, 1586, 1586, 1586, 1600, 1586, 1586, 1586, 1586, 1586,
	1586, 1586, 1586, 1586, 1586, 1586, 1580, 0, 0, 1796,
	1797, 779, 0, 0, 821, 822, 823, 824, 825, 0,
	0, 61, 61, 1215, 0, 100, 92, 0, 0, 0,
	0, 0, 336, 0, 77, 78, 80, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 1018, 0, 0,
	0, 1369, 0, 1074, 1071, 1072, 1073, 0, 1114, 537,
	538, 539, 540, 0, 0, 0, 1118, 0, 0, 1082,
	0, 0, 0, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, -2, 1180, 0, 0, 0, 1369, 1199, 0, 0,
	1204, 1369, 1369, 0, 1233, 0, 1222, 782, 0, -2,
	0, 0, 730, 0, 0, 948, 604, 610, 898, 634,
	836, 837, 1363, 898, 898, 660, 678, 674, 1233, 1224,
	0, 449, 499, 0, 1279, 0, 0, 1285, 0, 1292,
	453, 0, 501, 0, 1382, 1410, 1393, 1410, 1455, 1410,
	1410, 1176, 0, 501, 0, 0, 471, 0, 0, 0,
	0, 0, 467, 504, 844, 454, 456, 457, 458, 508,
	509, 511, 0, 513, 514, 473, 485, 486, 487, 488,
	0, 0, 0, 480, 493, 494, 495, 496, 455, 1308,
	1309, 1310, 1313, 1314, 1315, 1316, 0, 0, 1319, 1320,
	1321, 1322, 1323, 1407, 1408, 1409, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1349, 1350, 1351, 1352, 1353, 1354, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 0, 0, 1344,
	0, 0, 0, 1074, 0, 0, 0, 0, 0, 1114,
	530, 0, 0, 531, 1089, 0, 1107, 0, 1101, 1102,
	0, 0, 752, 898, 354, 0, 943, 934, 0, 918,
	0, 920, 940, 921, 941, 0, 0, 925, 0, 927,
	0, 923, 924, 929, 922, 898, 910, 950, 975, 952,
	955, 957, 958, 964, 0, 0, 0, 0, 265, 274,
	275, 276, 283, 0, 556, 289, 806, 0, 1360, 710,
	711, 1250, 1251, 718, 0, 1031, 887, 0, 0, 122,
	125, 0, 120, 0, 0, 0, 0, 112, 110, 1861,
	0, 0, 796, 166, 0, 0, 0, 772, 0, 777,
	774, 758, 768, 757, 765, 766, 785, 1364, 1365, 1366,
	1367, 0, 774, 748, 747, 809, 794, 842, 843, 0,
	1423, 391, 0, 1121, 186, 191, 192, 193, 187, 185,
	1128, 0, 1130, 0, 1208, 0, 0, 1772, 1548, 1517,
	1550, 1562, 1563, 1551, 0, 1519, 1520, 1553, 1554, 1556,
	1557, 1558, 1559, 1560, 1521, 0, 1162, 1617, 0, 1619,
	1627, 1628, 0, 1677, 1681, 0, 0, 0, 0, 0,
	1591, 1592, 1596, 1597, 1598, 1599, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 838, 1581, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 0,
	63, 0, 63, 1214, 1216, 0, 978, 0, 0, 97,
	0, 0, 79, 81, 0, 2016, 0, 0, 0, 0,
	88, 1006, 1009, 1015, 1017, 0, 0, 0, 1370, 1371,
	1373, 1374, 1375, 0, 1042, 0, 0, 1062, 1063, 1064,
	1076, 0, 542, 543, 0, 0, 0, 555, 551, 552,
	553, 533, 1113, 1096, 0, 0, 1085, 0, 0, 1095,
	0, 1181, 1883, 1883, 1883, 0, 0, 1293, 1883, 1883,
	0, 1201, 1203, 0, 0, 1297, 1236, 0, 0, 1227,
	0, 973, 0, 0, 898, 729, 732, 733, 830, 611,
	649, 653, 650, 898, 1236, 441, 1257, 0, 0, 0,
	0, 0, 1289, 0, 0, 1261, 0, 472, 502, 0,
	-2, 0, 1411, 0, 1396, 1411, 0, 0, 1410, 0,
	461, 501, 0, 0, 0, 515, 520, 521, 0, 517,
	518, 1450, 0, 519, 0, 506, 0, 512, 1311, 1312,
	0, 1317, 1318, 0, 1342, 0, 0, 0, 452, 522,
	0, 0, 0, 523, 524, 529, 1115, 1116, 1082, 0,
	1096, 0, 1106, 0, 1103, 1104, 838, 0, 0, 915,
	944, 0, 0, 916, 0, 917, 919, 942, 0, 936,
	926, 928, 353, 959, 0, 0, 961, 962, 963, 954,
	291, 851, 1028, 0, 872, 0, 0, 905, 0, 19,
	0, 0, 115, 1871, 1874, 798, 0, 795, 167, 0,
	0, 0, 0, 762, 773, 756, 1368, 746, 796, 848,
	849, 188, 183, 1129, 1218, 0, 1209, 0, 1474, 1530,
	0, 1629, 0, 1586, 1583, 1586, 1585, 1577, 0, 1534,
	0, 1536, 1537, 1538, 0, 1540, 1541, 0, 817, 0,
	59, 0, 62, 60, 0, 99, 93, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 1048, 1297,
	0, 1048, 1075, 1061, 0, 0, 544, 545, 0, 548,
	554, 1077, 0, 0, 1079, 1080, 1081, 0, 0, 1093,
	0, 0, 0, 0, 1173, 1187, 0, 0, 0, -2,
	0, -2, 1198, 0, 1242, 0, 1234, 0, 1226, 0,
	1229, 898, 898, -2, 726, 731, 0, 654, 1242, 1259,
	0, 1280, 0, 0, 0, 0, 0, 0, 0, 1260,
	0, 1273, 503, 1412, -2, 1426, 1428, 0, 1186, 1431,
	1432, 0, 0, 0, 0, 0, 0, 1481, 1440, 0,
	0, 1444, 1445, 1446, 0, 0, 1449, 0, 1790, 1791,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 1390,
	462, 463, 0, 465, 466, 1883, 1451, 505, 459, 1883,
	475, 1341, 1345, 1346, 1343, 528, 525, 526, 1085, 1088,
	1099, 1108, 753, 833, 355, 356, 945, 0, 935, 937,
	968, 965, 0, 0, 1032, 888, 896, 2245, 2247, 2244,
	116, 121, 0, 0, 800, 0, 797, 0, 791, 793,
	177, 761, 798, 137, 169, 0, 0, 1518, 0, 0,
	0, 1618, 1668, 1589, 1590, 0, 1578, 0, 1572, 1573,
	1574, 1579, 0, 0, 820, 815, 64, 95, 0, 98,
	68, 83, 0, 84, 0, 0, 0, 0, 1034, 1041,
	1055, 1192, 1372, 1040, 0, 0, 541, 546, 0, 549,
	550, 1097, 1096, 0, 1083, 1084, 0, 1091, 0, 0,
	1182, 1183, 1184, 1294, 1295, 1296, 1252, 1200, 0, -2,
	1305, 0, 0, 1196, 1218, 1252, 0, 0, 1230, 0,
	1237, 0, 1235, 1228, 838, 727, 1239, 451, 1291, 1281,
	0, 1283, 0, 0, 0, 0, 1262, -2, 0, 1427,
	1429, 1430, 1433, 1434, 1435, 1486, 1487, 1488, 0, 0,
	1438, 1483, 1484, 1485, 1439, 0, 0, 0, 0, 0,
	1788, 1789, 1479, 0, 0, 1397, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1398, 0, 0, 0, 1389, 1391,
	464, 0, 0, 1883, 1098, 352, 0, 0, 969, 971,
	966, 967, 890, 0, 0, 0, 0, 111, 113, 128,
	0, 799, 168, 0, 800, 139, 0, 160, 0, 1219,
	0, 1529, 0, 0, 0, 1588, 1575, 0, 0, 0,
	0, 0, 1792, 1793, 1794, 0, 1535, 1539, 94, 0,
	66, 0, 85, 86, 0, 0, 0, 0, 1056, 1057,
	1065, 1066, 0, 1068, 1069, 547, 1078, 1086, 1090, 1093,
	0, 1145, 1254, 0, 1202, 1185, 1307, 1883, 1205, 1254,
	0, 1299, 1883, 1883, 1220, 0, 1232, 0, 1244, 0,
	1238, 833, 440, 0, 1241, 1277, 1282, 1284, 1286, 0,
	1290, 1288, 1263, -2, 0, 1271, 0, 0, 1436, 1437,
	0, 0, 1687, 1883, 0, 1469, 0, 1145, 1145, 1145,
	1145, 0, 516, 474, 0, 946, 960, 0, 897, 0,
	0, 0, 0, 0, 789, 129, 0, 138, 157, 0,
	170, 171, 0, 0, 0, 0, 1211, 0, 1477, 1478,
	0, 1564, 0, 0, 0, 1568, 1569, 1570, 1571, 65,
	68, 0, 0, 87, 0, 1033, 0, 1067, 1092, 1094,
	1144, 1195, 0, 1291, 1306, 0, 1197, 1298, 0, 0,
	0, 1231, 1243, 0, 1246, 725, 1240, 1258, 0, 1287,
	1264, 1272, 0, 1267, 0, 0, 0, 1482, 0, 1443,
	0, 1448, 1457, 1470, 0, 0, 1378, 0, 1380, 0,
	1384, 0, 1386, 0, 0, 476, 970, 972, 0, 1738,
	892, 893, 0, 802, 792, 140, 144, 0, 166, 163,
	0, 172, 0, 0, 0, 0, 1207, 0, 1475, 0,
	1565, 1566, 1567, 67, 69, 89, 0, 1035, 1036, 1049,
	1146, 1883, 1883, 0, 0, 0, 1152, 1153, 1883, 1883,
	1883, 1883, 1158, 0, 1279, 1311, 1300, 1301, 1302, 1245,
	1278, 1266, 0, -2, 1274, 0, 0, 1740, 1750, 1751,
	1441, 1447, 1456, 1458, 1459, 0, 1471, 1472, 1473, 1480,
	1145, 1145, 1145, 1145, 1388, 891, 0, 0, 801, 0,
	131, 0, 0, 161, 162, 164, 0, 173, 0, 175,
	176, 0, 0, 1576, 1037, 0, 0, 1149, 1150, 0,
	0, 0, 0, 0, 1255, 0, 1257, 1268, -2, 0,
	1276, 0, 1442, 1460, 0, 1461, 0, 0, 0, 1379,
	1381, 1385, 1387, 1738, 894, 803, 1217, 0, 145, 0,
	147, 149, 150, 1413, 158, 159, 165, 174, 0, 0,
	1022, 1038, 0, 1147, 1148, 1151, 1154, 1155, 1156, 1157,
	0, 1259, 1275, 1741, 1462, 1464, 1465, 0, 0, 1463,
	0, 132, 133, 0, 146, 0, 0, 1212, 1476, 1039,
	1256, 1253, 1466, 1468, 1467, 895, 0, 0, 148, 1414,
	134, 135, 136, 0, 1415,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 665, 662,
	129, 128, 130, 3, 666, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 663, 141, 664, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:846
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:853
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:859
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:867
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:907
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:969
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:990
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:994
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1018
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1022
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1026
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1071
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1087
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1097
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1107
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1117
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1127
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1137
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1228
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1261
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1283
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1291
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1310
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1320
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1330
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1350
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1356
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1371
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1377
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1412
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1420
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1484
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1488
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1494
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1513
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1517
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1588
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1598
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1611
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1623
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1635
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1639
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1653
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1657
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1662
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1677
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1683
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1692
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1703
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1707
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1713
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1717
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1727
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1733
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1753
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1772
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1776
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1780
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1808
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1815
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1820
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1827
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1836
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1864
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1868
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1882
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1902
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1921
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1950
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1954
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1959
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1969
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2006
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2020
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2033
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2046
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2058
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2066
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2076
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2113
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2117
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2139
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2143
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2329
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2337
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2341
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2414
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2418
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2424
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2439
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2443
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2447
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2451
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2544
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2551
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2557
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2632
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2651
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2704
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2710
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2720
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2724
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2730
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2734
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2770
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2775
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2787
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2812
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2816
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2820
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2824
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2830
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2838
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2842
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2884
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2897
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2959
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2965
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2981
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2985
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3034
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3048
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3105
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3131
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3141
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3151
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3167
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3179
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3187
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3227
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3231
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3237
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3250
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3277
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3285
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3289
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3347
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3354
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3363
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3371
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3375
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3381
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3392
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3396
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3402
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3406
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3430
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3440
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3466
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3488
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3494
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3498
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3518
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3577
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3585
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3618
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3622
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3630
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3635
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3666
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3670
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3675
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3681
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3687
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3695
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3699
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3705
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3713
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3720
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3726
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3732
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3738
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3744
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3766
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3772
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3784
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3790
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3796
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3815
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3908
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3920
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3944
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3948
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3956
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3960
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3969
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3985
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3997
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4004
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4016
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4027
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4038
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4046
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4053
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4060
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4066
		{
			yyVAL.item = nil
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4071
		{
			yyVAL.item = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4147
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4155
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4177
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4224
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4235
		{
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4239
		{
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4244
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4264
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4302
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4321
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4325
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4329
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4337
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4341
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4360
		{
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4362
		{
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4390
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4394
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4398
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4404
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4416
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4422
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4454
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4462
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4480
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4494
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4500
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4513
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4517
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4526
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4530
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4535
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4539
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4545
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4560
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4564
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4570
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4585
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4605
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4610
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4618
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4624
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4629
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4641
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4645
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4673
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4681
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4697
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4701
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4707
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4720
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4728
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4737
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4743
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4751
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4759
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4767
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4773
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4781
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4787
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4795
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4801
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4811
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4816
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4823
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4839
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4852
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4863
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4867
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4873
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4879
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4888
		{
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4890
		{
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4893
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4902
		{
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4906
		{
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4911
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4920
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4927
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4933
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4941
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4948
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4955
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4975
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4983
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4993
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4997
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5003
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5010
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5016
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5024
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5031
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5038
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5057
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5061
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5065
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5074
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5078
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5084
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5093
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5097
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5103
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5107
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5113
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5117
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5123
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5128
		{
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5132
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5139
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5143
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5150
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5159
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5165
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5169
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5175
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5179
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5184
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5201
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5212
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5223
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5245
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5268
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5285
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5289
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5302
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5306
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5311
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5315
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5322
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5327
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5334
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5348
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5352
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5356
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5360
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5369
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5375
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5385
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5400
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5404
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5422
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5428
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5441
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5445
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5449
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5453
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5459
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5466
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5475
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5479
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5485
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5493
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5497
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5506
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5516
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5529
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5535
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5541
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5545
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5560
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5569
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5573
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5577
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5582
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5586
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5594
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5598
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5602
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5616
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5620
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5630
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5640
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5650
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5662
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5670
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5678
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5687
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5695
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5703
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5711
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5719
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5727
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5743
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5751
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5761
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5774
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5778
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5784
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5788
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5794
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5798
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5802
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5806
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5810
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5814
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5822
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5826
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5830
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5856
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5865
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5875
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5884
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5893
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5904
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5908
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5917
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5922
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5926
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5932
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5936
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5942
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5946
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5950
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5954
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5959
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5967
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5973
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5981
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5991
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6001
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6005
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6011
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6031
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6040
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6049
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6057
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6068
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6078
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6082
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6092
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6102
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6106
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6110
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6114
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6126
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6137
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6141
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6147
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6153
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6157
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6163
		{
			yyVAL.str = yyDollar[1].str
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6170
		{
			yyVAL.str = yyDollar[2].str
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6176
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6182
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6186
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6190
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6194
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6200
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6204
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6210
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6214
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6220
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6224
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6230
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6234
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6244
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6257
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6263
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6269
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6283
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6301
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6305
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6311
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6321
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6325
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6334
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6338
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6346
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6351
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6355
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6359
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6363
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6367
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6372
		{
			yyVAL.str = ""
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6376
		{
			yyVAL.str = yyDollar[1].str
		}
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6380
		{
			yyVAL.str = yyDollar[2].str
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6386
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6390
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6395
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6399
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6403
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6407
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6411
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6417
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1006:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6459
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6472
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6478
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1009:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6484
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6497
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6502
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6509
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6516
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6520
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6532
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6537
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6541
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6545
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6549
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6556
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6589
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6594
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6601
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6608
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6612
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6618
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6624
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6628
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6632
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6638
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6644
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6650
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6654
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6660
		{
			yyVAL.str = ""
		}
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6667
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1040:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6673
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6688
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6705
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6726
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6732
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6736
		{
			yyVAL.str = "DEFINER = "
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6740
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6745
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6749
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6763
		{
			yyVAL.str = ""
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6771
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6777
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6782
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6788
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6801
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6806
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6811
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6817
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6824
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6831
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6838
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6845
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6853
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6859
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6866
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6873
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6881
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6887
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6896
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6913
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6929
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6948
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6954
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6963
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6981
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6987
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6994
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7002
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7008
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7016
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7022
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7030
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7036
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7045
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7049
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7054
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7058
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7065
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7070
		{
			yyVAL.str = ""
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7074
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1098:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7080
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7093
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7108
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7114
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7120
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7126
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7133
		{
			yyVAL.str = ""
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7137
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7146
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7152
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7160
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7168
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7176
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7184
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7189
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7201
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7212
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7321
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7325
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7331
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7344
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7348
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7354
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7367
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7371
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7375
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7384
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7390
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7397
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7403
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7412
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7419
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7430
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7434
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7440
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7449
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7453
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7457
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7462
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7466
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7470
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7474
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7480
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7515
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				} else if opt2.Async {
					opt1.Async = opt2.Async
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7551
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7557
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7569
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7575
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7581
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7587
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7593
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7599
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7610
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7621
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7632
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7638
		{
			io := tree.NewIndexOption()
			io.Async = true
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7647
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7651
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7657
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7671
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7685
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7693
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7719
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7738
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7749
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7753
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7762
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7768
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7772
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7778
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7787
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7796
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7802
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7806
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7812
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7823
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7829
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7847
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7865
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7883
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7899
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7903
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7912
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7924
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7933
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7945
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7955
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7965
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7976
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7986
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7997
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8005
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8016
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8023
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8033
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8046
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8054
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8063
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8072
		{
			yyVAL.str = ""
		}
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8076
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8082
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8086
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8091
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8095
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8102
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8114
		{
			yyVAL.str = ""
		}
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8118
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1220:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8124
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8145
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8159
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8163
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8167
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8173
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8177
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8184
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8191
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8198
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8205
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8209
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8213
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8217
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8221
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8228
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8235
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8239
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8246
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8253
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8257
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8263
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8269
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8273
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8280
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8287
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8294
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8301
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8305
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8310
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8314
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8318
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8327
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8340
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8344
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8352
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8364
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8380
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8386
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8390
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8396
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8409
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8427
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8433
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8437
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8443
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8452
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8463
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8467
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8476
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8482
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8487
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8495
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8499
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8509
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8513
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8524
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8532
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8540
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8548
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8559
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8568
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8578
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8588
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8592
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8597
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8607
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8611
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8617
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8626
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8640
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8646
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8650
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8656
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8665
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8679
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8685
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8689
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8693
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8699
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8703
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8707
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8711
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8719
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8723
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8728
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8732
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8740
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8744
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8748
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8752
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8756
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8760
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8764
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8768
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8772
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8776
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8782
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8788
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8792
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8796
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8800
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8804
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8810
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8816
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8822
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8828
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8834
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8840
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8852
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8857
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8868
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8872
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8878
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8889
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8893
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8899
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8903
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8907
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8911
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8933
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8937
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8946
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8952
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8960
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8964
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8971
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8980
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8988
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8995
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9010
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9014
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9020
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9024
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9028
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9034
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9038
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9044
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9057
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9070
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9111
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9153
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9167
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9173
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9186
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9199
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9212
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9225
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9240
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9250
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9256
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9260
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9270
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9276
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9282
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9304
		{
			yyVAL.str = ""
		}
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9308
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9314
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9320
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9324
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9329
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9337
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9341
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9345
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9349
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9355
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9361
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9365
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9370
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9381
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9387
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9391
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9409
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9413
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9417
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9422
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9430
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9434
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9438
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9442
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9446
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9450
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9458
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9472
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9476
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9480
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9488
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9492
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9498
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9502
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9507
		{
			yyVAL.str = ""
		}
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9511
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9517
		{
			yyVAL.str = ""
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9521
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1456:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9527
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9544
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9551
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9558
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9565
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9572
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9581
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9587
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9597
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9601
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9605
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9609
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9621
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9625
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9629
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9634
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9638
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9650
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9655
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9659
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9664
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9668
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9684
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9702
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9710
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9714
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9718
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9722
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9726
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9730
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9734
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9738
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9744
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9748
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9752
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9756
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9760
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9764
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9768
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9772
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9776
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9780
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9822
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9826
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9830
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9835
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9843
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9847
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9851
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9855
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9859
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9869
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9873
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9877
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9881
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9885
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9889
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9893
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9897
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9910
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9916
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9925
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9934
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9945
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9955
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9965
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9974
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9984
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9994
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10004
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10013
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10023
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10027
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10032
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10042
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10046
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10052
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10061
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10073
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10090
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10107
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10120
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10133
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10145
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10159
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10189
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10206
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10221
		{
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10228
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10232
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10236
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10242
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10246
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10250
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10254
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10260
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10264
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10268
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10274
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10282
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10296
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10303
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10308
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10312
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10317
		{
			yyVAL.str = ","
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10321
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10326
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10330
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10342
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10380
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10392
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10403
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10445
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10456
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10467
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10478
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10489
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10500
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10511
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10522
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10533
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10544
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10555
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10566
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10577
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10588
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10599
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10610
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10634
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10643
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10652
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10670
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10681
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10700
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10709
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10718
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10736
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10748
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10759
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10772
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10784
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10856
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10869
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10881
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10890
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10898
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10906
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10928
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10939
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10950
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10959
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10971
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10981
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10991
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11000
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11011
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11020
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11030
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11048
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11062
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11072
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11091
		{
		}
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11093
		{
		}
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11135
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11147
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11151
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11155
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11161
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11170
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11176
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11180
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11186
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11190
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11201
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11205
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11214
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11218
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11222
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11227
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11231
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11237
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11241
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11245
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11249
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11253
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11257
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11261
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11265
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11269
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11273
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11281
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11285
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11297
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11301
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11305
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11309
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11313
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11317
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11327
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11333
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11337
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11344
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11348
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11352
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11358
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11362
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11366
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11370
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11374
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11378
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11382
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11388
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11392
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11396
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11400
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11406
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11419
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11424
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11430
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11434
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11447
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11456
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11460
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11464
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11468
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11475
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11479
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11483
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11487
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11494
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11505
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11510
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11540
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11552
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11565
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11578
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11591
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11604
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11630
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11643
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11697
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11724
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11766
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11802
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11855
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11867
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11887
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11907
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11927
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11943
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11956
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11982
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12007
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12019
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12031
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12055
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12079
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12103
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12115
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12141
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12154
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12167
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12182
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12190
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12199
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12209
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12232
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12237
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12243
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12250
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12254
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12259
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12263
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12269
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12275
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12282
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12289
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12298
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12305
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12312
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12321
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12325
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12329
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12335
		{
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12337
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12347
		{
			yyVAL.str = ""
		}
	case 1884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12351
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
