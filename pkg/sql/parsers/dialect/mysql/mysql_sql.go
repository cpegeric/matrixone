// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CROSS_L2 = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const HNSW = 57675
const ZONEMAP = 57676
const LEADING = 57677
const BOTH = 57678
const TRAILING = 57679
const UNKNOWN = 57680
const LISTS = 57681
const OP_TYPE = 57682
const REINDEX = 57683
const EF_CONSTRUCTION = 57684
const M = 57685
const QUANTIZATION = 57686
const EXPIRE = 57687
const ACCOUNT = 57688
const ACCOUNTS = 57689
const UNLOCK = 57690
const DAY = 57691
const NEVER = 57692
const PUMP = 57693
const MYSQL_COMPATIBILITY_MODE = 57694
const UNIQUE_CHECK_ON_AUTOINCR = 57695
const MODIFY = 57696
const CHANGE = 57697
const SECOND = 57698
const ASCII = 57699
const COALESCE = 57700
const COLLATION = 57701
const HOUR = 57702
const MICROSECOND = 57703
const MINUTE = 57704
const MONTH = 57705
const QUARTER = 57706
const REPEAT = 57707
const REVERSE = 57708
const ROW_COUNT = 57709
const WEEK = 57710
const REVOKE = 57711
const FUNCTION = 57712
const PRIVILEGES = 57713
const TABLESPACE = 57714
const EXECUTE = 57715
const SUPER = 57716
const GRANT = 57717
const OPTION = 57718
const REFERENCES = 57719
const REPLICATION = 57720
const SLAVE = 57721
const CLIENT = 57722
const USAGE = 57723
const RELOAD = 57724
const FILE = 57725
const TEMPORARY = 57726
const ROUTINE = 57727
const EVENT = 57728
const SHUTDOWN = 57729
const NULLX = 57730
const AUTO_INCREMENT = 57731
const APPROXNUM = 57732
const SIGNED = 57733
const UNSIGNED = 57734
const ZEROFILL = 57735
const ENGINES = 57736
const LOW_CARDINALITY = 57737
const AUTOEXTEND_SIZE = 57738
const ADMIN_NAME = 57739
const RANDOM = 57740
const SUSPEND = 57741
const ATTRIBUTE = 57742
const HISTORY = 57743
const REUSE = 57744
const CURRENT = 57745
const OPTIONAL = 57746
const FAILED_LOGIN_ATTEMPTS = 57747
const PASSWORD_LOCK_TIME = 57748
const UNBOUNDED = 57749
const SECONDARY = 57750
const RESTRICTED = 57751
const USER = 57752
const IDENTIFIED = 57753
const CIPHER = 57754
const ISSUER = 57755
const X509 = 57756
const SUBJECT = 57757
const SAN = 57758
const REQUIRE = 57759
const SSL = 57760
const NONE = 57761
const PASSWORD = 57762
const SHARED = 57763
const EXCLUSIVE = 57764
const MAX_QUERIES_PER_HOUR = 57765
const MAX_UPDATES_PER_HOUR = 57766
const MAX_CONNECTIONS_PER_HOUR = 57767
const MAX_USER_CONNECTIONS = 57768
const FORMAT = 57769
const VERBOSE = 57770
const CONNECTION = 57771
const TRIGGERS = 57772
const PROFILES = 57773
const LOAD = 57774
const INLINE = 57775
const INFILE = 57776
const TERMINATED = 57777
const OPTIONALLY = 57778
const ENCLOSED = 57779
const ESCAPED = 57780
const STARTING = 57781
const LINES = 57782
const ROWS = 57783
const IMPORT = 57784
const DISCARD = 57785
const JSONTYPE = 57786
const MODUMP = 57787
const OVER = 57788
const PRECEDING = 57789
const FOLLOWING = 57790
const GROUPS = 57791
const DATABASES = 57792
const TABLES = 57793
const SEQUENCES = 57794
const EXTENDED = 57795
const FULL = 57796
const PROCESSLIST = 57797
const FIELDS = 57798
const COLUMNS = 57799
const OPEN = 57800
const ERRORS = 57801
const WARNINGS = 57802
const INDEXES = 57803
const SCHEMAS = 57804
const NODE = 57805
const LOCKS = 57806
const ROLES = 57807
const TABLE_NUMBER = 57808
const COLUMN_NUMBER = 57809
const TABLE_VALUES = 57810
const TABLE_SIZE = 57811
const NAMES = 57812
const GLOBAL = 57813
const PERSIST = 57814
const SESSION = 57815
const ISOLATION = 57816
const LEVEL = 57817
const READ = 57818
const WRITE = 57819
const ONLY = 57820
const REPEATABLE = 57821
const COMMITTED = 57822
const UNCOMMITTED = 57823
const SERIALIZABLE = 57824
const LOCAL = 57825
const EVENTS = 57826
const PLUGINS = 57827
const CURRENT_TIMESTAMP = 57828
const DATABASE = 57829
const CURRENT_TIME = 57830
const LOCALTIME = 57831
const LOCALTIMESTAMP = 57832
const UTC_DATE = 57833
const UTC_TIME = 57834
const UTC_TIMESTAMP = 57835
const REPLACE = 57836
const CONVERT = 57837
const SEPARATOR = 57838
const TIMESTAMPDIFF = 57839
const CURRENT_DATE = 57840
const CURRENT_USER = 57841
const CURRENT_ROLE = 57842
const SECOND_MICROSECOND = 57843
const MINUTE_MICROSECOND = 57844
const MINUTE_SECOND = 57845
const HOUR_MICROSECOND = 57846
const HOUR_SECOND = 57847
const HOUR_MINUTE = 57848
const DAY_MICROSECOND = 57849
const DAY_SECOND = 57850
const DAY_MINUTE = 57851
const DAY_HOUR = 57852
const YEAR_MONTH = 57853
const SQL_TSI_HOUR = 57854
const SQL_TSI_DAY = 57855
const SQL_TSI_WEEK = 57856
const SQL_TSI_MONTH = 57857
const SQL_TSI_QUARTER = 57858
const SQL_TSI_YEAR = 57859
const SQL_TSI_SECOND = 57860
const SQL_TSI_MINUTE = 57861
const RECURSIVE = 57862
const CONFIG = 57863
const DRAINER = 57864
const SOURCE = 57865
const STREAM = 57866
const HEADERS = 57867
const CONNECTOR = 57868
const CONNECTORS = 57869
const DAEMON = 57870
const PAUSE = 57871
const CANCEL = 57872
const TASK = 57873
const RESUME = 57874
const MATCH = 57875
const AGAINST = 57876
const BOOLEAN = 57877
const LANGUAGE = 57878
const WITH = 57879
const QUERY = 57880
const EXPANSION = 57881
const WITHOUT = 57882
const VALIDATION = 57883
const UPGRADE = 57884
const RETRY = 57885
const ADDDATE = 57886
const BIT_AND = 57887
const BIT_OR = 57888
const BIT_XOR = 57889
const CAST = 57890
const COUNT = 57891
const APPROX_COUNT = 57892
const APPROX_COUNT_DISTINCT = 57893
const SERIAL_EXTRACT = 57894
const APPROX_PERCENTILE = 57895
const CURDATE = 57896
const CURTIME = 57897
const DATE_ADD = 57898
const DATE_SUB = 57899
const EXTRACT = 57900
const GROUP_CONCAT = 57901
const MAX = 57902
const MID = 57903
const MIN = 57904
const NOW = 57905
const POSITION = 57906
const SESSION_USER = 57907
const STD = 57908
const STDDEV = 57909
const MEDIAN = 57910
const CLUSTER_CENTERS = 57911
const KMEANS = 57912
const STDDEV_POP = 57913
const STDDEV_SAMP = 57914
const SUBDATE = 57915
const SUBSTR = 57916
const SUBSTRING = 57917
const SUM = 57918
const SYSDATE = 57919
const SYSTEM_USER = 57920
const TRANSLATE = 57921
const TRIM = 57922
const VARIANCE = 57923
const VAR_POP = 57924
const VAR_SAMP = 57925
const AVG = 57926
const RANK = 57927
const ROW_NUMBER = 57928
const DENSE_RANK = 57929
const BIT_CAST = 57930
const BITMAP_BIT_POSITION = 57931
const BITMAP_BUCKET_NUMBER = 57932
const BITMAP_COUNT = 57933
const BITMAP_CONSTRUCT_AGG = 57934
const BITMAP_OR_AGG = 57935
const NEXTVAL = 57936
const SETVAL = 57937
const CURRVAL = 57938
const LASTVAL = 57939
const ARROW = 57940
const ROW = 57941
const OUTFILE = 57942
const HEADER = 57943
const MAX_FILE_SIZE = 57944
const FORCE_QUOTE = 57945
const PARALLEL = 57946
const STRICT = 57947
const UNUSED = 57948
const BINDINGS = 57949
const DO = 57950
const DECLARE = 57951
const LOOP = 57952
const WHILE = 57953
const LEAVE = 57954
const ITERATE = 57955
const UNTIL = 57956
const CALL = 57957
const PREV = 57958
const SLIDING = 57959
const FILL = 57960
const SPBEGIN = 57961
const BACKEND = 57962
const SERVERS = 57963
const HANDLER = 57964
const PERCENT = 57965
const SAMPLE = 57966
const MO_TS = 57967
const PITR = 57968
const RECOVERY_WINDOW = 57969
const CDC = 57970
const GROUPING = 57971
const SETS = 57972
const CUBE = 57973
const ROLLUP = 57974
const LOGSERVICE = 57975
const REPLICAS = 57976
const STORES = 57977
const SETTINGS = 57978
const KILL = 57979
const BACKUP = 57980
const FILESYSTEM = 57981
const PARALLELISM = 57982
const RESTORE = 57983
const QUERY_RESULT = 57984

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12925

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 811,
	22, 811,
	-2, 804,
	-1, 167,
	246, 1242,
	248, 1137,
	-2, 1188,
	-1, 194,
	44, 634,
	248, 634,
	275, 641,
	276, 641,
	478, 634,
	-2, 669,
	-1, 234,
	663, 2019,
	-2, 533,
	-1, 547,
	663, 2143,
	-2, 412,
	-1, 605,
	663, 2202,
	-2, 410,
	-1, 606,
	663, 2203,
	-2, 411,
	-1, 607,
	663, 2204,
	-2, 413,
	-1, 747,
	327, 181,
	450, 181,
	451, 181,
	-2, 1917,
	-1, 814,
	86, 1702,
	-2, 2079,
	-1, 815,
	86, 1721,
	-2, 2050,
	-1, 819,
	86, 1722,
	-2, 2078,
	-1, 853,
	86, 1629,
	-2, 2282,
	-1, 854,
	86, 1630,
	-2, 2281,
	-1, 855,
	86, 1631,
	-2, 2271,
	-1, 856,
	86, 2243,
	-2, 2264,
	-1, 857,
	86, 2244,
	-2, 2265,
	-1, 858,
	86, 2245,
	-2, 2273,
	-1, 859,
	86, 2246,
	-2, 2253,
	-1, 860,
	86, 2247,
	-2, 2262,
	-1, 861,
	86, 2248,
	-2, 2274,
	-1, 862,
	86, 2249,
	-2, 2275,
	-1, 863,
	86, 2250,
	-2, 2280,
	-1, 864,
	86, 2251,
	-2, 2285,
	-1, 865,
	86, 2252,
	-2, 2286,
	-1, 866,
	86, 1698,
	-2, 2117,
	-1, 867,
	86, 1699,
	-2, 1901,
	-1, 868,
	86, 1700,
	-2, 2126,
	-1, 869,
	86, 1701,
	-2, 1910,
	-1, 871,
	86, 1704,
	-2, 1918,
	-1, 873,
	86, 1706,
	-2, 2150,
	-1, 875,
	86, 1709,
	-2, 1938,
	-1, 877,
	86, 1711,
	-2, 2162,
	-1, 878,
	86, 1712,
	-2, 2161,
	-1, 879,
	86, 1713,
	-2, 1985,
	-1, 880,
	86, 1714,
	-2, 2074,
	-1, 883,
	86, 1717,
	-2, 2173,
	-1, 885,
	86, 1719,
	-2, 2176,
	-1, 886,
	86, 1720,
	-2, 2178,
	-1, 887,
	86, 1723,
	-2, 2186,
	-1, 888,
	86, 1724,
	-2, 2059,
	-1, 889,
	86, 1725,
	-2, 2104,
	-1, 890,
	86, 1726,
	-2, 2069,
	-1, 891,
	86, 1727,
	-2, 2094,
	-1, 902,
	86, 1607,
	-2, 2276,
	-1, 903,
	86, 1608,
	-2, 2277,
	-1, 904,
	86, 1609,
	-2, 2278,
	-1, 1009,
	473, 669,
	474, 669,
	-2, 635,
	-1, 1060,
	128, 1901,
	139, 1901,
	159, 1901,
	-2, 1875,
	-1, 1181,
	22, 838,
	-2, 787,
	-1, 1291,
	11, 811,
	22, 811,
	-2, 1484,
	-1, 1375,
	22, 838,
	-2, 787,
	-1, 1735,
	86, 1774,
	-2, 2076,
	-1, 1736,
	86, 1775,
	-2, 2077,
	-1, 1911,
	87, 1009,
	-2, 1015,
	-1, 2367,
	111, 1180,
	155, 1180,
	195, 1180,
	198, 1180,
	288, 1180,
	-2, 1173,
	-1, 2531,
	11, 811,
	22, 811,
	-2, 950,
	-1, 2565,
	87, 1861,
	160, 1861,
	-2, 2061,
	-1, 2566,
	87, 1861,
	160, 1861,
	-2, 2060,
	-1, 2567,
	87, 1837,
	160, 1837,
	-2, 2047,
	-1, 2568,
	87, 1838,
	160, 1838,
	-2, 2052,
	-1, 2569,
	87, 1839,
	160, 1839,
	-2, 1973,
	-1, 2570,
	87, 1840,
	160, 1840,
	-2, 1966,
	-1, 2571,
	87, 1841,
	160, 1841,
	-2, 1891,
	-1, 2572,
	87, 1842,
	160, 1842,
	-2, 2049,
	-1, 2573,
	87, 1843,
	160, 1843,
	-2, 1971,
	-1, 2574,
	87, 1844,
	160, 1844,
	-2, 1965,
	-1, 2575,
	87, 1845,
	160, 1845,
	-2, 1953,
	-1, 2576,
	87, 1861,
	160, 1861,
	-2, 1954,
	-1, 2577,
	87, 1861,
	160, 1861,
	-2, 1955,
	-1, 2579,
	87, 1850,
	160, 1850,
	-2, 2094,
	-1, 2580,
	87, 1827,
	160, 1827,
	-2, 2079,
	-1, 2581,
	87, 1859,
	160, 1859,
	-2, 2050,
	-1, 2582,
	87, 1859,
	160, 1859,
	-2, 2078,
	-1, 2583,
	87, 1859,
	160, 1859,
	-2, 1919,
	-1, 2584,
	87, 1857,
	160, 1857,
	-2, 2069,
	-1, 2585,
	87, 1854,
	160, 1854,
	-2, 1943,
	-1, 2586,
	86, 1808,
	87, 1808,
	160, 1808,
	408, 1808,
	409, 1808,
	410, 1808,
	-2, 1890,
	-1, 2587,
	86, 1809,
	87, 1809,
	160, 1809,
	408, 1809,
	409, 1809,
	410, 1809,
	-2, 1892,
	-1, 2588,
	86, 1810,
	87, 1810,
	160, 1810,
	408, 1810,
	409, 1810,
	410, 1810,
	-2, 2122,
	-1, 2589,
	86, 1812,
	87, 1812,
	160, 1812,
	408, 1812,
	409, 1812,
	410, 1812,
	-2, 2051,
	-1, 2590,
	86, 1814,
	87, 1814,
	160, 1814,
	408, 1814,
	409, 1814,
	410, 1814,
	-2, 2029,
	-1, 2591,
	86, 1816,
	87, 1816,
	160, 1816,
	408, 1816,
	409, 1816,
	410, 1816,
	-2, 1972,
	-1, 2592,
	86, 1818,
	87, 1818,
	160, 1818,
	408, 1818,
	409, 1818,
	410, 1818,
	-2, 1949,
	-1, 2593,
	86, 1819,
	87, 1819,
	160, 1819,
	408, 1819,
	409, 1819,
	410, 1819,
	-2, 1950,
	-1, 2594,
	86, 1821,
	87, 1821,
	160, 1821,
	408, 1821,
	409, 1821,
	410, 1821,
	-2, 1889,
	-1, 2595,
	87, 1864,
	160, 1864,
	408, 1864,
	409, 1864,
	410, 1864,
	-2, 1924,
	-1, 2596,
	87, 1864,
	160, 1864,
	408, 1864,
	409, 1864,
	410, 1864,
	-2, 1939,
	-1, 2597,
	87, 1867,
	160, 1867,
	408, 1867,
	409, 1867,
	410, 1867,
	-2, 1920,
	-1, 2598,
	87, 1867,
	160, 1867,
	408, 1867,
	409, 1867,
	410, 1867,
	-2, 1988,
	-1, 2599,
	87, 1864,
	160, 1864,
	408, 1864,
	409, 1864,
	410, 1864,
	-2, 2011,
	-1, 2820,
	111, 1180,
	155, 1180,
	195, 1180,
	198, 1180,
	288, 1180,
	-2, 1174,
	-1, 2838,
	84, 731,
	160, 731,
	-2, 1358,
	-1, 3267,
	198, 1180,
	312, 1447,
	-2, 1419,
	-1, 3453,
	111, 1180,
	155, 1180,
	195, 1180,
	198, 1180,
	-2, 1298,
	-1, 3455,
	111, 1180,
	155, 1180,
	195, 1180,
	198, 1180,
	-2, 1298,
	-1, 3467,
	84, 731,
	160, 731,
	-2, 1358,
	-1, 3488,
	198, 1180,
	312, 1447,
	-2, 1420,
	-1, 3642,
	111, 1180,
	155, 1180,
	195, 1180,
	198, 1180,
	-2, 1299,
	-1, 3670,
	87, 1260,
	160, 1260,
	-2, 1180,
	-1, 3816,
	87, 1260,
	160, 1260,
	-2, 1180,
	-1, 3984,
	87, 1264,
	160, 1264,
	-2, 1180,
	-1, 4038,
	87, 1265,
	160, 1265,
	-2, 1180,
}

const yyPrivate = 57344

const yyLast = 55449

var yyAct = [...]int{
	781, 757, 4091, 783, 4060, 2869, 223, 4083, 1636, 1999,
	3988, 1715, 3473, 3572, 3994, 3287, 3883, 3987, 3816, 3995,
	3253, 3906, 3941, 766, 3863, 3361, 3794, 3698, 3502, 759,
	2863, 3763, 3854, 1327, 3362, 3815, 3884, 3630, 811, 1775,
	2866, 3732, 1059, 3435, 3864, 2782, 647, 3785, 1182, 1480,
	3576, 3866, 1944, 1486, 1762, 3262, 3567, 3440, 3651, 2417,
	1548, 3489, 1711, 665, 3639, 671, 671, 2841, 1718, 3210,
	1176, 671, 689, 698, 3224, 37, 698, 3186, 3612, 68,
	3359, 2563, 2981, 3644, 3427, 2980, 2097, 3456, 208, 2982,
	2094, 3213, 2958, 3282, 2110, 2892, 3458, 1780, 2059, 3264,
	3271, 2977, 2525, 2689, 2133, 3404, 3049, 2561, 2165, 2208,
	3009, 3327, 2808, 3193, 1959, 2969, 2420, 2654, 1777, 3191,
	3270, 3189, 3188, 3233, 2378, 3187, 141, 706, 710, 1172,
	1541, 2322, 36, 2346, 2821, 3157, 3184, 1621, 754, 749,
	3097, 2191, 2321, 2632, 2204, 2174, 3023, 695, 2173, 1873,
	2614, 2166, 2138, 939, 1626, 2090, 1629, 2526, 2203, 1625,
	2509, 1445, 2797, 2063, 2060, 2504, 2792, 2874, 2894, 2418,
	980, 1989, 1053, 2833, 219, 8, 2559, 1709, 1920, 218,
	7, 6, 1776, 2238, 664, 2367, 2377, 2205, 1588, 1520,
	1526, 1120, 758, 1749, 2358, 748, 2726, 1469, 2413, 647,
	1958, 1489, 1769, 1658, 2361, 767, 2172, 1557, 1700, 1198,
	1640, 1595, 15, 703, 2169, 2154, 1916, 1708, 646, 1052,
	1525, 683, 2533, 223, 1919, 223, 27, 1111, 1112, 1579,
	906, 2505, 680, 979, 671, 1781, 1522, 1018, 1614, 115,
	1091, 1490, 24, 1465, 712, 23, 1481, 17, 10, 209,
	697, 713, 956, 16, 755, 1714, 977, 962, 1373, 756,
	205, 201, 33, 1004, 1397, 908, 667, 1328, 709, 1259,
	1260, 1261, 1258, 2450, 2212, 909, 1259, 1260, 1261, 1258,
	3873, 3782, 1068, 2762, 693, 14, 1259, 1260, 1261, 1258,
	2762, 2762, 970, 2068, 971, 2535, 1108, 3370, 694, 3470,
	3066, 3240, 3065, 2222, 1177, 3603, 3443, 1178, 1637, 2677,
	3354, 1107, 2620, 1109, 2618, 2617, 2615, 2725, 1886, 1602,
	1598, 1103, 1104, 207, 666, 690, 701, 2320, 1392, 1065,
	676, 1524, 672, 951, 691, 1067, 1448, 1449, 1450, 1086,
	3841, 1366, 928, 926, 1104, 1412, 2326, 965, 1104, 961,
	1887, 3167, 2330, 1395, 3152, 3149, 3150, 692, 670, 670,
	3147, 4072, 2754, 2752, 678, 1503, 1880, 1388, 1177, 1651,
	3565, 3045, 1451, 1600, 1259, 1260, 1261, 1258, 1259, 1260,
	1261, 1258, 8, 3043, 2143, 3849, 3739, 7, 1038, 1102,
	3733, 3568, 3360, 2188, 1322, 3868, 2168, 907, 3126, 2160,
	2458, 4097, 3862, 206, 4069, 942, 2756, 3801, 3747, 3582,
	918, 1087, 206, 1257, 1221, 4023, 3613, 1403, 2663, 3457,
	2369, 2209, 1644, 1635, 3860, 206, 64, 197, 168, 3769,
	2707, 3617, 3967, 3745, 2671, 3917, 206, 206, 1565, 1402,
	2368, 1401, 927, 925, 206, 1400, 928, 3124, 750, 926,
	206, 3802, 1641, 206, 1398, 1069, 206, 1437, 708, 2827,
	2975, 140, 2362, 1656, 2220, 3771, 2553, 1063, 1420, 1256,
	1952, 2781, 1499, 2777, 2107, 1500, 1643, 1064, 1404, 2554,
	967, 1889, 960, 3017, 3018, 202, 1081, 1076, 1071, 1075,
	1079, 964, 963, 1653, 206, 64, 197, 168, 202, 3069,
	2074, 2075, 3057, 1649, 1681, 140, 1898, 1899, 945, 2825,
	202, 3016, 952, 198, 1084, 2073, 2633, 1655, 1074, 919,
	189, 1477, 1027, 202, 199, 1648, 202, 678, 923, 202,
	2794, 1527, 959, 1529, 3257, 1973, 1033, 1031, 3151, 1032,
	2795, 3255, 3148, 140, 1717, 750, 2779, 1701, 2774, 1254,
	1705, 969, 206, 64, 197, 168, 958, 1062, 126, 2828,
	957, 1487, 1488, 1502, 3592, 1061, 944, 202, 1236, 1082,
	1249, 1237, 950, 897, 1704, 896, 898, 899, 1085, 900,
	901, 3871, 3955, 206, 64, 197, 168, 1950, 2778, 2793,
	2775, 2540, 3998, 3999, 2539, 3964, 3871, 2541, 948, 1239,
	206, 64, 197, 168, 1072, 3870, 1419, 3870, 3954, 4022,
	3869, 206, 64, 197, 168, 2309, 2757, 3852, 1601, 1599,
	3960, 206, 64, 197, 168, 202, 1485, 1039, 1083, 3943,
	1484, 1487, 1488, 3869, 3953, 3050, 968, 3946, 4064, 4065,
	1201, 1204, 3736, 3363, 148, 149, 1721, 150, 151, 167,
	1690, 204, 152, 1035, 2658, 153, 202, 3855, 3856, 3857,
	3858, 1187, 949, 2091, 1706, 1193, 2224, 2913, 1073, 671,
	671, 1815, 194, 202, 3880, 3051, 1667, 3052, 3969, 3970,
	671, 1186, 3377, 3363, 202, 1234, 1190, 3943, 1703, 2499,
	3428, 2085, 3965, 3966, 202, 3972, 3971, 3973, 2216, 2081,
	698, 698, 3087, 671, 3206, 1696, 3433, 2800, 3591, 3622,
	2970, 1201, 1204, 2151, 2493, 3204, 3593, 1037, 167, 195,
	204, 196, 124, 2357, 2221, 1475, 968, 1114, 1951, 2780,
	1501, 2776, 2784, 2105, 2106, 2755, 1608, 1607, 3514, 966,
	3962, 194, 188, 187, 1513, 1080, 2668, 744, 70, 1235,
	746, 3085, 2216, 3997, 1251, 745, 1391, 3773, 3774, 1421,
	695, 695, 695, 1252, 1253, 193, 1299, 1068, 2456, 1720,
	1719, 3201, 3202, 1224, 3566, 3044, 2964, 3755, 955, 3756,
	1196, 1077, 3872, 3781, 1078, 3380, 2495, 3203, 1247, 1248,
	2556, 3778, 3091, 2761, 1036, 3750, 2496, 2497, 3619, 1185,
	3200, 1178, 1179, 1178, 3408, 1702, 1178, 3726, 2210, 190,
	191, 192, 2210, 1186, 1065, 2210, 2502, 3067, 3529, 2327,
	1067, 2199, 1246, 1888, 3064, 3583, 1238, 3526, 663, 2227,
	2229, 2230, 921, 3758, 2243, 3285, 1216, 3286, 3259, 3755,
	1068, 3756, 1331, 1203, 1202, 1104, 200, 1104, 2211, 1104,
	1104, 3283, 3284, 4030, 3222, 1104, 1104, 3234, 3899, 3800,
	3894, 2834, 2960, 3211, 2488, 3757, 700, 136, 699, 2973,
	1178, 193, 2223, 137, 922, 2364, 3806, 3798, 943, 3519,
	941, 3158, 3885, 3901, 1088, 2616, 1070, 1065, 707, 1603,
	3968, 1455, 3474, 1067, 3907, 3758, 3254, 693, 693, 693,
	2864, 2865, 3727, 2868, 3772, 2868, 1189, 1191, 1194, 3746,
	3481, 694, 694, 694, 1203, 1202, 3198, 3767, 970, 1464,
	971, 1487, 1488, 1394, 907, 1396, 2341, 3757, 1487, 1488,
	138, 1332, 2753, 1034, 1205, 1174, 1181, 1408, 690, 690,
	690, 1411, 1180, 63, 169, 1417, 665, 691, 691, 691,
	1209, 1210, 1064, 169, 1371, 1476, 1213, 1376, 1691, 203,
	3289, 1692, 670, 1175, 3618, 3419, 169, 2672, 1890, 1399,
	692, 692, 692, 1184, 1300, 1650, 1215, 169, 169, 980,
	3212, 2468, 3609, 3416, 1195, 169, 3530, 1241, 696, 3879,
	1242, 169, 65, 3212, 169, 3174, 1212, 169, 2491, 1727,
	1730, 1731, 3689, 4103, 2467, 3579, 2556, 1462, 2092, 1207,
	1728, 2489, 2490, 2806, 3684, 924, 1537, 1229, 1244, 696,
	1231, 1295, 1296, 1297, 1298, 3088, 3207, 146, 203, 2799,
	147, 2971, 1192, 3418, 671, 169, 696, 1515, 3807, 3799,
	61, 671, 1536, 3961, 1214, 647, 647, 696, 1232, 1461,
	65, 2423, 3678, 1483, 1460, 647, 647, 696, 3908, 1552,
	1552, 2914, 671, 2915, 2916, 2436, 3786, 2423, 2426, 1293,
	3260, 2416, 2439, 1479, 1478, 3986, 3263, 2228, 3820, 1173,
	3775, 65, 2942, 698, 1580, 665, 2803, 2804, 3623, 3146,
	1591, 1343, 1344, 169, 2084, 3751, 2459, 3459, 65, 3752,
	2433, 2802, 2082, 4086, 1240, 223, 139, 45, 1697, 65,
	1422, 1290, 1559, 62, 647, 1028, 2416, 5, 3563, 65,
	1554, 1550, 1550, 1413, 169, 3199, 708, 3283, 3284, 2438,
	1418, 3011, 3013, 3366, 1225, 143, 144, 3940, 1523, 145,
	1221, 169, 1429, 1245, 2812, 2816, 2817, 2818, 2813, 2815,
	2814, 1514, 169, 3028, 3029, 3288, 3279, 3751, 3162, 3220,
	1227, 3865, 169, 2664, 2545, 2454, 1633, 1375, 1243, 2213,
	1377, 1638, 1230, 1233, 2080, 2437, 2057, 969, 1647, 3699,
	3700, 3701, 3705, 3703, 3704, 3706, 3702, 1546, 1547, 3318,
	3090, 1410, 2422, 2426, 1435, 1471, 1472, 2424, 1226, 1030,
	1434, 3421, 1029, 2427, 2767, 1423, 1433, 1679, 2422, 2416,
	2421, 3819, 2419, 2424, 1892, 1432, 2342, 1531, 1533, 1040,
	2239, 1552, 702, 1552, 1186, 3691, 933, 1544, 1545, 1657,
	1220, 3280, 974, 975, 976, 1444, 2911, 1466, 1470, 1470,
	1470, 2225, 2226, 972, 4087, 3405, 1447, 1729, 1642, 2648,
	1442, 2425, 1068, 3685, 3686, 1654, 2771, 3985, 2334, 1068,
	3099, 3098, 1466, 1466, 1504, 1505, 1407, 2425, 695, 1581,
	1491, 695, 695, 1494, 1028, 1228, 1901, 937, 1902, 1609,
	1623, 1624, 935, 934, 1689, 940, 1604, 3601, 1414, 1415,
	3164, 1552, 3221, 2333, 1424, 1425, 1426, 1427, 1428, 1535,
	1430, 2336, 2335, 1900, 1646, 3012, 1436, 3680, 1186, 1779,
	929, 3679, 1405, 1406, 2432, 2480, 1628, 930, 2430, 1632,
	1631, 1810, 1811, 1828, 1814, 1560, 3652, 1510, 2427, 1572,
	676, 1592, 1829, 1578, 1521, 1566, 933, 2943, 2945, 2946,
	2947, 2944, 1716, 2933, 2934, 1836, 2839, 1838, 3239, 1839,
	1840, 1841, 4105, 1763, 1593, 1558, 2523, 1454, 1030, 936,
	1612, 1029, 1615, 1616, 3950, 1463, 1257, 1713, 2132, 3367,
	1674, 1675, 1473, 1183, 1617, 1618, 3324, 2360, 4084, 4085,
	1492, 1493, 1456, 1495, 1496, 2556, 1497, 932, 1698, 3320,
	1186, 2277, 935, 934, 2276, 1221, 1891, 2635, 1218, 1699,
	1894, 1028, 1896, 1732, 1694, 693, 4099, 4093, 693, 693,
	1903, 1905, 1813, 1906, 1666, 1908, 1909, 1669, 1670, 694,
	1580, 1871, 694, 694, 2840, 1917, 1552, 1922, 1923, 1660,
	1925, 1515, 671, 2768, 4081, 1687, 1665, 671, 3281, 1668,
	1552, 1041, 4040, 1893, 980, 2453, 690, 1945, 1688, 690,
	690, 1686, 3424, 4009, 3379, 691, 1685, 1682, 691, 691,
	1552, 1874, 1684, 1678, 1707, 1219, 1515, 1257, 1827, 2396,
	2932, 689, 1677, 1712, 2349, 1219, 1710, 4006, 692, 2218,
	4094, 692, 692, 4000, 2524, 1030, 3982, 1183, 1029, 2840,
	1751, 1972, 1456, 2314, 1683, 2359, 4112, 2350, 2351, 2663,
	1979, 1979, 3293, 1515, 3291, 1515, 1515, 4041, 1882, 671,
	671, 2130, 2046, 1917, 2050, 4041, 3156, 1552, 2054, 2055,
	3934, 3154, 1257, 2070, 2524, 647, 4010, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 647,
	3933, 1552, 1221, 1760, 1761, 1926, 1758, 1759, 1976, 2524,
	4007, 3927, 3902, 3031, 2786, 2758, 2253, 1924, 3890, 3983,
	1259, 1260, 1261, 1258, 1259, 1260, 1261, 1258, 671, 1917,
	1552, 2653, 2115, 2640, 671, 671, 671, 706, 706, 1877,
	2209, 1842, 2072, 2409, 2125, 2126, 2127, 2128, 3839, 2252,
	2319, 2134, 1837, 1257, 2001, 1099, 1100, 1101, 223, 2048,
	2313, 223, 223, 1872, 223, 2312, 2395, 3838, 2284, 2108,
	3122, 2200, 2103, 1257, 2423, 2426, 2056, 1982, 3833, 1259,
	1260, 1261, 1258, 1878, 2253, 2218, 1818, 1819, 1820, 1098,
	1443, 3891, 1095, 1766, 3324, 1538, 1372, 2100, 2101, 1834,
	4095, 3832, 1835, 3470, 1828, 1828, 2176, 3831, 3830, 1912,
	3035, 3810, 1259, 1260, 1261, 1258, 1828, 1828, 2842, 1848,
	1849, 3840, 2077, 2193, 2079, 2251, 2086, 3809, 2117, 2118,
	2119, 1960, 1965, 1962, 1963, 2098, 2099, 1942, 1941, 1870,
	2382, 1921, 2666, 2665, 1970, 2093, 2142, 1969, 3784, 2145,
	2146, 2253, 2148, 2657, 2403, 1937, 1945, 2071, 2249, 2114,
	1552, 2207, 1466, 1961, 1955, 1983, 1984, 2187, 911, 912,
	913, 914, 1947, 1948, 2253, 1953, 1470, 2272, 2178, 1274,
	2253, 2253, 1642, 1068, 2218, 1927, 1068, 3535, 1470, 2047,
	1932, 1978, 1980, 2257, 3483, 1068, 3449, 3397, 3393, 3301,
	2218, 2052, 3006, 2744, 2732, 2058, 2724, 695, 2201, 2198,
	2427, 2076, 2137, 2078, 2679, 2422, 2416, 2421, 2087, 2419,
	2424, 2253, 2183, 2123, 2661, 751, 1913, 1914, 1915, 2649,
	1065, 2411, 2053, 2642, 1662, 2637, 1067, 2629, 1928, 1929,
	1930, 1931, 1065, 2627, 1308, 2112, 2625, 2113, 1067, 2171,
	2120, 2121, 1092, 1093, 1094, 1097, 1206, 1096, 1170, 2623,
	2556, 2171, 1985, 1986, 2381, 1165, 2139, 3484, 2315, 3450,
	3398, 3394, 3302, 2291, 2425, 2524, 2382, 1257, 3432, 1257,
	911, 912, 913, 914, 2290, 1710, 2275, 1257, 3716, 2266,
	2265, 2264, 1068, 2254, 1956, 1957, 2156, 2382, 3533, 2217,
	1290, 4106, 2638, 3895, 1671, 3244, 2643, 1981, 2638, 2102,
	2630, 1966, 1967, 3082, 931, 3235, 2628, 2177, 1452, 2624,
	916, 2111, 1453, 2186, 2189, 3352, 1945, 2111, 2111, 2111,
	2184, 1977, 2624, 4068, 1540, 2451, 3874, 2382, 1457, 1065,
	2615, 2314, 2197, 3783, 693, 1067, 1257, 3896, 2324, 2325,
	3743, 2328, 3682, 2196, 2331, 1817, 1816, 1257, 694, 1257,
	3653, 1563, 1257, 1257, 1257, 2337, 2253, 2202, 1817, 1816,
	3462, 749, 2218, 2195, 671, 671, 671, 1672, 2307, 2215,
	1508, 1509, 1542, 1511, 1512, 690, 1516, 1517, 1518, 671,
	671, 671, 671, 1543, 691, 3460, 3236, 2255, 1467, 2231,
	3681, 3667, 2379, 2240, 3654, 1498, 3626, 2233, 3442, 3325,
	3316, 2383, 2384, 2385, 3463, 2388, 1515, 692, 3308, 1751,
	1567, 1568, 1569, 1570, 1571, 3303, 1573, 1574, 1575, 1576,
	1577, 2245, 916, 2686, 1583, 1584, 1585, 1586, 1539, 3461,
	3237, 3215, 1515, 2967, 2966, 2810, 1105, 1106, 784, 794,
	2609, 1110, 1277, 1278, 1279, 1280, 1281, 1274, 785, 2445,
	786, 790, 793, 789, 787, 788, 938, 2763, 2676, 1854,
	2641, 2236, 2237, 2547, 2234, 2235, 3814, 2181, 1843, 1844,
	1845, 1846, 1847, 1757, 1850, 1851, 1852, 1853, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1754,
	1756, 1753, 2180, 1755, 2452, 2400, 2179, 1439, 1452, 2402,
	1438, 2404, 1453, 791, 1188, 2140, 1770, 671, 1979, 1468,
	1770, 2232, 2246, 2308, 2310, 2311, 2528, 2528, 2070, 2528,
	1273, 1272, 1282, 1283, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1274, 2316, 1596, 3036, 2140, 792, 1261, 1258, 647,
	647, 1259, 1260, 1261, 1258, 3952, 2405, 1186, 1259, 1260,
	1261, 1258, 3355, 1552, 671, 1907, 2343, 1258, 3694, 2619,
	1259, 1260, 1261, 1258, 2415, 2414, 3693, 671, 3053, 3353,
	2903, 2901, 2880, 1186, 2600, 665, 1331, 1259, 1260, 1261,
	1258, 1591, 2878, 2070, 3673, 1596, 2605, 1310, 2607, 3627,
	3628, 223, 1259, 1260, 1261, 1258, 3620, 1068, 2408, 4077,
	1309, 2688, 2285, 2286, 4076, 2288, 2389, 1259, 1260, 1261,
	1258, 3430, 2295, 4102, 2809, 2551, 2532, 2392, 2542, 2530,
	2543, 2534, 2398, 4074, 2401, 2399, 1259, 1260, 1261, 1258,
	2746, 2645, 2747, 1832, 4073, 2611, 4013, 3981, 2954, 2548,
	2549, 3980, 2428, 2429, 1065, 2434, 2952, 2950, 1833, 2659,
	1067, 3897, 2536, 2207, 2783, 3835, 3621, 2353, 2354, 2355,
	1552, 2558, 1552, 3823, 1552, 1332, 2939, 3813, 1470, 1186,
	3803, 3431, 2370, 2371, 2372, 2373, 2716, 2678, 4101, 2610,
	3436, 2604, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1274,
	3734, 2564, 1259, 1260, 1261, 1258, 2503, 2498, 2953, 3656,
	3655, 1597, 3475, 1552, 1186, 3115, 2951, 2949, 2710, 2268,
	3464, 1531, 1533, 2537, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1263, 3429, 2717, 2669, 3304, 2938, 3205, 1552, 3078,
	2457, 3048, 3047, 2460, 2461, 2462, 2463, 2464, 2465, 2466,
	2937, 2936, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476,
	2477, 2478, 2479, 2935, 2481, 2482, 2483, 2484, 2485, 2601,
	2486, 2552, 2555, 2705, 2927, 1550, 2921, 2920, 3114, 2603,
	2919, 2918, 2759, 1259, 1260, 1261, 1258, 2765, 2766, 2267,
	2690, 2769, 2690, 4098, 2721, 2722, 2631, 2673, 2718, 2544,
	1550, 2318, 2397, 1946, 3441, 1259, 1260, 1261, 1258, 1186,
	1521, 2159, 2158, 1186, 2694, 2157, 1259, 1260, 1261, 1258,
	1552, 2153, 2152, 1515, 2109, 1964, 2675, 1897, 1895, 2050,
	1663, 1390, 2670, 2708, 3192, 3776, 3777, 2838, 3991, 4096,
	2684, 1971, 4078, 2844, 1974, 1975, 2845, 2667, 3573, 1168,
	2662, 2651, 744, 2660, 4066, 746, 3597, 1558, 4029, 4028,
	745, 2750, 2655, 2656, 2855, 1259, 1260, 1261, 1258, 4025,
	2111, 3958, 3957, 3764, 1186, 3938, 3882, 3631, 2680, 2681,
	3876, 3859, 2877, 1259, 1260, 1261, 1258, 3850, 3827, 1186,
	1186, 1186, 1979, 3822, 3821, 1186, 2706, 2887, 2888, 2889,
	2890, 1186, 2897, 2696, 2898, 2899, 2826, 2900, 1167, 2902,
	1068, 2822, 3780, 3766, 2823, 3585, 4104, 2835, 3765, 3735,
	2897, 2116, 3675, 3635, 3624, 1710, 3606, 2787, 3604, 3602,
	3599, 2564, 2528, 3596, 3595, 3571, 2856, 2807, 1259, 1260,
	1261, 1258, 1259, 1260, 1261, 1258, 2955, 3569, 3543, 2858,
	3540, 3537, 3584, 2001, 2959, 3426, 647, 2870, 3101, 2683,
	3413, 2260, 3406, 2050, 3390, 3388, 3383, 1186, 2070, 2070,
	2070, 2070, 2070, 2070, 3314, 2789, 2846, 2791, 1262, 1259,
	1260, 1261, 1258, 3313, 1186, 2070, 1292, 3311, 2528, 2788,
	3310, 3305, 2872, 3299, 2719, 1302, 2875, 2961, 2805, 2871,
	2875, 3298, 3216, 3179, 3014, 3178, 1552, 2872, 2883, 2884,
	3177, 3168, 3166, 2886, 2882, 8, 2829, 671, 671, 2893,
	7, 1311, 2843, 2837, 1273, 1272, 1282, 1283, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1274, 1259, 1260, 1261, 1258,
	2857, 2860, 3163, 2279, 3161, 2323, 3092, 2873, 3089, 3068,
	3046, 2879, 3523, 3021, 2948, 2940, 2930, 2885, 1259, 1260,
	1261, 1258, 2928, 2854, 2924, 3385, 3002, 2923, 2727, 2728,
	4054, 2922, 223, 2772, 2733, 1921, 2764, 223, 2760, 1259,
	1260, 1261, 1258, 852, 851, 2983, 3118, 3015, 2917, 2929,
	2652, 2796, 1259, 1260, 1261, 1258, 2338, 2332, 2329, 1828,
	2162, 1828, 2983, 2155, 3063, 1885, 3032, 1884, 1664, 1339,
	1335, 1801, 1334, 1259, 1260, 1261, 1258, 1171, 3077, 2962,
	920, 2968, 1534, 3914, 1552, 3910, 3760, 3084, 2965, 3759,
	2836, 3748, 2984, 2985, 2986, 2987, 2988, 2989, 3744, 3117,
	206, 2999, 197, 168, 3598, 3005, 3580, 3004, 3003, 1272,
	1282, 1283, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1274,
	3037, 3455, 3454, 3022, 3019, 3041, 1259, 1260, 1261, 1258,
	3453, 3423, 3402, 3058, 3400, 3399, 3116, 1068, 3396, 3395,
	1623, 1624, 3389, 1874, 3387, 3070, 2909, 2910, 3062, 1068,
	1282, 1283, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1274,
	3368, 2925, 2926, 1259, 1260, 1261, 1258, 3358, 3060, 3357,
	3344, 1628, 3343, 202, 1632, 1631, 3245, 3182, 3153, 3071,
	3120, 3111, 2847, 3103, 3039, 3038, 2876, 2963, 3102, 3165,
	3096, 2852, 2853, 2743, 3030, 2785, 3169, 3170, 3171, 3173,
	3086, 3175, 3176, 2626, 3059, 2622, 3056, 3054, 2621, 3061,
	2296, 1186, 2250, 3081, 2289, 3074, 3073, 3195, 3072, 2283,
	1259, 1260, 1261, 1258, 2282, 1616, 2281, 3209, 3080, 2280,
	2278, 2274, 671, 2273, 2271, 1617, 1618, 2262, 2259, 2258,
	3093, 3094, 2161, 1797, 1868, 3225, 1186, 3113, 1867, 671,
	1794, 1186, 1186, 3100, 1796, 1793, 1795, 1799, 1800, 3107,
	2070, 2379, 1798, 3243, 3109, 3110, 1866, 1831, 2390, 2391,
	3025, 3026, 1830, 1821, 1564, 1590, 3155, 1562, 2393, 2394,
	3106, 2742, 3108, 2445, 4053, 3219, 4012, 2248, 206, 3181,
	1259, 1260, 1261, 1258, 3932, 3269, 1329, 3272, 3909, 3272,
	3272, 3845, 3842, 3829, 1186, 3824, 3926, 2741, 1259, 1260,
	1261, 1258, 3729, 3728, 3160, 3710, 3692, 3159, 3688, 2682,
	3666, 3650, 3294, 3228, 2822, 1068, 3290, 1068, 3232, 2872,
	1552, 1552, 1068, 3197, 1259, 1260, 1261, 1258, 3256, 3258,
	3180, 3553, 3247, 1273, 1272, 1282, 1283, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1274, 3252, 3104, 3105, 3241, 1068,
	3551, 202, 3521, 3520, 2872, 1259, 1260, 1261, 1258, 2872,
	2872, 3517, 1065, 3516, 3267, 3218, 3482, 671, 1067, 3479,
	3477, 3444, 3227, 3112, 3195, 3242, 3238, 3230, 3231, 1611,
	3295, 3296, 1550, 1550, 1622, 3268, 1515, 1613, 1627, 2050,
	2050, 3251, 3277, 2415, 2414, 1630, 1804, 1805, 1806, 1807,
	1808, 1809, 1802, 1803, 1619, 1446, 2956, 2881, 2831, 3273,
	3274, 2740, 2872, 2830, 2824, 2790, 796, 142, 2745, 3278,
	2739, 3292, 142, 2636, 2546, 2487, 2380, 2352, 2317, 1752,
	202, 2602, 2122, 1722, 1723, 1724, 1725, 1726, 1259, 1260,
	1261, 1258, 1186, 1911, 1881, 1695, 2710, 1259, 1260, 1261,
	1258, 3127, 3128, 1645, 3356, 1620, 1389, 3129, 3130, 3131,
	3132, 3300, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140,
	3141, 3142, 3143, 1374, 1370, 1767, 1369, 1368, 1367, 1771,
	1772, 1773, 1774, 3924, 2738, 677, 1366, 3307, 142, 1812,
	3321, 3322, 3306, 2241, 3312, 3315, 1365, 1822, 1512, 1364,
	3319, 671, 1363, 1362, 1361, 1360, 3309, 3664, 3332, 1359,
	3333, 1259, 1260, 1261, 1258, 3217, 2737, 1273, 1272, 1282,
	1283, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1274, 3337,
	1358, 1357, 3229, 1356, 1355, 1354, 1353, 1352, 3340, 3341,
	3342, 1351, 1350, 1259, 1260, 1261, 1258, 1349, 1348, 3346,
	1875, 1347, 1346, 1345, 1342, 3001, 2736, 1341, 1340, 1338,
	2564, 1273, 1272, 1282, 1283, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1274, 1337, 2134, 3410, 3369, 2735, 3412, 1336,
	3922, 2734, 3414, 1259, 1260, 1261, 1258, 3420, 3371, 1333,
	3372, 1326, 1325, 2690, 1323, 1322, 1321, 1320, 1319, 1318,
	1317, 3376, 1316, 3391, 1259, 1260, 1261, 1258, 1259, 1260,
	1261, 1258, 1315, 1314, 1313, 3381, 2731, 1312, 3375, 1066,
	1307, 1306, 671, 2050, 142, 2730, 1305, 1304, 3415, 1303,
	3417, 1223, 1949, 3448, 1169, 4046, 3275, 3250, 2729, 142,
	3920, 142, 3518, 1259, 1260, 1261, 1258, 3328, 3329, 2528,
	2070, 3467, 1259, 1260, 1261, 1258, 2387, 2366, 1968, 1211,
	2111, 4044, 3996, 3331, 3403, 1259, 1260, 1261, 1258, 3422,
	2811, 2557, 2164, 1068, 3485, 3407, 3425, 1186, 3409, 1222,
	1068, 2992, 2723, 2996, 2994, 3335, 3269, 3334, 2997, 2995,
	1186, 3000, 2991, 2998, 2848, 2518, 2519, 3555, 2713, 2851,
	2993, 2990, 1186, 3951, 3532, 3556, 3861, 125, 1552, 1259,
	1260, 1261, 1258, 2709, 67, 3671, 3437, 1875, 2650, 2639,
	1440, 3469, 1875, 1875, 3439, 1259, 1260, 1261, 1258, 671,
	66, 2050, 3214, 1939, 1940, 1186, 3076, 3515, 3373, 3374,
	1259, 1260, 1261, 1258, 1934, 1935, 1936, 3265, 3466, 3266,
	2455, 3465, 3528, 2674, 3347, 3554, 2039, 1605, 3472, 2634,
	1659, 3508, 2685, 1639, 223, 2655, 2656, 2339, 3534, 2124,
	1550, 3544, 2141, 1217, 3190, 2144, 673, 1186, 2147, 3183,
	2859, 2149, 3547, 674, 3527, 3662, 3522, 3557, 3524, 1259,
	1260, 1261, 1258, 2832, 3378, 3486, 2407, 3531, 1765, 675,
	1250, 2375, 3539, 1943, 1910, 3536, 2905, 4057, 3525, 3826,
	3541, 3297, 3538, 2906, 2907, 2908, 3546, 3542, 2500, 3600,
	2893, 2494, 3549, 3545, 3548, 1259, 1260, 1261, 1258, 2051,
	3608, 3578, 1817, 1816, 1507, 1186, 1506, 2192, 2182, 1273,
	1272, 1282, 1283, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1274, 3339, 3564, 2983, 3024, 1186, 1552, 1552, 2340, 3574,
	2194, 3225, 1459, 3575, 1385, 1386, 1383, 1384, 1381, 1382,
	1379, 1380, 3605, 3643, 3607, 3643, 1273, 1272, 1282, 1283,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1274, 1186, 3660,
	1186, 3637, 3638, 1458, 3632, 2983, 1431, 1482, 4019, 3663,
	4017, 3665, 3974, 3445, 3446, 3447, 3948, 1552, 3947, 3451,
	3452, 3634, 3615, 3611, 3616, 2111, 3633, 3625, 1550, 1763,
	3476, 3614, 3478, 3945, 3886, 671, 3846, 1186, 1186, 3724,
	3648, 1186, 1186, 3647, 3723, 3636, 3661, 3570, 3392, 3640,
	3365, 3659, 2242, 1068, 3364, 3469, 2247, 3350, 2178, 3712,
	3669, 2440, 2410, 2872, 2256, 1661, 3349, 3707, 3515, 3034,
	3672, 3676, 1945, 2697, 3721, 1456, 3696, 3697, 3411, 1763,
	3708, 3709, 4048, 4047, 4048, 3079, 3730, 3731, 2770, 2368,
	2261, 1393, 3508, 1208, 4047, 3690, 3345, 1183, 1474, 1552,
	75, 2263, 1164, 1160, 1161, 1162, 1163, 2, 2702, 2270,
	2701, 2700, 2698, 210, 3, 4070, 1716, 3718, 1716, 4071,
	3717, 1, 3761, 2751, 3719, 911, 912, 913, 914, 1879,
	1183, 2287, 2111, 1387, 3754, 915, 2292, 2293, 2294, 910,
	1528, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305,
	2306, 3741, 3737, 2538, 2104, 3749, 1556, 1883, 917, 3742,
	3007, 1550, 3753, 3008, 3338, 3010, 980, 2773, 2214, 2972,
	2492, 3795, 3789, 2356, 3208, 3768, 1441, 973, 1823, 3559,
	2699, 1676, 1200, 1673, 1199, 1197, 1768, 1186, 798, 3779,
	2167, 2957, 2931, 3720, 4056, 4090, 4011, 4059, 3812, 1693,
	3818, 782, 3939, 3851, 4015, 3853, 3740, 3790, 2219, 1255,
	3578, 142, 142, 142, 1066, 3055, 3792, 3121, 3791, 1000,
	839, 3594, 3808, 809, 1324, 3586, 3804, 3587, 1652, 3125,
	3123, 1186, 808, 3434, 2801, 3725, 1552, 3787, 3027, 3797,
	1001, 1068, 2150, 3848, 3738, 1606, 1610, 2406, 3805, 3825,
	3905, 3670, 3261, 2867, 1634, 3900, 3480, 3668, 3590, 3246,
	3588, 3589, 714, 2083, 3248, 3249, 645, 3674, 1050, 3711,
	3834, 1273, 1272, 1282, 1283, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1274, 2163, 715, 2386, 3963, 1291, 3828, 953,
	3878, 2365, 954, 946, 3867, 2820, 3836, 2819, 1550, 3847,
	1733, 3713, 1264, 1750, 3144, 1716, 3145, 2513, 2517, 2518,
	2519, 2514, 2522, 2515, 2520, 1301, 753, 2516, 3887, 2521,
	2244, 2798, 3503, 3714, 3020, 2703, 2704, 3715, 3695, 74,
	73, 72, 71, 3875, 231, 800, 230, 3762, 3629, 3935,
	3881, 4061, 779, 778, 777, 776, 3904, 775, 774, 3889,
	1186, 2511, 2512, 2510, 2508, 2507, 2065, 2064, 1552, 3033,
	3348, 3929, 2129, 1875, 2131, 1875, 3936, 3919, 3921, 3923,
	3925, 3223, 3903, 2896, 3898, 2891, 1990, 1988, 1519, 3912,
	3937, 2435, 2442, 1987, 1875, 1875, 3993, 3382, 3581, 3918,
	3915, 3916, 3687, 3323, 2941, 3577, 1933, 2431, 2007, 2912,
	2004, 2003, 2904, 3683, 3677, 2035, 3944, 3942, 3793, 1552,
	3642, 3487, 3795, 3488, 3336, 2506, 1590, 3494, 3928, 2374,
	1550, 1119, 1115, 1117, 1118, 3956, 1116, 2695, 3984, 3317,
	2412, 3185, 2348, 2347, 3992, 2345, 1378, 3975, 3977, 2344,
	1416, 3877, 3978, 3979, 3959, 3610, 2562, 2560, 1166, 3330,
	3326, 1801, 2513, 2517, 2518, 2519, 2514, 2522, 2515, 2520,
	2175, 4008, 2516, 2190, 2521, 2644, 3075, 2647, 4001, 3976,
	4002, 1550, 4003, 2066, 4004, 2062, 4005, 2061, 1090, 4018,
	1089, 4020, 4021, 1587, 2974, 4016, 2501, 4014, 3770, 1938,
	947, 2363, 109, 41, 122, 1186, 3867, 4024, 108, 185,
	59, 184, 58, 120, 182, 57, 103, 102, 119, 180,
	3837, 56, 215, 214, 3818, 217, 4036, 216, 213, 2612,
	2613, 212, 1594, 4038, 4039, 4037, 211, 4042, 3949, 3646,
	4045, 4055, 2687, 4063, 4043, 2693, 4062, 3931, 4049, 4050,
	4051, 4052, 905, 44, 43, 186, 2711, 2712, 42, 110,
	60, 4075, 40, 4067, 2714, 2715, 1186, 3843, 3844, 39,
	38, 34, 13, 12, 35, 22, 21, 4079, 3904, 4080,
	2720, 1680, 4082, 20, 26, 32, 4088, 31, 135, 4092,
	134, 30, 4089, 133, 3888, 132, 131, 130, 129, 3892,
	3893, 1561, 128, 127, 29, 677, 19, 51, 50, 1722,
	1875, 49, 48, 47, 46, 9, 4100, 123, 118, 116,
	28, 117, 114, 4034, 113, 4063, 4108, 112, 4062, 4107,
	3913, 111, 106, 1797, 104, 3492, 86, 4092, 4109, 85,
	1794, 142, 84, 4113, 1796, 1793, 1795, 1799, 1800, 99,
	98, 97, 1798, 96, 988, 206, 64, 197, 168, 95,
	94, 92, 93, 3468, 999, 83, 82, 81, 80, 79,
	101, 107, 3471, 105, 198, 90, 3504, 100, 91, 89,
	88, 189, 87, 78, 1716, 199, 77, 76, 166, 3495,
	165, 2849, 2850, 164, 163, 162, 160, 161, 159, 158,
	3490, 157, 156, 155, 140, 3512, 3513, 154, 52, 142,
	53, 3491, 54, 55, 176, 175, 142, 177, 179, 126,
	181, 178, 183, 173, 171, 174, 984, 985, 202, 142,
	172, 170, 142, 142, 69, 11, 121, 1028, 18, 25,
	4, 0, 0, 0, 0, 142, 0, 0, 3496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4026, 4027,
	0, 0, 0, 0, 0, 4031, 4032, 4033, 0, 0,
	0, 0, 0, 0, 0, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1804, 1805, 1806, 1807,
	1808, 1809, 1802, 1803, 0, 148, 149, 0, 150, 151,
	0, 0, 0, 152, 0, 0, 153, 0, 0, 0,
	0, 1030, 0, 0, 1029, 0, 0, 0, 0, 0,
	0, 0, 1875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3511, 0, 2421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 3500, 0, 0, 0, 0, 0, 167,
	195, 204, 196, 124, 0, 0, 0, 3657, 3658, 0,
	0, 0, 0, 0, 0, 3497, 3501, 3499, 3498, 991,
	0, 0, 194, 188, 187, 0, 0, 0, 0, 70,
	0, 3040, 0, 3042, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	1289, 0, 1875, 0, 0, 3506, 3507, 1875, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 1288, 1284, 2192,
	1287, 1273, 1272, 1282, 1283, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1274, 0, 1013, 1011, 0, 0, 0, 0,
	190, 191, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3095, 0, 0, 3514, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 3493,
	0, 0, 983, 0, 0, 3505, 0, 200, 0, 0,
	0, 0, 3119, 990, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 193, 0, 137, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1020, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 2036, 0, 0, 0, 0, 1997, 0,
	0, 138, 0, 1007, 0, 1005, 1009, 1027, 0, 0,
	0, 1006, 1003, 1002, 63, 1008, 993, 994, 992, 995,
	996, 997, 998, 0, 1025, 0, 1026, 0, 0, 2039,
	2006, 0, 0, 0, 0, 0, 0, 1021, 1022, 2040,
	2041, 0, 0, 0, 142, 3510, 0, 142, 142, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 2005, 1259, 1260, 1261, 1258,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	1016, 0, 0, 2013, 0, 0, 0, 3276, 0, 0,
	1066, 0, 0, 142, 0, 1012, 0, 0, 146, 203,
	0, 147, 1066, 0, 0, 0, 169, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 3509, 0, 0, 0, 0, 0, 0, 0, 2036,
	0, 0, 0, 0, 1997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1801, 0, 0, 0,
	0, 2029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2039, 2006, 0, 0, 0,
	0, 0, 0, 1015, 0, 2040, 2041, 139, 45, 986,
	987, 981, 0, 0, 62, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 2005, 0, 0, 0, 0, 143, 144, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 2013,
	0, 0, 0, 0, 0, 1996, 1998, 1995, 0, 0,
	1992, 0, 0, 0, 0, 2017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 0, 2008, 0, 1991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2011, 2045, 0, 0,
	2012, 2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026,
	2028, 2031, 2032, 2033, 0, 0, 0, 2029, 0, 0,
	0, 2021, 2030, 2022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1797, 0,
	0, 3384, 0, 0, 0, 1794, 0, 2037, 3386, 1796,
	1793, 1795, 1799, 1800, 0, 0, 0, 1798, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1993, 1994,
	3401, 1996, 2862, 1995, 0, 0, 2861, 0, 0, 0,
	0, 2017, 0, 0, 0, 0, 2034, 0, 0, 0,
	0, 0, 2023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2010, 0, 0, 0, 0, 0, 0,
	2009, 0, 2011, 2045, 0, 0, 2012, 2014, 2016, 0,
	2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033,
	0, 0, 0, 0, 2027, 0, 0, 2021, 2030, 2022,
	0, 0, 0, 2015, 0, 0, 0, 0, 0, 2000,
	0, 0, 0, 0, 0, 0, 2043, 2042, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2037, 0, 0, 0, 0, 0, 0,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1804, 1805, 1806, 1807, 1808, 1809, 1802, 1803, 0,
	0, 0, 0, 0, 1993, 1994, 0, 0, 0, 2002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2034, 0, 2531, 1875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2010,
	0, 1875, 0, 0, 3550, 0, 2009, 3552, 0, 1138,
	0, 2038, 0, 0, 2044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3558, 0, 0, 0, 0,
	2027, 0, 0, 0, 0, 0, 0, 0, 0, 2015,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 2069,
	0, 0, 2043, 2042, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 1146, 1150, 1152, 1154, 1156, 1157, 1159,
	0, 1164, 1160, 1161, 1162, 1163, 0, 1141, 1142, 1143,
	1144, 1121, 1122, 1147, 0, 1124, 0, 1126, 1127, 1128,
	1129, 1125, 1130, 1131, 1132, 1133, 1134, 1137, 1139, 1135,
	1136, 1145, 0, 0, 0, 2002, 0, 0, 0, 1149,
	1151, 1153, 1155, 1158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2038, 0, 1140,
	2044, 0, 0, 1138, 1146, 1150, 1152, 1154, 1156, 1157,
	1159, 0, 1164, 1160, 1161, 1162, 1163, 0, 1141, 1142,
	1143, 1144, 1121, 1122, 1147, 0, 1124, 0, 1126, 1127,
	1128, 1129, 1125, 1130, 1131, 1132, 1133, 1134, 1137, 1139,
	1135, 1136, 1145, 0, 0, 0, 0, 0, 0, 0,
	1149, 1151, 1153, 1155, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 2691, 2692, 0, 142, 1146, 1150,
	1152, 1154, 1156, 1157, 1159, 0, 1164, 1160, 1161, 1162,
	1163, 0, 1141, 1142, 1143, 1144, 1121, 1122, 1147, 0,
	1124, 0, 1126, 1127, 1128, 1129, 1125, 1130, 1131, 1132,
	1133, 1134, 1137, 1139, 1135, 1136, 1145, 726, 725, 732,
	722, 0, 0, 0, 1149, 1151, 1153, 1155, 1158, 0,
	729, 730, 0, 731, 735, 0, 0, 716, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 725, 732, 722, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 730, 0, 731, 735, 0, 0,
	716, 2036, 0, 0, 0, 0, 0, 0, 206, 0,
	740, 0, 0, 744, 0, 0, 746, 0, 0, 0,
	0, 745, 0, 0, 2069, 2069, 2069, 2069, 2069, 2069,
	0, 3641, 0, 0, 1311, 0, 0, 2039, 1148, 0,
	0, 2069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 746,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 726, 725, 732, 722, 0,
	0, 2013, 0, 0, 0, 0, 0, 0, 729, 730,
	3911, 731, 735, 0, 0, 716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 1148,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 2036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 2029,
	0, 717, 719, 718, 0, 0, 142, 0, 0, 0,
	0, 0, 724, 0, 0, 2039, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 3989, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 711, 0, 717, 719, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 2036, 0, 0, 3817,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 2013,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	0, 721, 0, 2017, 0, 0, 0, 0, 0, 0,
	0, 0, 2039, 0, 2023, 0, 0, 0, 0, 0,
	0, 0, 3989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1148, 2011, 2045, 0, 0, 2012, 2014,
	2016, 0, 2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031,
	2032, 2033, 0, 0, 0, 0, 0, 2029, 0, 2021,
	2030, 2022, 0, 0, 0, 0, 2013, 0, 0, 717,
	719, 718, 0, 0, 723, 727, 733, 3989, 734, 736,
	724, 0, 737, 738, 739, 0, 0, 741, 742, 0,
	0, 0, 728, 0, 0, 2037, 0, 0, 0, 743,
	0, 0, 1066, 0, 142, 0, 721, 0, 0, 142,
	0, 0, 0, 0, 0, 2036, 2069, 723, 727, 733,
	0, 734, 736, 0, 0, 737, 738, 739, 0, 0,
	741, 742, 0, 0, 2029, 0, 142, 0, 0, 0,
	0, 2017, 4111, 0, 2034, 0, 0, 0, 0, 0,
	0, 2039, 2023, 0, 0, 0, 0, 0, 0, 0,
	0, 2010, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 0, 2011, 2045, 0, 0, 2012, 2014, 2016, 0,
	2018, 2019, 2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033,
	0, 0, 2027, 0, 0, 0, 0, 2021, 2030, 2022,
	0, 2015, 0, 0, 0, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2017, 0,
	0, 0, 723, 727, 733, 0, 734, 736, 0, 2023,
	737, 738, 739, 2037, 0, 741, 742, 0, 0, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 2011,
	2045, 0, 0, 2012, 2014, 2016, 0, 2018, 2019, 2020,
	2024, 2025, 2026, 2028, 2031, 2032, 2033, 0, 0, 3788,
	0, 0, 0, 2029, 2021, 2030, 2022, 0, 0, 0,
	0, 0, 2034, 0, 0, 0, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 0, 2009, 0, 0, 3645,
	2037, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2027, 0, 0, 0, 0, 0, 0, 0, 0, 2015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2017, 0, 2034,
	0, 0, 0, 0, 0, 0, 0, 0, 2023, 0,
	0, 0, 0, 0, 0, 0, 2010, 0, 0, 0,
	0, 0, 0, 2009, 0, 0, 0, 0, 2011, 2045,
	0, 720, 2012, 2014, 2016, 0, 2018, 2019, 2020, 2024,
	2025, 2026, 2028, 2031, 2032, 2033, 0, 2027, 0, 0,
	0, 0, 0, 2021, 2030, 2022, 2015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3649, 0, 2037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2010, 2069, 0, 0, 0,
	0, 0, 2009, 0, 3649, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2027, 0, 0, 0,
	0, 0, 0, 0, 0, 2015, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 807, 567,
	518, 433, 384, 585, 584, 0, 0, 876, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	142, 0, 760, 0, 0, 797, 852, 851, 784, 794,
	0, 0, 309, 229, 513, 633, 515, 514, 785, 0,
	786, 790, 793, 789, 787, 788, 0, 867, 0, 0,
	0, 0, 0, 3649, 752, 764, 0, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 761, 762, 0, 0, 0, 0, 817, 0, 763,
	0, 0, 812, 791, 795, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	142, 419, 334, 349, 331, 397, 792, 815, 819, 330,
	890, 813, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 891, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 810, 0, 630, 0, 469, 0, 0, 874, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 814,
	0, 422, 402, 887, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 1825, 1824,
	1826, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 871, 398, 595, 628, 629, 520, 142, 886,
	866, 868, 869, 873, 877, 878, 879, 880, 881, 883,
	885, 889, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 888, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 818, 570, 571, 388, 389, 390, 391,
	875, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 897,
	870, 896, 898, 899, 895, 900, 901, 882, 773, 0,
	825, 893, 892, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 780, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 859, 832, 833,
	834, 770, 835, 829, 830, 771, 831, 860, 823, 856,
	857, 799, 826, 836, 855, 837, 858, 861, 862, 902,
	903, 843, 827, 257, 904, 840, 863, 854, 853, 838,
	824, 864, 865, 806, 801, 841, 842, 828, 847, 848,
	849, 772, 820, 821, 822, 844, 845, 802, 803, 804,
	805, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 850, 638, 437,
	438, 0, 846, 641, 642, 639, 373, 424, 443, 431,
	816, 655, 516, 517, 656, 627, 0, 765, 0, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 336, 1876, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 807, 567,
	518, 433, 384, 585, 584, 0, 0, 876, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 2095,
	0, 0, 760, 0, 0, 797, 852, 851, 784, 794,
	0, 0, 309, 229, 513, 633, 515, 514, 785, 0,
	786, 790, 793, 789, 787, 788, 0, 867, 0, 0,
	0, 0, 0, 0, 752, 764, 0, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 761, 762, 0, 0, 0, 0, 817, 0, 763,
	0, 0, 2096, 791, 795, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 792, 815, 819, 330,
	890, 813, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 891, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 810, 0, 630, 0, 469, 0, 0, 874, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 814,
	0, 422, 402, 887, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 871, 398, 595, 628, 629, 520, 0, 886,
	866, 868, 869, 873, 877, 878, 879, 880, 881, 883,
	885, 889, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 888, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 818, 570, 571, 388, 389, 390, 391,
	875, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 897,
	870, 896, 898, 899, 895, 900, 901, 882, 773, 0,
	825, 893, 892, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 780, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 859, 832, 833,
	834, 770, 835, 829, 830, 771, 831, 860, 823, 856,
	857, 799, 826, 836, 855, 837, 858, 861, 862, 902,
	903, 843, 827, 257, 904, 840, 863, 854, 853, 838,
	824, 864, 865, 806, 801, 841, 842, 828, 847, 848,
	849, 772, 820, 821, 822, 844, 845, 802, 803, 804,
	805, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 850, 638, 437,
	438, 0, 846, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 0, 765, 206, 816,
	0, 0, 0, 0, 0, 0, 0, 0, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 1294, 567, 518,
	433, 384, 585, 584, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 760, 0, 0, 797, 852, 851, 784, 794, 0,
	0, 309, 229, 513, 633, 515, 514, 785, 0, 786,
	790, 793, 789, 787, 788, 0, 867, 0, 0, 0,
	0, 0, 0, 752, 764, 0, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 762, 0, 0, 0, 0, 817, 0, 763, 0,
	0, 812, 791, 795, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 792, 815, 819, 330, 890,
	813, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 891, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	810, 0, 630, 0, 469, 0, 0, 874, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 814, 0,
	422, 402, 887, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 871, 398, 595, 628, 629, 520, 0, 886, 866,
	868, 869, 873, 877, 878, 879, 880, 881, 883, 885,
	889, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 888, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 818, 570, 571, 388, 389, 390, 391, 875,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 897, 870,
	896, 898, 899, 895, 900, 901, 882, 773, 0, 825,
	893, 892, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 780, 293, 526, 369, 169,
	413, 342, 591, 592, 0, 643, 859, 832, 833, 834,
	770, 835, 829, 830, 771, 831, 860, 823, 856, 857,
	799, 826, 836, 855, 837, 858, 861, 862, 902, 903,
	843, 827, 257, 904, 840, 863, 854, 853, 838, 824,
	864, 865, 806, 801, 841, 842, 828, 847, 848, 849,
	772, 820, 821, 822, 844, 845, 802, 803, 804, 805,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 850, 638, 437, 438,
	0, 846, 641, 642, 639, 373, 424, 443, 431, 816,
	655, 516, 517, 656, 627, 0, 765, 0, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 336, 4110, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 807, 567, 518,
	433, 384, 585, 584, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 760, 0, 0, 797, 852, 851, 784, 794, 0,
	0, 309, 229, 513, 633, 515, 514, 785, 0, 786,
	790, 793, 789, 787, 788, 0, 867, 0, 0, 0,
	0, 0, 0, 752, 764, 0, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 762, 0, 0, 0, 0, 817, 0, 763, 0,
	0, 812, 791, 795, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 792, 815, 819, 330, 890,
	813, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 891, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	810, 0, 630, 0, 469, 0, 0, 874, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 814, 0,
	422, 402, 887, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 871, 398, 595, 628, 629, 520, 0, 886, 866,
	868, 869, 873, 877, 878, 879, 880, 881, 883, 885,
	889, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 888, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 818, 570, 571, 388, 389, 390, 391, 875,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 897, 870,
	896, 898, 899, 895, 900, 901, 882, 773, 0, 825,
	893, 892, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 780, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 859, 832, 833, 834,
	770, 835, 829, 830, 771, 831, 860, 823, 856, 857,
	799, 826, 836, 855, 837, 858, 861, 862, 902, 903,
	843, 827, 257, 904, 840, 863, 854, 853, 838, 824,
	864, 865, 806, 801, 841, 842, 828, 847, 848, 849,
	772, 820, 821, 822, 844, 845, 802, 803, 804, 805,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 850, 638, 437, 438,
	0, 846, 641, 642, 639, 373, 424, 443, 431, 816,
	655, 516, 517, 656, 627, 0, 765, 0, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 807, 567, 518,
	433, 384, 585, 584, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 760, 0, 0, 797, 852, 851, 784, 794, 0,
	0, 309, 229, 513, 633, 515, 514, 785, 0, 786,
	790, 793, 789, 787, 788, 0, 867, 0, 0, 0,
	0, 0, 0, 752, 764, 0, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 762, 0, 0, 0, 0, 817, 0, 763, 0,
	0, 812, 791, 795, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 792, 815, 819, 330, 890,
	813, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 891, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	810, 0, 630, 0, 469, 0, 0, 874, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 814, 0,
	422, 402, 887, 3990, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 871, 398, 595, 628, 629, 520, 0, 886, 866,
	868, 869, 873, 877, 878, 879, 880, 881, 883, 885,
	889, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 888, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 818, 570, 571, 388, 389, 390, 391, 875,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 897, 870,
	896, 898, 899, 895, 900, 901, 882, 773, 0, 825,
	893, 892, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 780, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 859, 832, 833, 834,
	770, 835, 829, 830, 771, 831, 860, 823, 856, 857,
	799, 826, 836, 855, 837, 858, 861, 862, 902, 903,
	843, 827, 257, 904, 840, 863, 854, 853, 838, 824,
	864, 865, 806, 801, 841, 842, 828, 847, 848, 849,
	772, 820, 821, 822, 844, 845, 802, 803, 804, 805,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 850, 638, 437, 438,
	0, 846, 641, 642, 639, 373, 424, 443, 431, 816,
	655, 516, 517, 656, 627, 0, 765, 0, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 336, 1876, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 807, 567, 518,
	433, 384, 585, 584, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 760, 0, 0, 797, 852, 851, 784, 794, 0,
	0, 309, 229, 513, 633, 515, 514, 785, 0, 786,
	790, 793, 789, 787, 788, 0, 867, 0, 0, 0,
	0, 0, 0, 752, 764, 0, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 762, 0, 0, 0, 0, 817, 0, 763, 0,
	0, 812, 791, 795, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 792, 815, 819, 330, 890,
	813, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 891, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	810, 0, 630, 0, 469, 0, 0, 874, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 814, 0,
	422, 402, 887, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 871, 398, 595, 628, 629, 520, 0, 886, 866,
	868, 869, 873, 877, 878, 879, 880, 881, 883, 885,
	889, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 888, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 818, 570, 571, 388, 389, 390, 391, 875,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 897, 870,
	896, 898, 899, 895, 900, 901, 882, 773, 0, 825,
	893, 892, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 780, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 859, 832, 833, 834,
	770, 835, 829, 830, 771, 831, 860, 823, 856, 857,
	799, 826, 836, 855, 837, 858, 861, 862, 902, 903,
	843, 827, 257, 904, 840, 863, 854, 853, 838, 824,
	864, 865, 806, 801, 841, 842, 828, 847, 848, 849,
	772, 820, 821, 822, 844, 845, 802, 803, 804, 805,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 850, 638, 437, 438,
	0, 846, 641, 642, 639, 373, 424, 443, 431, 816,
	655, 516, 517, 656, 627, 0, 765, 0, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 807, 567, 518,
	433, 384, 585, 584, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 760, 0, 0, 797, 852, 851, 784, 794, 0,
	0, 309, 229, 513, 633, 515, 514, 785, 0, 786,
	790, 793, 789, 787, 788, 0, 867, 0, 0, 0,
	0, 0, 0, 752, 764, 0, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	761, 762, 1589, 0, 0, 0, 817, 0, 763, 0,
	0, 812, 791, 795, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 792, 815, 819, 330, 890,
	813, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 891, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	810, 0, 630, 0, 469, 0, 0, 874, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 814, 0,
	422, 402, 887, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 871, 398, 595, 628, 629, 520, 0, 886, 866,
	868, 869, 873, 877, 878, 879, 880, 881, 883, 885,
	889, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 888, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 818, 570, 571, 388, 389, 390, 391, 875,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 897, 870,
	896, 898, 899, 895, 900, 901, 882, 773, 0, 825,
	893, 892, 894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 780, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 859, 832, 833, 834,
	770, 835, 829, 830, 771, 831, 860, 823, 856, 857,
	799, 826, 836, 855, 837, 858, 861, 862, 902, 903,
	843, 827, 257, 904, 840, 863, 854, 853, 838, 824,
	864, 865, 806, 801, 841, 842, 828, 847, 848, 849,
	772, 820, 821, 822, 844, 845, 802, 803, 804, 805,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 850, 638, 437, 438,
	0, 846, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 816, 765, 0, 2269, 0,
	0, 0, 0, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 1869, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 3560, 641, 3561,
	3562, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 2748, 0, 2749, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 1734, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 1735, 1736, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 760, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 816, 655, 516, 517, 656,
	627, 0, 765, 0, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 807, 567, 518, 433, 384, 585, 584,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 0,
	797, 852, 851, 784, 794, 0, 0, 309, 229, 513,
	633, 515, 514, 785, 0, 786, 790, 793, 789, 787,
	788, 0, 867, 0, 0, 0, 0, 0, 0, 752,
	764, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 762, 0, 0,
	0, 0, 817, 0, 763, 0, 0, 812, 791, 795,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 792, 815, 819, 330, 890, 813, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 891, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 810, 0, 630, 0,
	469, 0, 0, 874, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 814, 0, 422, 402, 887, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 871, 398, 595,
	628, 629, 520, 0, 886, 866, 868, 869, 873, 877,
	878, 879, 880, 881, 883, 885, 889, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 888, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 818, 570,
	571, 388, 389, 390, 391, 875, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 897, 870, 896, 898, 899, 895,
	900, 901, 882, 773, 0, 825, 893, 892, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 780, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 859, 832, 833, 834, 770, 835, 829, 830,
	771, 831, 860, 823, 856, 857, 799, 826, 836, 855,
	837, 858, 861, 862, 902, 903, 843, 827, 257, 904,
	840, 863, 854, 853, 838, 824, 864, 865, 806, 801,
	841, 842, 828, 847, 848, 849, 772, 820, 821, 822,
	844, 845, 802, 803, 804, 805, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 850, 638, 437, 438, 0, 846, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 0, 765, 206, 64, 197, 168, 0, 0, 0,
	0, 0, 0, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 198, 0, 0, 0, 0, 0, 0, 189,
	0, 336, 0, 199, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 140, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 167, 195, 204,
	196, 124, 0, 0, 626, 0, 0, 630, 0, 469,
	0, 0, 221, 0, 0, 0, 439, 0, 0, 365,
	194, 188, 187, 485, 0, 422, 402, 233, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 605, 606,
	607, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 464, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 224, 577, 580, 510, 234, 0, 574, 589,
	547, 588, 235, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 138,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 232, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 239, 304, 452, 240,
	0, 293, 526, 369, 169, 413, 342, 591, 592, 61,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 236, 45, 222, 225, 227,
	226, 0, 62, 575, 587, 621, 5, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 143, 237, 516, 517, 238, 627,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 140,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 2423,
	2426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 2427, 469, 0, 0, 0,
	2422, 0, 2421, 439, 2419, 2424, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 2425,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 169, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 0, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 228, 0, 0, 784, 794, 0, 0,
	309, 229, 513, 633, 515, 514, 785, 0, 786, 790,
	793, 789, 787, 788, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 451, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 792, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 206, 64, 197, 168, 0, 0,
	0, 0, 0, 0, 400, 681, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 687, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 686, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 682, 684, 314, 492, 414,
	696, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 169, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 2586, 2589, 2590, 2591, 2592,
	2593, 2594, 0, 2599, 2595, 2596, 2597, 2598, 0, 2581,
	2582, 2583, 2584, 1121, 2565, 2587, 0, 2566, 396, 2567,
	2568, 2569, 2570, 1125, 2571, 2572, 2573, 2574, 2575, 2578,
	2579, 2576, 2577, 2585, 408, 372, 409, 354, 386, 385,
	387, 1149, 1151, 1153, 1155, 1158, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 2580, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	2588, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 2423, 2426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 2427, 469, 0, 0, 0, 2422, 0,
	2421, 439, 2419, 2424, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 2425, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 2444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	2443, 469, 0, 0, 0, 2449, 2446, 2448, 439, 0,
	2447, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 2441, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 328, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 2444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 2443, 469, 0,
	0, 0, 2449, 2446, 2448, 439, 0, 2447, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 416, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 618, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 2135, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 0, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2136, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	1259, 1260, 1261, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 630, 0, 469, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	206, 655, 516, 517, 656, 627, 0, 0, 0, 0,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 140,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 2185, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 169, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 206, 655, 516, 517, 656, 627, 0, 0, 0,
	0, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	140, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2170, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 169, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 1049, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 1056, 1057, 0, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	1043, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	1030, 467, 303, 1029, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 1047, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	1048, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 1051, 570, 571, 388, 389, 390, 391, 348,
	596, 1046, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 1058, 1044, 1054, 1045, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 1055, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 1042, 424, 443, 431, 206,
	655, 516, 517, 656, 627, 0, 0, 0, 0, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 140, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2067, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 630, 0, 469, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	169, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 400, 0, 0, 531,
	564, 553, 637, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 368, 568, 550,
	560, 551, 536, 537, 538, 545, 347, 539, 540, 541,
	511, 542, 512, 543, 544, 0, 567, 518, 433, 384,
	585, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 1056, 1057, 0, 0, 0, 0, 309,
	229, 513, 633, 515, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 440, 459, 310,
	428, 472, 315, 436, 451, 305, 399, 425, 0, 0,
	301, 457, 435, 381, 358, 359, 300, 0, 419, 334,
	349, 331, 397, 0, 456, 484, 330, 475, 1030, 467,
	303, 1029, 466, 396, 453, 458, 382, 375, 0, 302,
	455, 380, 374, 362, 339, 500, 363, 364, 353, 408,
	372, 409, 354, 386, 385, 387, 0, 0, 0, 0,
	0, 495, 496, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	630, 0, 469, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 365, 0, 0, 0, 485, 0, 422, 402,
	658, 0, 0, 420, 370, 454, 410, 460, 441, 468,
	416, 411, 294, 442, 333, 383, 306, 308, 328, 335,
	337, 340, 341, 392, 393, 405, 427, 444, 445, 446,
	332, 316, 421, 317, 351, 318, 295, 324, 322, 325,
	429, 326, 297, 406, 450, 0, 346, 417, 378, 298,
	377, 407, 449, 448, 307, 476, 482, 483, 572, 0,
	488, 659, 660, 661, 497, 0, 412, 502, 503, 504,
	506, 507, 508, 509, 573, 590, 557, 527, 490, 581,
	524, 528, 529, 356, 593, 0, 0, 0, 481, 366,
	367, 0, 338, 379, 415, 344, 291, 292, 654, 329,
	398, 595, 628, 629, 520, 0, 582, 521, 530, 321,
	554, 566, 565, 394, 480, 0, 577, 580, 510, 653,
	0, 574, 589, 657, 588, 650, 404, 0, 426, 586,
	533, 0, 578, 552, 0, 579, 548, 583, 0, 522,
	0, 434, 462, 474, 491, 494, 523, 608, 609, 610,
	296, 493, 612, 613, 614, 615, 616, 617, 618, 611,
	465, 555, 532, 558, 473, 535, 534, 0, 0, 569,
	489, 570, 571, 388, 389, 390, 391, 348, 596, 314,
	492, 414, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 559, 662, 0, 619, 620, 0,
	0, 486, 487, 343, 350, 505, 352, 313, 403, 345,
	471, 360, 0, 498, 563, 499, 622, 625, 623, 624,
	1058, 2088, 1054, 2089, 361, 371, 418, 470, 401, 423,
	311, 461, 432, 1055, 549, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 603, 602, 601, 600, 599, 598, 597,
	0, 0, 546, 447, 323, 285, 319, 320, 327, 651,
	648, 452, 652, 0, 293, 526, 369, 0, 413, 342,
	591, 592, 0, 643, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 594, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 477, 478, 479, 501, 0, 463, 525, 649, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 621, 0,
	631, 632, 634, 636, 635, 638, 437, 438, 0, 640,
	641, 642, 639, 373, 424, 443, 431, 0, 655, 516,
	517, 656, 627, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 0, 2976, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 0, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 2979,
	0, 0, 0, 2978, 626, 0, 0, 630, 0, 469,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 365,
	0, 0, 0, 485, 0, 422, 402, 658, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 659, 660,
	661, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 654, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 0, 577, 580, 510, 653, 0, 574, 589,
	657, 588, 650, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 662, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 651, 648, 452, 652,
	0, 293, 526, 369, 0, 413, 342, 591, 592, 0,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 649, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 621, 0, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 0, 655, 516, 517, 656, 627,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 1555,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 0,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 1553,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 0, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 0, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1549, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1553, 0, 0, 0,
	309, 229, 513, 633, 515, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1551, 0, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 451, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 0, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4058, 0,
	228, 852, 0, 0, 0, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 348, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1553, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1551, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 2488, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 978, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 1553, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1764, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	0, 469, 0, 0, 0, 0, 0, 0, 439, 0,
	0, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 0, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 328, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 0, 0, 0, 2527, 0, 0, 0, 0,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 2529, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 0, 469, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 416, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 618, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 2135, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 0, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2136, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 630, 0, 469, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 400, 0, 0, 531,
	564, 553, 637, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 368, 568, 550,
	560, 551, 536, 537, 538, 545, 347, 539, 540, 541,
	511, 542, 512, 543, 544, 0, 567, 518, 433, 384,
	585, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 3194, 3196, 0, 0, 309,
	229, 513, 633, 515, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 440, 459, 310,
	428, 472, 315, 436, 451, 305, 399, 425, 0, 0,
	301, 457, 435, 381, 358, 359, 300, 0, 419, 334,
	349, 331, 397, 0, 456, 484, 330, 475, 0, 467,
	303, 0, 466, 396, 453, 458, 382, 375, 0, 302,
	455, 380, 374, 362, 339, 500, 363, 364, 353, 408,
	372, 409, 354, 386, 385, 387, 0, 0, 0, 0,
	0, 495, 496, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	630, 0, 469, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 365, 0, 0, 0, 485, 0, 422, 402,
	658, 0, 0, 420, 370, 454, 410, 460, 441, 468,
	416, 411, 294, 442, 333, 383, 306, 308, 328, 335,
	337, 340, 341, 392, 393, 405, 427, 444, 445, 446,
	332, 316, 421, 317, 351, 318, 295, 324, 322, 325,
	429, 326, 297, 406, 450, 0, 346, 417, 378, 298,
	377, 407, 449, 448, 307, 476, 482, 483, 572, 0,
	488, 659, 660, 661, 497, 0, 412, 502, 503, 504,
	506, 507, 508, 509, 573, 590, 557, 527, 490, 581,
	524, 528, 529, 356, 593, 0, 0, 0, 481, 366,
	367, 0, 338, 379, 415, 344, 291, 292, 654, 329,
	398, 595, 628, 629, 520, 0, 582, 521, 530, 321,
	554, 566, 565, 394, 480, 0, 577, 580, 510, 653,
	0, 574, 589, 657, 588, 650, 404, 0, 426, 586,
	533, 0, 578, 552, 0, 579, 548, 583, 0, 522,
	0, 434, 462, 474, 491, 494, 523, 608, 609, 610,
	296, 493, 612, 613, 614, 615, 616, 617, 618, 611,
	465, 555, 532, 558, 473, 535, 534, 0, 0, 569,
	489, 570, 571, 388, 389, 390, 391, 348, 596, 314,
	492, 414, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 559, 662, 0, 619, 620, 0,
	0, 486, 487, 343, 350, 505, 352, 313, 403, 345,
	471, 360, 0, 498, 563, 499, 622, 625, 623, 624,
	395, 355, 357, 430, 361, 371, 418, 470, 401, 423,
	311, 461, 432, 376, 549, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 603, 602, 601, 600, 599, 598, 597,
	0, 0, 546, 447, 323, 285, 319, 320, 327, 651,
	648, 452, 652, 0, 293, 526, 369, 0, 413, 342,
	591, 592, 0, 643, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 594, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 477, 478, 479, 501, 0, 463, 525, 649, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 621, 0,
	631, 632, 634, 636, 635, 638, 437, 438, 0, 640,
	641, 642, 639, 373, 424, 443, 431, 0, 655, 516,
	517, 656, 627, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 2550, 0, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 0, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 1553, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 630, 0, 469,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 365,
	0, 0, 0, 485, 0, 422, 402, 658, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 659, 660,
	661, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 654, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 0, 577, 580, 510, 653, 0, 574, 589,
	657, 588, 650, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 662, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 651, 648, 452, 652,
	0, 293, 526, 369, 0, 413, 342, 591, 592, 0,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 649, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 621, 0, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 0, 655, 516, 517, 656, 627,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 0,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 668, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 0, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 0, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 852, 0, 0, 0, 0, 0,
	309, 229, 513, 633, 515, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 451, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 0, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4035, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 348, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3796, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 3930, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1778, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	0, 469, 0, 0, 0, 0, 0, 0, 439, 0,
	0, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 0, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 328, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3811, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 0, 469, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 416, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 618, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 0, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 630, 0, 469, 0, 0, 0, 3722,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 400, 0, 0, 531,
	564, 553, 637, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 368, 568, 550,
	560, 551, 536, 537, 538, 545, 347, 539, 540, 541,
	511, 542, 512, 543, 544, 0, 567, 518, 433, 384,
	585, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 3226, 0, 0, 0, 309,
	229, 513, 633, 515, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 440, 459, 310,
	428, 472, 315, 436, 451, 305, 399, 425, 0, 0,
	301, 457, 435, 381, 358, 359, 300, 0, 419, 334,
	349, 331, 397, 0, 456, 484, 330, 475, 0, 467,
	303, 0, 466, 396, 453, 458, 382, 375, 0, 302,
	455, 380, 374, 362, 339, 500, 363, 364, 353, 408,
	372, 409, 354, 386, 385, 387, 0, 0, 0, 0,
	0, 495, 496, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	630, 0, 469, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 365, 0, 0, 0, 485, 0, 422, 402,
	658, 0, 0, 420, 370, 454, 410, 460, 441, 468,
	416, 411, 294, 442, 333, 383, 306, 308, 328, 335,
	337, 340, 341, 392, 393, 405, 427, 444, 445, 446,
	332, 316, 421, 317, 351, 318, 295, 324, 322, 325,
	429, 326, 297, 406, 450, 0, 346, 417, 378, 298,
	377, 407, 449, 448, 307, 476, 482, 483, 572, 0,
	488, 659, 660, 661, 497, 0, 412, 502, 503, 504,
	506, 507, 508, 509, 573, 590, 557, 527, 490, 581,
	524, 528, 529, 356, 593, 0, 0, 0, 481, 366,
	367, 0, 338, 379, 415, 344, 291, 292, 654, 329,
	398, 595, 628, 629, 520, 0, 582, 521, 530, 321,
	554, 566, 565, 394, 480, 0, 577, 580, 510, 653,
	0, 574, 589, 657, 588, 650, 404, 0, 426, 586,
	533, 0, 578, 552, 0, 579, 548, 583, 0, 522,
	0, 434, 462, 474, 491, 494, 523, 608, 609, 610,
	296, 493, 612, 613, 614, 615, 616, 617, 618, 611,
	465, 555, 532, 558, 473, 535, 534, 0, 0, 569,
	489, 570, 571, 388, 389, 390, 391, 348, 596, 314,
	492, 414, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 559, 662, 0, 619, 620, 0,
	0, 486, 487, 343, 350, 505, 352, 313, 403, 345,
	471, 360, 0, 498, 563, 499, 622, 625, 623, 624,
	395, 355, 357, 430, 361, 371, 418, 470, 401, 423,
	311, 461, 432, 376, 549, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 603, 602, 601, 600, 599, 598, 597,
	0, 0, 546, 447, 323, 285, 319, 320, 327, 651,
	648, 452, 652, 0, 293, 526, 369, 0, 413, 342,
	591, 592, 0, 643, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 594, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 477, 478, 479, 501, 0, 463, 525, 649, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 621, 0,
	631, 632, 634, 636, 635, 638, 437, 438, 0, 640,
	641, 642, 639, 373, 424, 443, 431, 0, 655, 516,
	517, 656, 627, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 0, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 630, 0, 469,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 365,
	0, 0, 0, 485, 0, 422, 402, 658, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 659, 660,
	661, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 654, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 0, 577, 580, 510, 653, 0, 574, 589,
	657, 588, 650, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 662, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 651, 648, 452, 652,
	0, 293, 526, 369, 0, 413, 342, 591, 592, 0,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 649, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 621, 0, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 0, 655, 516, 517, 656, 627,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 0,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2067, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 0, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 0, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 3438, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 513, 633, 515, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 451, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 0, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 348, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 1553, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2529, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	0, 469, 0, 0, 0, 0, 0, 0, 439, 0,
	0, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 0, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 328, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 2895, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 0, 469, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 416, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 618, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 0, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 630, 0, 469, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 400, 0, 0, 531,
	564, 553, 637, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 368, 568, 550,
	560, 551, 536, 537, 538, 545, 347, 539, 540, 541,
	511, 542, 512, 543, 544, 0, 567, 518, 433, 384,
	585, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 2646, 0, 0, 0, 309,
	229, 513, 633, 515, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 440, 459, 310,
	428, 472, 315, 436, 451, 305, 399, 425, 0, 0,
	301, 457, 435, 381, 358, 359, 300, 0, 419, 334,
	349, 331, 397, 0, 456, 484, 330, 475, 0, 467,
	303, 0, 466, 396, 453, 458, 382, 375, 0, 302,
	455, 380, 374, 362, 339, 500, 363, 364, 353, 408,
	372, 409, 354, 386, 385, 387, 0, 0, 0, 0,
	0, 495, 496, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	630, 0, 469, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 365, 0, 0, 0, 485, 0, 422, 402,
	658, 0, 0, 420, 370, 454, 410, 460, 441, 468,
	416, 411, 294, 442, 333, 383, 306, 308, 328, 335,
	337, 340, 341, 392, 393, 405, 427, 444, 445, 446,
	332, 316, 421, 317, 351, 318, 295, 324, 322, 325,
	429, 326, 297, 406, 450, 0, 346, 417, 378, 298,
	377, 407, 449, 448, 307, 476, 482, 483, 572, 0,
	488, 659, 660, 661, 497, 0, 412, 502, 503, 504,
	506, 507, 508, 509, 573, 590, 557, 527, 490, 581,
	524, 528, 529, 356, 593, 0, 0, 0, 481, 366,
	367, 0, 338, 379, 415, 344, 291, 292, 654, 329,
	398, 595, 628, 629, 520, 0, 582, 521, 530, 321,
	554, 566, 565, 394, 480, 0, 577, 580, 510, 653,
	0, 574, 589, 657, 588, 650, 404, 0, 426, 586,
	533, 0, 578, 552, 0, 579, 548, 583, 0, 522,
	0, 434, 462, 474, 491, 494, 523, 608, 609, 610,
	296, 493, 612, 613, 614, 615, 616, 617, 618, 611,
	465, 555, 532, 558, 473, 535, 534, 0, 0, 569,
	489, 570, 571, 388, 389, 390, 391, 348, 596, 314,
	492, 414, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 559, 662, 0, 619, 620, 0,
	0, 486, 487, 343, 350, 505, 352, 313, 403, 345,
	471, 360, 0, 498, 563, 499, 622, 625, 623, 624,
	395, 355, 357, 430, 361, 371, 418, 470, 401, 423,
	311, 461, 432, 376, 549, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 603, 602, 601, 600, 599, 598, 597,
	0, 0, 546, 447, 323, 285, 319, 320, 327, 651,
	648, 452, 652, 0, 293, 526, 369, 0, 413, 342,
	591, 592, 0, 643, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 594, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 477, 478, 479, 501, 0, 463, 525, 649, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 621, 0,
	631, 632, 634, 636, 635, 638, 437, 438, 0, 640,
	641, 642, 639, 373, 424, 443, 431, 0, 655, 516,
	517, 656, 627, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 0, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2608, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 630, 0, 469,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 365,
	0, 0, 0, 485, 0, 422, 402, 658, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 659, 660,
	661, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 654, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 0, 577, 580, 510, 653, 0, 574, 589,
	657, 588, 650, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 662, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 651, 648, 452, 652,
	0, 293, 526, 369, 0, 413, 342, 591, 592, 0,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 649, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 621, 0, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 0, 655, 516, 517, 656, 627,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 0,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 2606,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 417, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 0, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 2376, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 513, 633, 515, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 451, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 0, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 1918, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 459, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 348, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	2049, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 440, 459, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 1553, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 451, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 1954, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	0, 469, 0, 0, 1582, 0, 0, 0, 439, 0,
	0, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 0, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 328, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 0, 469, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 416, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 618, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627, 400,
	0, 0, 531, 564, 553, 637, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	368, 568, 550, 560, 551, 536, 537, 538, 545, 347,
	539, 540, 541, 511, 542, 512, 543, 544, 0, 567,
	518, 433, 384, 585, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 513, 633, 515, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	440, 459, 310, 428, 472, 315, 436, 451, 305, 399,
	425, 0, 0, 301, 457, 435, 381, 358, 359, 300,
	0, 419, 334, 349, 331, 397, 0, 456, 484, 330,
	475, 0, 467, 303, 0, 466, 396, 453, 458, 382,
	375, 0, 302, 455, 380, 374, 362, 339, 500, 363,
	364, 353, 408, 372, 409, 354, 386, 385, 387, 0,
	0, 0, 0, 0, 495, 496, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 679, 630, 0, 469, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 365, 0, 0, 0, 485,
	0, 422, 402, 658, 0, 0, 420, 370, 454, 410,
	460, 441, 468, 416, 411, 294, 442, 333, 383, 306,
	308, 328, 335, 337, 340, 341, 392, 393, 405, 427,
	444, 445, 446, 332, 316, 421, 317, 351, 318, 295,
	324, 322, 325, 429, 326, 297, 406, 450, 0, 346,
	417, 378, 298, 377, 407, 449, 448, 307, 476, 482,
	483, 572, 0, 488, 659, 660, 661, 497, 0, 412,
	502, 503, 504, 506, 507, 508, 509, 573, 590, 557,
	527, 490, 581, 524, 528, 529, 356, 593, 0, 0,
	0, 481, 366, 367, 0, 338, 379, 415, 344, 291,
	292, 654, 329, 398, 595, 628, 629, 520, 0, 582,
	521, 530, 321, 554, 566, 565, 394, 480, 0, 577,
	580, 510, 653, 0, 574, 589, 657, 588, 650, 404,
	0, 426, 586, 533, 0, 578, 552, 0, 579, 548,
	583, 0, 522, 0, 434, 462, 474, 491, 494, 523,
	608, 609, 610, 296, 493, 612, 613, 614, 615, 616,
	617, 618, 611, 465, 555, 532, 558, 473, 535, 534,
	0, 0, 569, 489, 570, 571, 388, 389, 390, 391,
	348, 596, 314, 492, 414, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 562, 559, 662, 0,
	619, 620, 0, 0, 486, 487, 343, 350, 505, 352,
	313, 403, 345, 471, 360, 0, 498, 563, 499, 622,
	625, 623, 624, 395, 355, 357, 430, 361, 371, 418,
	470, 401, 423, 311, 461, 432, 376, 549, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 603, 602, 601, 600,
	599, 598, 597, 0, 0, 546, 447, 323, 285, 319,
	320, 327, 651, 648, 452, 652, 0, 293, 526, 369,
	0, 413, 342, 591, 592, 0, 643, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 594, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 477, 478, 479, 501, 0, 463,
	525, 649, 0, 0, 0, 0, 0, 0, 0, 575,
	587, 621, 0, 631, 632, 634, 636, 635, 638, 437,
	438, 0, 640, 641, 642, 639, 373, 424, 443, 431,
	0, 655, 516, 517, 656, 627, 400, 0, 0, 531,
	564, 553, 637, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 368, 568, 550,
	560, 551, 536, 537, 538, 545, 347, 539, 540, 541,
	511, 542, 512, 543, 544, 0, 567, 518, 433, 384,
	585, 584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 513, 633, 515, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 440, 459, 310,
	428, 472, 315, 436, 451, 305, 399, 425, 0, 0,
	301, 457, 435, 381, 358, 359, 300, 0, 419, 334,
	349, 331, 397, 0, 456, 484, 330, 475, 0, 467,
	303, 0, 466, 396, 453, 458, 382, 375, 0, 302,
	455, 380, 374, 362, 339, 500, 363, 364, 353, 408,
	372, 409, 354, 386, 385, 387, 0, 0, 0, 0,
	0, 495, 496, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	630, 0, 469, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 365, 0, 0, 0, 485, 0, 422, 402,
	658, 0, 0, 420, 370, 454, 410, 460, 441, 468,
	416, 411, 294, 442, 333, 383, 306, 308, 328, 335,
	337, 340, 341, 392, 393, 405, 427, 444, 445, 446,
	332, 316, 421, 317, 351, 318, 295, 324, 322, 325,
	429, 326, 297, 406, 450, 0, 346, 417, 378, 298,
	377, 407, 449, 448, 307, 476, 482, 483, 572, 0,
	488, 659, 660, 661, 497, 0, 412, 502, 503, 504,
	506, 507, 508, 509, 573, 590, 557, 527, 490, 581,
	524, 528, 529, 356, 593, 0, 0, 0, 481, 366,
	367, 0, 338, 379, 415, 344, 291, 292, 654, 329,
	398, 595, 628, 629, 520, 0, 582, 521, 530, 321,
	554, 566, 565, 394, 480, 0, 577, 580, 510, 653,
	0, 574, 589, 657, 588, 650, 404, 0, 426, 586,
	533, 0, 578, 552, 0, 579, 548, 583, 0, 522,
	0, 434, 462, 474, 491, 494, 523, 608, 609, 610,
	296, 493, 612, 613, 614, 615, 616, 617, 618, 611,
	465, 555, 532, 558, 473, 535, 534, 0, 0, 569,
	489, 570, 571, 388, 389, 390, 391, 348, 596, 314,
	492, 414, 0, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 559, 662, 0, 619, 620, 0,
	0, 486, 487, 343, 350, 505, 352, 313, 403, 345,
	471, 360, 0, 498, 563, 499, 622, 625, 623, 624,
	395, 355, 357, 430, 361, 371, 418, 470, 401, 423,
	311, 461, 432, 376, 549, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 603, 602, 601, 600, 599, 598, 597,
	978, 0, 546, 447, 323, 285, 319, 320, 327, 651,
	648, 452, 652, 0, 293, 526, 369, 0, 413, 342,
	591, 592, 0, 643, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 594, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 477, 478, 479, 501, 0, 463, 525, 649, 0,
	0, 0, 0, 0, 0, 0, 575, 587, 621, 0,
	631, 632, 634, 636, 635, 638, 437, 438, 0, 640,
	641, 642, 639, 373, 424, 443, 431, 0, 655, 516,
	517, 656, 627, 400, 0, 0, 531, 564, 553, 637,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 368, 568, 550, 560, 551, 536,
	537, 538, 545, 347, 539, 540, 541, 511, 542, 512,
	543, 544, 0, 567, 518, 433, 384, 585, 584, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 513, 633,
	515, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 440, 459, 310, 428, 472, 315,
	436, 451, 305, 399, 425, 0, 0, 301, 457, 435,
	381, 358, 359, 300, 0, 419, 334, 349, 331, 397,
	0, 456, 484, 330, 475, 0, 467, 303, 0, 466,
	396, 453, 458, 382, 375, 0, 302, 455, 380, 374,
	362, 339, 500, 363, 364, 353, 408, 372, 409, 354,
	386, 385, 387, 0, 0, 0, 0, 0, 495, 496,
	0, 0, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 630, 0, 469,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 365,
	0, 0, 0, 485, 0, 422, 402, 658, 0, 0,
	420, 370, 454, 410, 460, 441, 468, 416, 411, 294,
	442, 333, 383, 306, 308, 328, 335, 337, 340, 341,
	392, 393, 405, 427, 444, 445, 446, 332, 316, 421,
	317, 351, 318, 295, 324, 322, 325, 429, 326, 297,
	406, 450, 0, 346, 417, 378, 298, 377, 407, 449,
	448, 307, 476, 482, 483, 572, 0, 488, 659, 660,
	661, 497, 0, 412, 502, 503, 504, 506, 507, 508,
	509, 573, 590, 557, 527, 490, 581, 524, 528, 529,
	356, 593, 0, 0, 0, 481, 366, 367, 0, 338,
	379, 415, 344, 291, 292, 654, 329, 398, 595, 628,
	629, 520, 0, 582, 521, 530, 321, 554, 566, 565,
	394, 480, 0, 577, 580, 510, 653, 0, 574, 589,
	657, 588, 650, 404, 0, 426, 586, 533, 0, 578,
	552, 0, 579, 548, 583, 0, 522, 0, 434, 462,
	474, 491, 494, 523, 608, 609, 610, 296, 493, 612,
	613, 614, 615, 616, 617, 618, 611, 465, 555, 532,
	558, 473, 535, 534, 0, 0, 569, 489, 570, 571,
	388, 389, 390, 391, 348, 596, 314, 492, 414, 0,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	562, 559, 662, 0, 619, 620, 0, 0, 486, 487,
	343, 350, 505, 352, 313, 403, 345, 471, 360, 0,
	498, 563, 499, 622, 625, 623, 624, 395, 355, 357,
	430, 361, 371, 418, 470, 401, 423, 311, 461, 432,
	376, 549, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	603, 602, 601, 600, 599, 598, 597, 0, 0, 546,
	447, 323, 285, 319, 320, 327, 651, 648, 452, 652,
	0, 293, 526, 369, 0, 413, 342, 591, 592, 0,
	643, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 594, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 477, 478,
	479, 501, 0, 463, 525, 649, 0, 0, 0, 0,
	0, 0, 0, 575, 587, 621, 0, 631, 632, 634,
	636, 635, 638, 437, 438, 0, 640, 641, 642, 639,
	373, 424, 443, 431, 0, 655, 516, 517, 656, 627,
	400, 0, 0, 531, 564, 553, 637, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 368, 568, 550, 560, 551, 536, 537, 538, 545,
	347, 539, 540, 541, 511, 542, 512, 543, 544, 0,
	567, 518, 433, 384, 585, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 513, 633, 515, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 440, 459, 310, 428, 472, 315, 436, 451, 305,
	399, 425, 0, 0, 301, 457, 435, 381, 358, 359,
	300, 0, 419, 334, 349, 331, 397, 0, 456, 484,
	330, 475, 0, 467, 303, 0, 466, 396, 453, 458,
	382, 375, 0, 302, 455, 380, 374, 362, 339, 500,
	363, 364, 353, 408, 372, 409, 354, 386, 385, 387,
	0, 0, 0, 0, 0, 495, 496, 0, 0, 644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 630, 0, 469, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 365, 0, 0, 0,
	485, 0, 422, 402, 658, 0, 0, 420, 370, 454,
	410, 460, 441, 468, 416, 411, 294, 442, 333, 383,
	306, 308, 328, 335, 337, 340, 341, 392, 393, 405,
	427, 444, 445, 446, 332, 316, 421, 317, 351, 318,
	295, 324, 322, 325, 429, 326, 297, 406, 450, 0,
	346, 3172, 378, 298, 377, 407, 449, 448, 307, 476,
	482, 483, 572, 0, 488, 659, 660, 661, 497, 0,
	412, 502, 503, 504, 506, 507, 508, 509, 573, 590,
	557, 527, 490, 581, 524, 528, 529, 356, 593, 0,
	0, 0, 481, 366, 367, 0, 338, 379, 415, 344,
	291, 292, 654, 329, 398, 595, 628, 629, 520, 0,
	582, 521, 530, 321, 554, 566, 565, 394, 480, 0,
	577, 580, 510, 653, 0, 574, 589, 657, 588, 650,
	404, 0, 426, 586, 533, 0, 578, 552, 0, 579,
	548, 583, 0, 522, 0, 434, 462, 474, 491, 494,
	523, 608, 609, 610, 296, 493, 612, 613, 614, 615,
	616, 617, 618, 611, 465, 555, 532, 558, 473, 535,
	534, 0, 0, 569, 489, 570, 571, 388, 389, 390,
	391, 348, 596, 314, 492, 414, 0, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 561, 562, 559, 662,
	0, 619, 620, 0, 0, 486, 487, 343, 350, 505,
	352, 313, 403, 345, 471, 360, 0, 498, 563, 499,
	622, 625, 623, 624, 395, 355, 357, 430, 361, 371,
	418, 470, 401, 423, 311, 461, 432, 376, 549, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 603, 602, 601,
	600, 599, 598, 597, 0, 0, 546, 447, 323, 285,
	319, 320, 327, 651, 648, 452, 652, 0, 293, 526,
	369, 0, 413, 342, 591, 592, 0, 643, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 594, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 477, 478, 479, 501, 0,
	463, 525, 649, 0, 0, 0, 0, 0, 0, 0,
	575, 587, 621, 0, 631, 632, 634, 636, 635, 638,
	437, 438, 0, 640, 641, 642, 639, 373, 424, 443,
	431, 0, 655, 516, 517, 656, 627, 400, 0, 0,
	531, 564, 553, 637, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 368, 568,
	550, 560, 551, 536, 537, 538, 545, 347, 539, 540,
	541, 511, 542, 512, 543, 544, 0, 567, 518, 433,
	384, 585, 584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 513, 633, 515, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 440, 459,
	310, 428, 472, 315, 436, 1904, 305, 399, 425, 0,
	0, 301, 457, 435, 381, 358, 359, 300, 0, 419,
	334, 349, 331, 397, 0, 456, 484, 330, 475, 0,
	467, 303, 0, 466, 396, 453, 458, 382, 375, 0,
	302, 455, 380, 374, 362, 339, 500, 363, 364, 353,
	408, 372, 409, 354, 386, 385, 387, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 644, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	0, 630, 0, 469, 0, 0, 0, 0, 0, 0,
	439, 0, 0, 365, 0, 0, 0, 485, 0, 422,
	402, 658, 0, 0, 420, 370, 454, 410, 460, 441,
	468, 416, 411, 294, 442, 333, 383, 306, 308, 328,
	335, 337, 340, 341, 392, 393, 405, 427, 444, 445,
	446, 332, 316, 421, 317, 351, 318, 295, 324, 322,
	325, 429, 326, 297, 406, 450, 0, 346, 417, 378,
	298, 377, 407, 449, 448, 307, 476, 482, 483, 572,
	0, 488, 659, 660, 661, 497, 0, 412, 502, 503,
	504, 506, 507, 508, 509, 573, 590, 557, 527, 490,
	581, 524, 528, 529, 356, 593, 0, 0, 0, 481,
	366, 367, 0, 338, 379, 415, 344, 291, 292, 654,
	329, 398, 595, 628, 629, 520, 0, 582, 521, 530,
	321, 554, 566, 565, 394, 480, 0, 577, 580, 510,
	653, 0, 574, 589, 657, 588, 650, 404, 0, 426,
	586, 533, 0, 578, 552, 0, 579, 548, 583, 0,
	522, 0, 434, 462, 474, 491, 494, 523, 608, 609,
	610, 296, 493, 612, 613, 614, 615, 616, 617, 618,
	611, 465, 555, 532, 558, 473, 535, 534, 0, 0,
	569, 489, 570, 571, 388, 389, 390, 391, 348, 596,
	314, 492, 414, 0, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 561, 562, 559, 662, 0, 619, 620,
	0, 0, 486, 487, 343, 350, 505, 352, 313, 403,
	345, 471, 360, 0, 498, 563, 499, 622, 625, 623,
	624, 395, 355, 357, 430, 361, 371, 418, 470, 401,
	423, 311, 461, 432, 376, 549, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 603, 602, 601, 600, 599, 598,
	597, 0, 0, 546, 447, 323, 285, 319, 320, 327,
	651, 648, 452, 652, 0, 293, 526, 369, 0, 413,
	342, 591, 592, 0, 643, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 594,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 477, 478, 479, 501, 0, 463, 525, 649,
	0, 0, 0, 0, 0, 0, 0, 575, 587, 621,
	0, 631, 632, 634, 636, 635, 638, 437, 438, 0,
	640, 641, 642, 639, 373, 424, 443, 431, 0, 655,
	516, 517, 656, 627, 400, 0, 0, 531, 564, 553,
	637, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 368, 568, 550, 560, 551,
	536, 537, 538, 545, 347, 539, 540, 541, 511, 542,
	512, 543, 544, 0, 567, 518, 433, 384, 585, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 513,
	633, 515, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 440, 1532, 310, 428, 472,
	315, 436, 451, 305, 399, 425, 0, 0, 301, 457,
	435, 381, 358, 359, 300, 0, 419, 334, 349, 331,
	397, 0, 456, 484, 330, 475, 0, 467, 303, 0,
	466, 396, 453, 458, 382, 375, 0, 302, 455, 380,
	374, 362, 339, 500, 363, 364, 353, 408, 372, 409,
	354, 386, 385, 387, 0, 0, 0, 0, 0, 495,
	496, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 630, 0,
	469, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	365, 0, 0, 0, 485, 0, 422, 402, 658, 0,
	0, 420, 370, 454, 410, 460, 441, 468, 416, 411,
	294, 442, 333, 383, 306, 308, 328, 335, 337, 340,
	341, 392, 393, 405, 427, 444, 445, 446, 332, 316,
	421, 317, 351, 318, 295, 324, 322, 325, 429, 326,
	297, 406, 450, 0, 346, 417, 378, 298, 377, 407,
	449, 448, 307, 476, 482, 483, 572, 0, 488, 659,
	660, 661, 497, 0, 412, 502, 503, 504, 506, 507,
	508, 509, 573, 590, 557, 527, 490, 581, 524, 528,
	529, 356, 593, 0, 0, 0, 481, 366, 367, 0,
	338, 379, 415, 344, 291, 292, 654, 329, 398, 595,
	628, 629, 520, 0, 582, 521, 530, 321, 554, 566,
	565, 394, 480, 0, 577, 580, 510, 653, 0, 574,
	589, 657, 588, 650, 404, 0, 426, 586, 533, 0,
	578, 552, 0, 579, 548, 583, 0, 522, 0, 434,
	462, 474, 491, 494, 523, 608, 609, 610, 296, 493,
	612, 613, 614, 615, 616, 617, 618, 611, 465, 555,
	532, 558, 473, 535, 534, 0, 0, 569, 489, 570,
	571, 388, 389, 390, 391, 348, 596, 314, 492, 414,
	0, 556, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 562, 559, 662, 0, 619, 620, 0, 0, 486,
	487, 343, 350, 505, 352, 313, 403, 345, 471, 360,
	0, 498, 563, 499, 622, 625, 623, 624, 395, 355,
	357, 430, 361, 371, 418, 470, 401, 423, 311, 461,
	432, 376, 549, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 603, 602, 601, 600, 599, 598, 597, 0, 0,
	546, 447, 323, 285, 319, 320, 327, 651, 648, 452,
	652, 0, 293, 526, 369, 0, 413, 342, 591, 592,
	0, 643, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 594, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 477,
	478, 479, 501, 0, 463, 525, 649, 0, 0, 0,
	0, 0, 0, 0, 575, 587, 621, 0, 631, 632,
	634, 636, 635, 638, 437, 438, 0, 640, 641, 642,
	639, 373, 424, 443, 431, 0, 655, 516, 517, 656,
	627, 400, 0, 0, 531, 564, 553, 637, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 368, 568, 550, 560, 551, 536, 537, 538,
	545, 347, 539, 540, 541, 511, 542, 512, 543, 544,
	0, 567, 518, 433, 384, 585, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 513, 633, 515, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 440, 1530, 310, 428, 472, 315, 436, 451,
	305, 399, 425, 0, 0, 301, 457, 435, 381, 358,
	359, 300, 0, 419, 334, 349, 331, 397, 0, 456,
	484, 330, 475, 0, 467, 303, 0, 466, 396, 453,
	458, 382, 375, 0, 302, 455, 380, 374, 362, 339,
	500, 363, 364, 353, 408, 372, 409, 354, 386, 385,
	387, 0, 0, 0, 0, 0, 495, 496, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 0, 630, 0, 469, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 365, 0, 0,
	0, 485, 0, 422, 402, 658, 0, 0, 420, 370,
	454, 410, 460, 441, 468, 416, 411, 294, 442, 333,
	383, 306, 308, 328, 335, 337, 340, 341, 392, 393,
	405, 427, 444, 445, 446, 332, 316, 421, 317, 351,
	318, 295, 324, 322, 325, 429, 326, 297, 406, 450,
	0, 346, 417, 378, 298, 377, 407, 449, 448, 307,
	476, 482, 483, 572, 0, 488, 659, 660, 661, 497,
	0, 412, 502, 503, 504, 506, 507, 508, 509, 573,
	590, 557, 527, 490, 581, 524, 528, 529, 356, 593,
	0, 0, 0, 481, 366, 367, 0, 338, 379, 415,
	344, 291, 292, 654, 329, 398, 595, 628, 629, 520,
	0, 582, 521, 530, 321, 554, 566, 565, 394, 480,
	0, 577, 580, 510, 653, 0, 574, 589, 657, 588,
	650, 404, 0, 426, 586, 533, 0, 578, 552, 0,
	579, 548, 583, 0, 522, 0, 434, 462, 474, 491,
	494, 523, 608, 609, 610, 296, 493, 612, 613, 614,
	615, 616, 617, 618, 611, 465, 555, 532, 558, 473,
	535, 534, 0, 0, 569, 489, 570, 571, 388, 389,
	390, 391, 348, 596, 314, 492, 414, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 562, 559,
	662, 0, 619, 620, 0, 0, 486, 487, 343, 350,
	505, 352, 313, 403, 345, 471, 360, 0, 498, 563,
	499, 622, 625, 623, 624, 395, 355, 357, 430, 361,
	371, 418, 470, 401, 423, 311, 461, 432, 376, 549,
	576, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 603, 602,
	601, 600, 599, 598, 597, 0, 0, 546, 447, 323,
	285, 319, 320, 327, 651, 648, 452, 652, 0, 293,
	526, 369, 0, 413, 342, 591, 592, 0, 643, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 594, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 477, 478, 479, 501,
	0, 463, 525, 649, 0, 0, 0, 0, 0, 0,
	0, 575, 587, 621, 0, 631, 632, 634, 636, 635,
	638, 437, 438, 0, 640, 641, 642, 639, 373, 424,
	443, 431, 0, 655, 516, 517, 656, 627, 400, 0,
	0, 531, 564, 553, 637, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 368,
	568, 550, 560, 551, 536, 537, 538, 545, 347, 539,
	540, 541, 511, 542, 512, 543, 544, 0, 567, 518,
	433, 384, 585, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 513, 633, 515, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 440,
	459, 310, 428, 472, 315, 436, 1409, 305, 399, 425,
	0, 0, 301, 457, 435, 381, 358, 359, 300, 0,
	419, 334, 349, 331, 397, 0, 456, 484, 330, 475,
	0, 467, 303, 0, 466, 396, 453, 458, 382, 375,
	0, 302, 455, 380, 374, 362, 339, 500, 363, 364,
	353, 408, 372, 409, 354, 386, 385, 387, 0, 0,
	0, 0, 0, 495, 496, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 630, 0, 469, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 365, 0, 0, 0, 485, 0,
	422, 402, 658, 0, 0, 420, 370, 454, 410, 460,
	441, 468, 416, 411, 294, 442, 333, 383, 306, 308,
	328, 335, 337, 340, 341, 392, 393, 405, 427, 444,
	445, 446, 332, 316, 421, 317, 351, 318, 295, 324,
	322, 325, 429, 326, 297, 406, 450, 0, 346, 417,
	378, 298, 377, 407, 449, 448, 307, 476, 482, 483,
	572, 0, 488, 659, 660, 661, 497, 0, 412, 502,
	503, 504, 506, 507, 508, 509, 573, 590, 557, 527,
	490, 581, 524, 528, 529, 356, 593, 0, 0, 0,
	481, 366, 367, 0, 338, 379, 415, 344, 291, 292,
	654, 329, 398, 595, 628, 629, 520, 0, 582, 521,
	530, 321, 554, 566, 565, 394, 480, 0, 577, 580,
	510, 653, 0, 574, 589, 657, 588, 650, 404, 0,
	426, 586, 533, 0, 578, 552, 0, 579, 548, 583,
	0, 522, 0, 434, 462, 474, 491, 494, 523, 608,
	609, 610, 296, 493, 612, 613, 614, 615, 616, 617,
	618, 611, 465, 555, 532, 558, 473, 535, 534, 0,
	0, 569, 489, 570, 571, 388, 389, 390, 391, 348,
	596, 314, 492, 414, 0, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 561, 562, 559, 662, 0, 619,
	620, 0, 0, 486, 487, 343, 350, 505, 352, 313,
	403, 345, 471, 360, 0, 498, 563, 499, 622, 625,
	623, 624, 395, 355, 357, 430, 361, 371, 418, 470,
	401, 423, 311, 461, 432, 376, 549, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 603, 602, 601, 600, 599,
	598, 597, 0, 0, 546, 447, 323, 285, 319, 320,
	327, 651, 648, 452, 652, 0, 293, 526, 369, 0,
	413, 342, 591, 592, 0, 643, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	594, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 477, 478, 479, 501, 0, 463, 525,
	649, 0, 0, 0, 0, 0, 0, 0, 575, 587,
	621, 0, 631, 632, 634, 636, 635, 638, 437, 438,
	0, 640, 641, 642, 639, 373, 424, 443, 431, 0,
	655, 516, 517, 656, 627, 400, 0, 0, 531, 564,
	553, 637, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 368, 568, 550, 560,
	551, 536, 537, 538, 545, 347, 539, 540, 541, 511,
	542, 512, 543, 544, 0, 567, 518, 433, 384, 585,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	513, 633, 515, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 440, 459, 310, 428,
	472, 315, 436, 451, 305, 399, 425, 0, 0, 301,
	457, 435, 381, 358, 359, 300, 0, 419, 334, 349,
	331, 397, 0, 456, 484, 330, 475, 0, 467, 303,
	0, 466, 396, 453, 458, 382, 375, 0, 302, 455,
	380, 374, 362, 339, 500, 363, 364, 353, 408, 372,
	409, 354, 386, 385, 387, 0, 0, 0, 0, 0,
	495, 496, 0, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 630,
	0, 469, 0, 0, 0, 0, 0, 0, 439, 0,
	0, 365, 0, 0, 0, 485, 0, 422, 402, 658,
	0, 0, 420, 370, 454, 410, 460, 441, 468, 416,
	411, 294, 442, 333, 383, 306, 308, 747, 335, 337,
	340, 341, 392, 393, 405, 427, 444, 445, 446, 332,
	316, 421, 317, 351, 318, 295, 324, 322, 325, 429,
	326, 297, 406, 450, 0, 346, 417, 378, 298, 377,
	407, 449, 448, 307, 476, 482, 483, 572, 0, 488,
	659, 660, 661, 497, 0, 412, 502, 503, 504, 506,
	507, 508, 509, 573, 590, 557, 527, 490, 581, 524,
	528, 529, 356, 593, 0, 0, 0, 481, 366, 367,
	0, 338, 379, 415, 344, 291, 292, 654, 329, 398,
	595, 628, 629, 520, 0, 582, 521, 530, 321, 554,
	566, 565, 394, 480, 0, 577, 580, 510, 653, 0,
	574, 589, 657, 588, 650, 404, 0, 426, 586, 533,
	0, 578, 552, 0, 579, 548, 583, 0, 522, 0,
	434, 462, 474, 491, 494, 523, 608, 609, 610, 296,
	493, 612, 613, 614, 615, 616, 617, 618, 611, 465,
	555, 532, 558, 473, 535, 534, 0, 0, 569, 489,
	570, 571, 388, 389, 390, 391, 348, 596, 314, 492,
	414, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 561, 562, 559, 662, 0, 619, 620, 0, 0,
	486, 487, 343, 350, 505, 352, 313, 403, 345, 471,
	360, 0, 498, 563, 499, 622, 625, 623, 624, 395,
	355, 357, 430, 361, 371, 418, 470, 401, 423, 311,
	461, 432, 376, 549, 576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 603, 602, 601, 600, 599, 598, 597, 0,
	0, 546, 447, 323, 285, 319, 320, 327, 651, 648,
	452, 652, 0, 293, 526, 369, 0, 413, 342, 591,
	592, 0, 643, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 594, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	477, 478, 479, 501, 0, 463, 525, 649, 0, 0,
	0, 0, 0, 0, 0, 575, 587, 621, 0, 631,
	632, 634, 636, 635, 638, 437, 438, 0, 640, 641,
	642, 639, 373, 424, 443, 431, 0, 655, 516, 517,
	656, 627, 400, 0, 0, 531, 564, 553, 637, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 368, 568, 550, 560, 551, 536, 537,
	538, 545, 347, 539, 540, 541, 511, 542, 512, 543,
	544, 0, 567, 518, 433, 384, 585, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 513, 633, 515,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 440, 459, 310, 428, 472, 315, 436,
	451, 305, 399, 425, 0, 0, 301, 457, 435, 381,
	358, 359, 300, 0, 419, 334, 349, 331, 397, 0,
	456, 484, 330, 475, 0, 467, 303, 0, 466, 396,
	453, 458, 382, 375, 0, 302, 455, 380, 374, 362,
	339, 500, 363, 364, 353, 408, 372, 409, 354, 386,
	385, 387, 0, 0, 0, 0, 0, 495, 496, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 626, 0, 0, 630, 0, 469, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 365, 0,
	0, 0, 485, 0, 422, 402, 658, 0, 0, 420,
	370, 454, 410, 460, 441, 468, 704, 411, 294, 442,
	333, 383, 306, 308, 328, 335, 337, 340, 341, 392,
	393, 405, 427, 444, 445, 446, 332, 316, 421, 317,
	351, 318, 295, 324, 322, 325, 429, 326, 297, 406,
	450, 0, 346, 417, 378, 298, 377, 407, 449, 448,
	307, 476, 482, 483, 572, 0, 488, 659, 660, 661,
	497, 0, 412, 502, 503, 504, 506, 507, 508, 509,
	573, 590, 557, 527, 490, 581, 524, 528, 529, 356,
	593, 0, 0, 0, 481, 366, 367, 0, 338, 379,
	415, 344, 291, 292, 654, 329, 398, 595, 628, 629,
	520, 0, 582, 521, 530, 321, 554, 566, 565, 394,
	480, 0, 577, 580, 510, 653, 0, 574, 589, 657,
	588, 650, 404, 0, 426, 586, 533, 0, 578, 552,
	0, 579, 548, 583, 0, 522, 0, 434, 462, 474,
	491, 494, 523, 608, 609, 610, 296, 493, 612, 613,
	614, 615, 616, 617, 705, 611, 465, 555, 532, 558,
	473, 535, 534, 0, 0, 569, 489, 570, 571, 388,
	389, 390, 391, 348, 596, 314, 492, 414, 0, 556,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	559, 662, 0, 619, 620, 0, 0, 486, 487, 343,
	350, 505, 352, 313, 403, 345, 471, 360, 0, 498,
	563, 499, 622, 625, 623, 624, 395, 355, 357, 430,
	361, 371, 418, 470, 401, 423, 311, 461, 432, 376,
	549, 576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 603,
	602, 601, 600, 599, 598, 597, 0, 0, 546, 447,
	323, 285, 319, 320, 327, 651, 648, 452, 652, 0,
	293, 526, 369, 0, 413, 342, 591, 592, 0, 643,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 594, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 477, 478, 479,
	501, 0, 463, 525, 649, 0, 0, 0, 0, 0,
	0, 0, 575, 587, 621, 0, 631, 632, 634, 636,
	635, 638, 437, 438, 0, 640, 641, 642, 639, 373,
	424, 443, 431, 0, 655, 516, 517, 656, 627,
}

var yyPact = [...]int{
	481, -1000, -1000, -1000, -337, 15900, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50330, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 465, 50330, -335, 31857, 48419, -1000, -1000, 2667, -1000,
	49056, 17831, 50330, 540, 538, 50330, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 976, -1000, 54789, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 874, 5414, 54152, 12051,
	-219, -1000, 1702, -36, 2568, 511, -202, -203, 1142, 1152,
	1219, 1109, 50330, 1114, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 235, 998, 49693,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4096, 290, 973, 998, 22935, 97,
	89, 1702, 443, -90, 241, -1000, 1562, 4112, 196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12051, 12051, 15900, -367, 15900, 12051, 50330, 50330, -1000, -1000,
	-1000, -1000, -335, 49056, 874, 5414, 12051, 2568, 511, -202,
	-203, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -90, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5067, -1000, 1646, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2356, 3138, 1639, 2565, 810, 48419, 50330,
	-1000, 145, 810, -1000, -1000, -1000, 1702, 3599, -1000, 50330,
	50330, 215, 1926, -1000, 608, 587, 539, 399, 375, 1637,
	-1000, -1000, -1000, -1000, -1000, -1000, 724, 3556, -1000, 50330,
	50330, 3165, 50330, -1000, 2303, 767, -1000, 5457, 3326, 1315,
	980, 3186, -1000, -1000, 3135, -1000, 385, 771, 322, 741,
	459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000,
	3362, -1000, -1000, 361, -1000, -1000, 367, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, -1000, -1000, -31, -1000, -1000,
	1206, 2043, 12051, 2136, -1000, 4280, 1685, -1000, -1000, -1000,
	7565, 14611, 14611, 14611, 14611, 50330, -1000, -1000, 2934, 12051,
	3133, 3131, 3130, 3125, -1000, -1000, -1000, -1000, -1000, -1000,
	3124, 1625, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2045, -1000, -1000, -1000, 15251, -1000, 3121, 3118, 3117,
	3116, 3106, 3104, 3103, 3102, 3101, 3100, 3099, 3098, 3096,
	3095, 2790, 17184, 3093, 2560, 2558, 3083, 3077, 3063, 2557,
	3062, 3061, 3058, 2790, 2790, 3057, 3056, 3055, 3052, 3051,
	3046, 3045, 3041, 3040, 3039, 3038, 3037, 3035, 3034, 3013,
	3009, 3008, 3007, 3006, 3003, 3000, 2990, 2982, 2981, 2980,
	2978, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1476, -1000, 2977, 3566, 2855,
	-1000, 3427, 3425, 3423, 3421, -267, 2960, 2269, -1000, -1000,
	100, 3554, 50330, -290, 50330, 421, -103, -107, -109, -1000,
	-76, -1000, -1000, 1140, -1000, 1092, 53515, 941, -1000, -1000,
	50330, 871, 871, 871, 50330, 50330, 219, 861, 871, 871,
	871, 871, 871, 894, 871, 3462, 969, 960, 954, 948,
	871, -54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1922,
	1919, 3250, 1074, -1000, -1000, -1000, -1000, 1470, 50330, -1000,
	2909, 421, -315, 1722, 1722, 3537, 3537, 3459, 3428, 779,
	774, 732, 1722, 604, -1000, 1921, 1921, 1921, 1921, 1722,
	477, 798, 3465, 3465, 158, 1921, 51, 1722, 1722, 51,
	1722, 1722, -1000, 1912, 226, -273, -1000, -1000, -1000, -1000,
	1921, 1921, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3394,
	3392, 874, 874, 50330, 874, 206, 50330, 874, 874, 874,
	50330, 887, -322, 40, 52878, 52241, 2573, 2303, 765, 739,
	1475, 1850, -1000, 1794, 50330, 50330, 1794, 1794, 26124, 25487,
	-1000, 50330, -1000, 3566, 2855, 2770, 1814, 2767, 2855, -110,
	421, 874, 874, 874, 874, 874, 325, 874, 874, 874,
	874, 874, 50330, 50330, 47782, 874, 874, 874, 874, 10125,
	1562, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15900, 2013, 2128, 195, -9, -312,
	264, -1000, -1000, 50330, 3305, 328, -1000, -1000, -1000, 2883,
	-1000, 2891, 2891, 2891, 2891, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2891, 2891, 2908, 2959, -1000,
	-1000, 2888, 2888, 2888, 2883, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2892, 2892, 2899, 2899, 2892, 50330, -131, -1000, -1000, 12051,
	50330, 3313, 390, 2957, 810, -1000, -1000, 50330, 333, 431,
	3566, 3310, 3465, 3524, -1000, -1000, 1615, 2268, 2556, -1000,
	375, -1000, 598, 375, -1000, 570, 570, 1757, -1000, 1262,
	-1000, -1000, -1000, -1000, -1000, -1000, 50330, -31, 412, -1000,
	-1000, 2533, 2949, -1000, 672, 1305, 1382, -1000, 301, 5562,
	40775, 2303, 40775, 50330, -1000, -1000, -1000, -1000, -1000, -1000,
	76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 319, -1000, 12051, 12051, 12051,
	12051, 12051, -1000, 892, 13971, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14611, 14611, 14611, 14611, 14611, 14611, 14611, 14611,
	14611, 14611, 14611, 14611, 2933, 1903, 14611, 14611, 14611, 14611,
	28672, 1814, 3301, 1473, 308, 1685, 1685, 1685, 1685, 12051,
	-1000, 1934, 2043, 12051, 12051, 12051, 12051, 35042, 50330, -1000,
	-1000, 4512, 12051, 12051, 3737, 12051, 3389, 12051, 12051, 12051,
	2766, 6276, 50330, 12051, -1000, 2765, 2760, -1000, -1000, 2096,
	12051, -1000, -1000, 12051, -1000, -1000, 12051, 14611, 12051, -1000,
	12051, 12051, 12051, -1000, -1000, 2457, 3389, 3389, 3389, 1875,
	12051, 12051, 3389, 3389, 3389, 1862, 3389, 3389, 3389, 3389,
	3389, 3389, 3389, 3389, 3389, 3389, 3389, 2759, 2741, 2737,
	11411, 3465, -219, -1000, 9485, 3310, 3465, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -269, 2948, 50330,
	2555, 2553, -343, 180, 464, 50330, 1197, -1000, -1000, 50330,
	2266, 50330, 2265, 12, 1134, 1103, 1106, -1000, -1000, 50330,
	51604, -1000, 50330, 1987, 50330, 50330, 3358, -1000, 2947, 50330,
	871, 871, 871, -1000, 45871, 40775, 50330, 50330, 2303, 50330,
	50330, 50330, 871, 871, 871, 871, 50330, -1000, 3280, 40775,
	3266, 887, -1000, 50330, 1470, 3357, 50330, -1000, -1000, -1000,
	-1000, 3537, 14611, 14611, -1000, -1000, 12051, -1000, 224, 47145,
	1921, 1722, 1722, -1000, -1000, 50330, -1000, -1000, -1000, 1921,
	50330, 1921, 1921, 3537, 1921, -1000, -1000, -1000, 1722, 1722,
	-1000, -1000, 12051, -1000, -1000, 1921, 1921, -1000, -1000, 3537,
	50330, 67, 3537, 3537, 88, -1000, -1000, -1000, 1722, 50330,
	50330, 871, 50330, -1000, 50330, 50330, -1000, -1000, 50330, 50330,
	4547, 50330, 45871, 46508, 3387, -1000, 40775, 50330, 50330, 1456,
	-1000, 926, 38227, -1000, 50330, 1422, -1000, 23, -1000, 6,
	40, 1794, 40, 1794, 924, -1000, 666, 658, 24213, 571,
	40775, 6916, -1000, -1000, 1794, 1794, 6916, 6916, 1694, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1452, -1000, 240, 3465,
	-1000, -1000, -1000, -1000, -1000, 2262, -1000, 50330, 45871, 40775,
	2303, 50330, 874, 50330, 50330, 50330, 50330, 50330, -1000, 2936,
	1604, -1000, 3322, 50330, 50330, 50330, 50330, 1351, -1000, -1000,
	21016, 1593, -1000, -1000, 1961, -1000, 12051, 15900, -243, 12051,
	15900, 15900, 12051, 15900, -1000, 12051, 303, -1000, -1000, -1000,
	-1000, 2260, -1000, 2259, -1000, -1000, -1000, -1000, -1000, 2551,
	2551, -1000, 2253, -1000, -1000, -1000, -1000, 2250, -1000, -1000,
	2249, -1000, -1000, -1000, -1000, -161, 2735, 1206, -1000, 2548,
	3179, -220, -1000, 22298, 50330, 50330, 390, -354, 1918, 1914,
	1889, 3403, -1000, -220, -1000, 21657, 50330, 3465, -1000, -224,
	3310, 12051, 50330, -1000, 3426, -1000, -1000, 375, -1000, -1000,
	-1000, 570, 470, -1000, -1000, -1000, -1000, -1000, -1000, 1590,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	458, -96, -99, 1451, -1000, 50330, -1000, -1000, 301, 40775,
	42686, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 261, -1000,
	-1000, 184, -1000, 919, 270, 1752, -1000, -1000, 213, 211,
	222, 1013, 2043, -1000, 1971, 1971, 1990, -1000, 722, -1000,
	-1000, -1000, -1000, 2934, -1000, -1000, -1000, 2587, 2547, -1000,
	1845, 1845, 1567, 1567, 1567, 1567, 1567, 2087, 2087, -1000,
	-1000, -1000, 7565, 2933, 14611, 14611, 14611, 14611, 956, 956,
	3325, 2966, -1000, -1000, -1000, -1000, 12051, 172, 1938, -1000,
	12051, 2831, 1538, 2756, 1505, 1746, -1000, 2883, 12051, 1574,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2732, 2731, 2484, 3553, 2730, 12051, -1000, -1000, 1744, 1743,
	1742, -1000, 2242, 10771, -1000, -1000, -1000, 2727, 1558, 2726,
	-1000, -1000, -1000, 2724, 1739, 1307, 2723, 2423, 2722, 2719,
	2717, 2712, 1448, 12051, 12051, 12051, 12051, 2707, 1737, 1726,
	12051, 12051, 12051, 12051, 2703, 12051, 12051, 12051, 12051, 12051,
	12051, 12051, 12051, 12051, 12051, 50330, 152, 152, 152, 1445,
	1440, -1000, -1000, 1721, -1000, 2043, -1000, -1000, 3310, -1000,
	2932, 2239, 1430, -1000, -1000, -330, 2493, 50330, 50330, 176,
	50330, 2546, -291, 50330, -1000, -1000, 2545, -1000, -1000, -1000,
	1123, 1084, 1128, -1000, 50330, -1000, 2544, 3320, 3424, 902,
	50330, 1336, 2931, 50330, 50330, 50330, 309, -1000, -1000, 1335,
	-1000, 270, -42, 548, 1235, 3163, 3552, -134, 50330, 50330,
	50330, 50330, 3355, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45234, -1000, 2930, 1717, -1000, -1000, 1685, 1685, 2043,
	50330, 50330, 50330, 3162, 50330, 50330, 3537, 3537, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1921, 3537, 3537, 1446, 1722,
	1921, -1000, -1000, 1921, -354, -1000, 1921, -1000, -354, 1535,
	-354, 50330, -1000, -1000, -1000, 3350, 2909, 1423, -1000, -1000,
	-1000, 3521, 1502, 862, 862, 1064, 817, 3520, 19742, -1000,
	1747, 1290, 915, 3296, 379, -1000, 1747, -158, 827, 1747,
	1747, 1747, 1747, 1747, 1747, 1747, 718, 695, 1747, 1747,
	1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1150,
	1747, 1747, 1747, 1747, 1747, -1000, 1747, 2929, 532, -1000,
	-1000, -1000, -1000, -1000, -1000, 730, 684, 300, 3379, 417,
	-1000, 427, 1335, 324, 3376, 453, 50330, 50330, 3863, 1324,
	-1000, -1000, -1000, -1000, -1000, 29309, 29309, 23576, 29309, -1000,
	209, 1794, 40, 98, -1000, -1000, 1422, 6916, 1422, 6916,
	2237, -1000, -1000, 914, -1000, -1000, 1235, -1000, 50330, 50330,
	-1000, -1000, 2928, 1885, -1000, -1000, 17184, -1000, 6916, 6916,
	-1000, -1000, 31220, 50330, -1000, -34, -1000, -15, 3310, -1000,
	1225, -1000, -1000, 1420, 1235, 3178, 50330, 1225, 1225, 1225,
	-1000, -1000, 18468, 50330, 50330, -1000, -1000, -1000, -1000, 3537,
	10125, -1000, 38227, -1000, -1000, 44597, -1000, 43960, 1865, -1000,
	15900, 2062, 190, -1000, 260, -316, 189, 1984, 187, 2043,
	-1000, -1000, 2701, 2698, 1712, -1000, 1699, 2696, 1696, 1690,
	2234, -1000, 43, -1000, 3308, 1237, -1000, 2927, -1000, 1688,
	3247, -1000, 1413, -1000, 1882, 1686, -1000, -1000, -1000, 12051,
	43323, 12051, 1057, 1237, 1682, 3246, 1413, 3310, 2538, -1000,
	1411, -1000, 2364, 1534, 208, -1000, -1000, -1000, 50330, 874,
	2533, 1677, 42686, 1339, -1000, 913, 1524, 1523, -1000, 40775,
	354, 40775, -1000, 40775, -1000, -1000, 413, -1000, 50330, 3303,
	-1000, -1000, -1000, 2493, 1880, -352, 50330, -1000, -1000, -1000,
	-1000, -1000, 1667, -1000, 956, 956, 3325, 2782, -1000, 14611,
	-1000, 14611, 3265, -1000, 1848, -1000, 12051, 2028, 4976, 12051,
	4976, 3397, 27398, 35042, -121, 3317, 3216, 50330, -1000, -1000,
	12051, 12051, -1000, 3201, -1000, -1000, -1000, -1000, 12051, 12051,
	2209, -1000, 50330, -1000, -1000, -1000, -1000, 27398, -1000, 14611,
	-1000, -1000, -1000, -1000, 12051, 1362, 1362, 3185, 1659, 152,
	152, 152, 3141, 3128, 3119, 1657, 152, 3084, 3080, 3059,
	3019, 2987, 2923, 2914, 2800, 2774, 2686, 1656, -1000, 2922,
	-1000, -1000, 2078, 13331, 9485, -1000, -1000, 299, 1395, 2220,
	2526, 131, -1000, 1879, -1000, 2524, 50330, 50330, 1187, -1000,
	50330, 3551, -1000, -1000, -1000, -1000, 1082, -1000, 2521, -1000,
	227, 225, 2102, 332, 2688, 1394, -1000, -1000, 50330, -1000,
	-1000, -1000, 18468, 2909, 2919, 2909, 114, 1747, 664, 40775,
	736, -1000, 50330, 2065, 1857, 3177, 800, 3304, 50330, 2918,
	423, 2917, 2912, 3347, 527, 5211, 50330, 1329, -1000, 1499,
	4112, -1000, 50330, -1000, -1000, 50330, -1000, 2303, -1000, 1722,
	-1000, -1000, 3537, -1000, -1000, 12051, 12051, 3537, 1722, 1722,
	-1000, 1921, -1000, 50330, -1000, -354, 527, 5211, 3334, 4683,
	586, 2411, -1000, 50330, -1000, -1000, -1000, 939, -1000, 1080,
	871, 50330, 2019, 1080, 2009, 2911, -1000, -1000, 50330, 50330,
	50330, 50330, -1000, -1000, 50330, -1000, 50330, 50330, 50330, 50330,
	50330, 42049, -1000, 50330, 50330, -1000, 50330, 2008, 50330, 2007,
	3354, -1000, 1747, 1747, 1038, -1000, -1000, 625, -1000, 42049,
	2219, 2218, 2215, 2214, 2519, 2515, 2512, 1747, 1747, 2212,
	2510, 41412, 2504, 1297, 2201, 2189, 2188, 2174, 2503, 1040,
	-1000, 2502, 2155, 2154, 2146, 50330, 2910, 2402, 529, -1000,
	-1000, 2102, 114, 1747, 407, 50330, 1856, 1855, 664, 614,
	542, -44, 24850, -1000, -1000, -1000, 50330, 38227, 38227, 38227,
	38227, 38227, 38227, -1000, 3222, 3202, 3221, -1000, 3205, 3204,
	3214, 3212, 3065, 50330, 38227, 2909, -1000, 41412, -1000, -1000,
	-1000, 1814, 1655, 3718, 1054, 12051, 6916, -1000, -1000, 18,
	-14, -1000, -1000, -1000, -1000, 40775, 2501, 571, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3420, 50330, 50330, 846, 2687,
	1393, -1000, -1000, -1000, 5211, 2891, 2891, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2891, 2891, 2908, -1000,
	-1000, 2888, 2888, 2888, 2883, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2892, 2892, 2899, 2899, 2892,
	-1000, -1000, 3530, -1000, 1389, -1000, -1000, 1491, -1000, 1963,
	-338, 15900, 1931, 1754, -1000, 12051, 15900, 12051, -244, 393,
	-257, -1000, -1000, -1000, 2498, -1000, -1000, -1000, 2180, -1000,
	2179, -1000, 178, 223, 2005, -220, 9485, 440, 50330, -220,
	50330, 9485, -1000, 50330, 162, -360, -362, 155, 2497, 437,
	-220, 3420, 43, 12051, 3281, -1000, -1000, 50330, 2177, -1000,
	-1000, -1000, 3548, 40775, 2303, 1706, 40138, -1000, 358, -1000,
	258, 610, 2496, -1000, 944, 130, 2494, 2493, -1000, -1000,
	-1000, -1000, 14611, 1685, -1000, -1000, -1000, 2043, 12051, 2683,
	-1000, 1079, 1079, 2462, 2681, 2676, -1000, 2891, 2891, -1000,
	2883, 2888, 2883, 1079, 1079, 2674, -1000, 2877, -1000, 3317,
	-1000, 2231, 2629, -1000, 2592, 2539, 12051, -1000, 2673, 3610,
	1450, -66, -189, 152, 152, -1000, -1000, -1000, -1000, 152,
	152, 152, 152, -1000, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 820, -98, -285, -102, -286,
	-1000, 2671, 1361, -1000, -1000, -1000, -1000, -1000, 3737, 1356,
	559, 559, 2493, 2492, -1000, 908, 2490, 1120, 50330, 2460,
	-292, -1000, 2459, -1000, -1000, 50330, 50330, 50330, 50967, 681,
	50330, 50330, 2458, -1000, 2453, 2451, 1336, 5211, 2670, 3333,
	19105, 3328, 2278, -1000, -1000, -1000, 30583, 614, -1000, -1000,
	-1000, 758, 353, 2175, 602, -1000, 50330, 617, 3269, 1853,
	2450, 50330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3304, -1000, 1004, 517, 36953, 16547, -1000, 424, 50330, -1000,
	19105, 19105, 424, 521, 1834, -1000, 810, 1264, 142, 38227,
	50330, -1000, 37590, 2669, -1000, -1000, 1235, 3537, -1000, 2043,
	2043, -354, 3537, 3537, 1722, -1000, -1000, 521, -1000, 424,
	-1000, 955, 20379, 578, 455, 448, -1000, 725, -1000, -1000,
	807, 3291, 5211, -1000, 50330, -1000, 50330, -1000, 50330, 50330,
	871, 12051, 3291, 50330, 906, -1000, 1199, 509, 487, 842,
	842, 1344, -1000, 3317, -1000, -1000, 1342, -1000, -1000, -1000,
	-1000, 50330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27398,
	27398, 3369, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2449, 2441, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 50330, 1652, -1000, 1837,
	2173, 2439, 2278, 30583, 1830, 1794, 2438, 2435, 614, -1000,
	2431, 2422, 2065, 1822, 943, 50330, -1000, 1229, 50330, 50330,
	-1000, 1474, -1000, 1821, 3154, 3170, 3154, -1000, 3154, -1000,
	-1000, -1000, -1000, -1000, -1000, 3208, -1000, 3206, -1000, -1000,
	-1000, -1000, 1474, -1000, -1000, -1000, -1000, -1000, 1054, -1000,
	3417, 1080, 1080, 1080, 2665, -1000, -1000, -1000, -1000, 1339,
	2663, -1000, -1000, -1000, 3561, -1000, -1000, -1000, -1000, -1000,
	-1000, 18468, 3302, 3526, 3516, 39501, -1000, -338, 1740, -1000,
	1996, 185, 1977, 50330, -1000, -1000, -1000, 2662, 2660, -226,
	191, 3513, 3509, 1118, -1000, 2653, 1333, -220, -1000, -1000,
	1237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -365, -220,
	-1000, 1237, -1000, 178, -1000, -1000, 3282, -1000, -1000, 2303,
	-1000, 254, -1000, -1000, -1000, -1000, -1000, -1000, 245, -1000,
	50330, -1000, 1294, 123, -1000, 2043, -1000, -1000, -1000, -1000,
	-1000, 4976, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2414, -1000, -1000, 12051, -1000, -1000, -1000, 2518,
	-1000, -1000, 12051, 2637, 2413, 2635, 2412, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3566, -1000, 3507, 1651, 2632, 2631,
	1650, 2628, 2627, -1000, 12051, 2625, 3737, 1053, 2410, 1053,
	-1000, -1000, 441, 29946, 50330, 3541, -1000, 50330, 2408, -1000,
	-1000, 50330, 2102, 669, 2102, 719, 50330, -1000, -1000, -1000,
	-1000, -1000, 957, 424, 2624, 1292, -1000, -1000, -1000, -1000,
	424, -1000, 2403, 262, -1000, -1000, -1000, -1000, 2170, -1000,
	-1000, 2119, 1660, 286, -1000, -1000, -1000, -1000, -1000, -1000,
	2134, 50330, 38864, 2248, 1820, -355, -1000, 2875, -1000, 1747,
	1747, 1747, 50330, 1649, -1000, 1747, 1747, 2623, -1000, -1000,
	2615, 2614, -135, 829, 1833, 1808, -1000, 2158, 29309, 38227,
	37590, 1364, -1000, 1484, -1000, -1000, -1000, -1000, -1000, -1000,
	3537, 829, -1000, 573, 2150, 14611, 2874, 14611, 2873, 594,
	2870, 1647, -1000, 50330, -1000, -1000, 50330, 4063, 2867, -1000,
	2865, 3148, 557, 2857, 2856, 50330, 2505, -1000, 3291, 50330,
	785, 3300, -1000, -1000, -1000, 462, -1000, -1000, -1000, 673,
	-1000, 50330, -1000, 50330, -1000, 1683, -1000, 27398, -1000, -1000,
	1640, -1000, 2402, 2399, 3737, -1000, -1000, 262, 2398, 6916,
	-1000, -1000, -1000, -1000, -1000, 3269, 2396, 2134, 50330, -1000,
	50330, 1229, 1229, 3566, 50330, 9485, -1000, -1000, 12051, 2854,
	-1000, 12051, -1000, -1000, -1000, -1000, -1000, -1000, 2835, 3276,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1896, -1000, 12051,
	12691, -1000, 866, 15900, -258, 392, -1000, -1000, -1000, -228,
	2395, -1000, -1000, 3506, 2383, 2296, 50330, -1000, -1000, 1237,
	-1000, 1237, -226, -1000, -1000, 1235, -1000, -1000, 1163, 720,
	-1000, 2599, 271, -1000, 2405, -1000, 2368, 152, -1000, 152,
	-1000, 250, 12051, -1000, 2382, -1000, -1000, -1000, 2381, -1000,
	-1000, 2309, -1000, 2597, -1000, 2378, -1000, -1000, 50330, -1000,
	-1000, 1117, 2377, -356, -1000, 2376, 2102, 2374, 2102, 50330,
	668, 5211, -138, -135, 19105, -138, -1000, -1000, 410, 432,
	-1000, -1000, 2104, 667, -1000, -1000, 2372, 630, -1000, 1229,
	-1000, 1818, 2031, 2325, 35042, 27398, 28672, 2371, -1000, -1000,
	36953, 1896, 1896, 5485, 319, 5700, -1000, 2815, 1162, 1798,
	-1000, 2148, -1000, 2147, -1000, 3537, 1364, 140, -1000, -1000,
	1698, -1000, 1162, 2411, 3505, -1000, 3288, 50330, 3010, 50330,
	2814, 1813, 14611, -1000, 807, 3243, -1000, -1000, 4063, -1000,
	-1000, 2027, 14611, -1000, -1000, 2370, 28672, 1010, 1812, 1764,
	972, 2812, -1000, 690, 3560, -1000, -1000, -1000, 1027, 2810,
	-1000, 2003, 1995, -1000, 50330, -1000, 35042, 35042, 835, 835,
	35042, 35042, 2809, 842, -1000, -1000, 14611, -1000, -1000, 1747,
	-1000, -1000, -1000, 1747, 1673, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2248, -1000, -1000, 1225, -1000, 3465, -1000, -1000,
	2043, 50330, 2043, 36316, -1000, 3503, 3498, -1000, 2043, 253,
	255, 2807, 2806, -1000, -338, 50330, 50330, -230, 2138, -1000,
	2367, 188, -1000, -1000, 1216, -228, -235, 88, 27398, 1762,
	-1000, 2591, 357, -147, -1000, -1000, -1000, -1000, 2584, -1000,
	675, -1000, -1000, -1000, 1206, 2582, 2579, -1000, -1000, -1000,
	-1000, 50330, -1000, 2321, -1000, 2366, -1000, 2361, 603, 2102,
	-124, -1000, -1000, 404, -1000, -1000, -1000, 665, 2283, -1000,
	-1000, 425, -1000, -1000, -1000, 2134, 2360, -1000, -1000, 121,
	-1000, 1755, 1601, -1000, -1000, -1000, -1000, -1000, -1000, 797,
	-1000, 424, 5839, -1000, 1290, 28035, -1000, 1163, 797, 532,
	33768, 704, 305, -1000, 2118, -1000, -1000, 3566, -1000, 703,
	-1000, 588, -1000, 1580, -1000, 1564, 35679, 2115, 1929, -1000,
	5623, 940, -1000, -1000, 3325, -1000, -1000, -1000, -1000, -1000,
	-1000, 2342, 2341, -1000, -1000, -1000, -1000, -1000, 2111, 2799,
	70, 3367, 2336, -1000, -1000, 2797, 1561, 1560, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1554, 1531,
	35042, -1000, -1000, 3325, 2103, 27398, 1747, -1000, -1000, 1520,
	1501, -1000, -1000, -1000, -1000, -1000, -309, 2796, 12051, 12051,
	-1000, -1000, -1000, 2795, -1000, -1000, 3495, -230, -237, 2335,
	160, 205, -1000, 2329, -1000, -129, 3230, -154, -1000, -1000,
	737, -221, 146, 141, 132, -1000, -1000, -1000, 12051, -1000,
	-1000, -1000, 120, -1000, 1748, -1000, -1000, 2102, 2328, 50330,
	677, -1000, -1000, -1000, -1000, 237, -1000, -1000, -1000, -1000,
	-1000, -1000, 2325, 2324, -1000, 561, 3493, -1000, 5700, -1000,
	1747, -1000, 561, 1471, -1000, 1747, 1747, -1000, 525, -1000,
	1741, -1000, 2099, -1000, 3465, -1000, 523, -1000, 563, -1000,
	-1000, -1000, 1465, -1000, -1000, -1000, 5623, 575, -1000, 786,
	2792, -1000, -1000, 2578, 12051, 2790, 1747, 2576, -115, 35042,
	3146, 3086, 2989, 2802, 1464, -1000, -1000, 27398, -1000, -1000,
	34405, -1000, 2788, 1453, 1433, 50330, 2296, -1000, -1000, 2323,
	-1000, 886, 231, 205, -1000, 3492, 183, 3477, 3475, 1204,
	3227, -1000, -1000, 1978, -1000, 169, 143, 117, -1000, -1000,
	-1000, -1000, -1000, 2321, 2320, 2319, -1000, 584, -1000, 347,
	-1000, -1000, -1000, 336, -1000, 3471, 586, -1000, 27398, -1000,
	-1000, 33768, 1896, 1896, -1000, -1000, 2089, -1000, -1000, -1000,
	-1000, 2085, -1000, -1000, -1000, 1399, -1000, 50330, 989, 8845,
	-1000, 2291, -1000, 50330, -1000, 3169, -1000, 282, 1396, 336,
	835, 336, 835, 336, 835, 336, 835, 344, -1000, -1000,
	-1000, 1390, 12051, -1000, -1000, 1366, -1000, -1000, -1000, 2780,
	2084, 191, 173, 3469, -1000, 2296, 3467, 2296, 2296, -1000,
	148, -139, 737, -1000, -1000, -1000, -1000, -1000, -1000, 2317,
	-1000, -1000, -1000, -1000, 1747, 1747, 2307, 2306, 512, -1000,
	-1000, 1747, 1747, 1747, 33131, 578, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 575, 5700, -1000, 8845, 1355, -1000, 2043,
	-1000, 842, -1000, -1000, 3168, 3142, 3547, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2778, 2523, -1000,
	50330, 3365, 26761, 181, -1000, -1000, -1000, 2302, -1000, 2296,
	-1000, -1000, 1745, -151, -1000, -278, 2082, 2071, -1000, -1000,
	50330, 2052, 2047, 2290, -1000, 50330, 573, -1000, 5700, 1347,
	-1000, 8845, -1000, -1000, 3549, -1000, 3558, 1071, 1071, 336,
	336, 336, 336, 12051, -1000, -1000, -1000, 50330, -1000, 1320,
	-1000, -1000, -1000, 1481, -1000, -1000, -1000, -1000, 2287, -155,
	-1000, -1000, 2241, -1000, -1000, -1000, -1000, -1000, -1000, 1319,
	2411, -1000, -1000, -1000, -1000, -1000, 2121, 694, -1000, 2369,
	1192, -1000, 1713, -1000, 32494, 50330, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50330, 8205, -1000, 1337, -1000,
	-1000, 2043, 50330, -1000,
}

var yyPgo = [...]int{
	0, 181, 3593, 249, 179, 4210, 88, 248, 285, 253,
	247, 4209, 4208, 4206, 4205, 3320, 3304, 4204, 4201, 4200,
	4195, 4194, 4193, 4192, 4191, 4190, 4188, 4187, 4185, 4184,
	4183, 4182, 4180, 4178, 4177, 4173, 4172, 4171, 4169, 4168,
	4167, 4166, 4165, 4164, 4163, 4160, 4158, 242, 4157, 4156,
	4153, 4152, 4150, 4149, 4148, 4147, 4145, 4143, 4141, 4140,
	4139, 4138, 4137, 4136, 4135, 4134, 4132, 4131, 4130, 4129,
	4123, 4121, 4120, 4119, 4112, 4109, 4106, 4104, 4102, 4101,
	4097, 4094, 239, 4092, 4091, 226, 4090, 3297, 4089, 4088,
	4087, 4085, 4084, 4083, 4082, 4081, 4078, 4077, 4076, 221,
	4074, 4073, 4072, 4068, 4067, 4066, 4065, 4063, 4061, 4060,
	4058, 4057, 4055, 262, 4054, 4053, 4051, 4046, 245, 4045,
	212, 4044, 174, 132, 4043, 4042, 4041, 4040, 4039, 4032,
	4030, 4029, 4028, 4025, 4024, 4023, 4022, 4017, 230, 203,
	68, 4009, 50, 4008, 4006, 211, 4002, 152, 4001, 150,
	4000, 3999, 3998, 3997, 3995, 3993, 3992, 3991, 3989, 3988,
	3987, 3986, 3985, 3984, 3983, 3982, 3981, 3980, 3979, 3978,
	3974, 3973, 3972, 3971, 43, 3970, 257, 3969, 78, 3968,
	185, 3966, 69, 3964, 75, 126, 261, 3006, 260, 3963,
	188, 3960, 3958, 240, 186, 3957, 3955, 266, 3953, 164,
	222, 163, 98, 117, 3946, 141, 3943, 258, 48, 49,
	246, 145, 52, 161, 129, 3940, 214, 101, 111, 3930,
	3929, 146, 3928, 229, 176, 3927, 107, 3926, 3925, 3924,
	3921, 3920, 195, 184, 3919, 3915, 133, 3913, 3912, 70,
	136, 3911, 77, 122, 169, 121, 3910, 293, 124, 94,
	3909, 125, 103, 3907, 81, 3906, 3904, 3903, 3902, 191,
	3901, 3899, 140, 61, 3897, 3893, 3891, 64, 3890, 87,
	3888, 60, 3885, 54, 3884, 3883, 3882, 3881, 3880, 3879,
	3878, 3877, 3876, 3875, 3874, 3872, 56, 3871, 3870, 3868,
	3867, 7, 14, 19, 3866, 28, 3863, 171, 3862, 3861,
	165, 3858, 189, 3857, 3856, 99, 95, 3855, 93, 168,
	3853, 9, 26, 74, 3851, 3844, 3842, 891, 3840, 3839,
	3837, 275, 3836, 3835, 3834, 160, 3833, 3832, 3831, 671,
	3828, 3827, 3825, 3824, 3823, 3822, 118, 3821, 1, 215,
	41, 3819, 131, 142, 3818, 37, 31, 3817, 42, 114,
	200, 135, 105, 3816, 3815, 3814, 273, 198, 102, 62,
	0, 104, 213, 157, 3812, 3811, 3810, 250, 3809, 232,
	197, 231, 372, 263, 201, 3804, 3802, 59, 3801, 162,
	29, 51, 138, 254, 23, 259, 3800, 1765, 10, 183,
	3796, 193, 3795, 8, 17, 308, 151, 3786, 3784, 33,
	267, 3783, 3782, 3780, 134, 3777, 3775, 345, 83, 3773,
	3772, 3771, 3769, 39, 3768, 182, 16, 3766, 128, 3765,
	251, 3764, 255, 144, 177, 178, 158, 217, 224, 89,
	82, 3763, 1854, 155, 109, 15, 3749, 219, 3748, 172,
	130, 3746, 90, 3743, 244, 268, 208, 3742, 187, 11,
	47, 36, 30, 40, 12, 317, 196, 3741, 3740, 24,
	44, 3738, 53, 3736, 20, 3735, 3734, 45, 3733, 55,
	5, 3732, 3731, 18, 21, 3730, 35, 205, 173, 123,
	96, 58, 3728, 3727, 159, 238, 3726, 137, 154, 156,
	3725, 80, 3724, 3723, 3722, 3720, 888, 252, 3719, 3718,
	3715, 3714, 3713, 3712, 3710, 3709, 210, 3708, 108, 38,
	3704, 3703, 3700, 3699, 86, 149, 3695, 3689, 3688, 3686,
	32, 143, 3685, 13, 3684, 25, 22, 34, 3683, 106,
	3682, 3, 192, 3681, 3679, 4, 3677, 3676, 2, 3675,
	3674, 120, 3673, 100, 27, 167, 116, 3672, 3671, 92,
	206, 148, 3670, 3668, 97, 235, 202, 3666, 79, 233,
	256, 3665, 209, 3664, 3663, 3662, 3661, 3658, 1243, 3657,
	3656, 236, 67, 85, 3654, 216, 113, 3653, 3650, 84,
	166, 119, 115, 57, 91, 3649, 112, 204, 3648, 194,
	3647, 264, 3645, 3644, 110, 3643, 3640, 3638, 3637, 207,
	3636, 3634, 190, 220, 3633, 3620, 265, 3619, 3615, 3613,
	3609, 3603, 3601, 3599, 3595, 3587, 3580, 243, 241, 3578,
}

//line mysql_sql.y:12925
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 612, 615, 615, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 351, 351, 352, 352, 130, 347, 347, 346, 346,
	131, 132, 133, 591, 591, 134, 135, 165, 590, 590,
	590, 590, 590, 167, 167, 167, 167, 167, 167, 167,
	467, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 597, 597, 597, 598, 598, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 540, 540, 539, 539, 538, 538, 492, 492, 493,
	493, 338, 338, 338, 537, 537, 537, 536, 536, 535,
	535, 534, 534, 532, 532, 533, 531, 530, 530, 530,
	528, 528, 528, 524, 524, 526, 525, 525, 527, 519,
	519, 522, 522, 520, 520, 520, 520, 523, 518, 518,
	518, 517, 517, 112, 112, 112, 434, 434, 111, 111,
	448, 448, 448, 448, 448, 446, 446, 446, 446, 446,
	446, 445, 445, 444, 444, 449, 449, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	603, 603, 602, 602, 604, 604, 604, 604, 605, 605,
	103, 103, 103, 104, 443, 443, 443, 101, 102, 102,
	433, 433, 438, 438, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 442, 442, 442,
	440, 440, 439, 439, 441, 441, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 430, 430, 429, 108, 108, 109,
	600, 600, 599, 601, 601, 601, 601, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 565, 565, 565, 565, 566, 566,
	365, 366, 616, 368, 364, 364, 364, 561, 561, 562,
	563, 564, 564, 564, 114, 14, 222, 222, 466, 466,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 301, 301, 302, 296, 296,
	303, 303, 170, 304, 304, 304, 309, 309, 310, 310,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 281, 281, 281, 276, 276, 276, 276, 277,
	277, 278, 278, 279, 279, 279, 279, 280, 280, 357,
	357, 305, 305, 305, 307, 307, 306, 300, 298, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 299,
	308, 308, 82, 88, 88, 88, 88, 578, 578, 83,
	83, 589, 589, 496, 496, 379, 379, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 501, 502, 375, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 79, 80, 81, 54, 57, 58,
	169, 172, 172, 172, 172, 53, 53, 53, 419, 419,
	52, 617, 617, 350, 350, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 513, 513, 619, 619, 619, 74,
	75, 495, 495, 495, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 160, 59, 161, 161, 372,
	372, 372, 374, 374, 370, 618, 618, 462, 462, 373,
	373, 48, 48, 48, 48, 77, 371, 371, 349, 369,
	369, 369, 12, 12, 10, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 427, 427, 424, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 194, 194, 248,
	248, 572, 572, 568, 568, 569, 569, 569, 570, 570,
	571, 571, 120, 507, 507, 507, 507, 507, 507, 8,
	8, 217, 217, 506, 506, 506, 506, 506, 506, 431,
	431, 431, 550, 550, 550, 551, 216, 216, 211, 211,
	508, 508, 396, 552, 552, 516, 516, 515, 515, 514,
	514, 214, 214, 215, 215, 197, 197, 139, 139, 521,
	521, 521, 521, 529, 529, 491, 491, 286, 286, 340,
	340, 341, 341, 184, 184, 185, 185, 185, 185, 185,
	185, 606, 606, 607, 608, 609, 609, 610, 610, 610,
	611, 611, 611, 611, 611, 558, 558, 560, 560, 559,
	213, 213, 209, 209, 210, 210, 210, 208, 208, 207,
	206, 206, 205, 203, 203, 203, 204, 204, 204, 221,
	221, 187, 187, 187, 186, 186, 186, 186, 186, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 188, 191, 191, 192, 192, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 318, 318, 319, 319,
	319, 319, 319, 137, 137, 500, 500, 317, 317, 189,
	189, 190, 190, 190, 190, 316, 316, 315, 202, 202,
	201, 200, 200, 200, 195, 195, 195, 195, 195, 196,
	327, 327, 326, 326, 325, 325, 325, 325, 328, 123,
	136, 136, 138, 220, 220, 324, 323, 323, 323, 323,
	219, 219, 218, 218, 212, 212, 199, 199, 199, 199,
	322, 198, 320, 596, 596, 595, 595, 594, 592, 592,
	592, 593, 593, 593, 593, 542, 542, 542, 542, 542,
	358, 358, 358, 363, 363, 361, 361, 361, 361, 361,
	367, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 231, 232, 40, 233, 233, 234,
	234, 235, 235, 236, 237, 238, 238, 238, 238, 38,
	223, 223, 224, 224, 225, 225, 226, 227, 227, 227,
	230, 228, 229, 229, 614, 614, 613, 37, 37, 30,
	175, 175, 176, 176, 176, 178, 178, 282, 282, 282,
	177, 177, 179, 179, 179, 573, 575, 575, 577, 576,
	576, 576, 579, 579, 579, 579, 579, 580, 580, 580,
	580, 581, 581, 31, 157, 157, 182, 182, 162, 584,
	584, 584, 583, 583, 585, 585, 586, 586, 344, 344,
	345, 345, 173, 174, 174, 164, 159, 181, 181, 181,
	181, 181, 183, 183, 250, 250, 158, 163, 166, 168,
	574, 582, 582, 582, 428, 428, 425, 426, 426, 423,
	422, 422, 422, 588, 588, 587, 587, 587, 359, 359,
	32, 418, 418, 420, 421, 421, 421, 412, 412, 412,
	412, 36, 416, 416, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 413, 413, 415, 415, 411, 411,
	411, 411, 411, 411, 411, 411, 35, 180, 180, 410,
	410, 407, 407, 405, 405, 406, 406, 404, 404, 404,
	408, 408, 43, 78, 44, 45, 46, 42, 409, 409,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	141, 140, 140, 140, 140, 140, 143, 143, 343, 343,
	342, 342, 142, 283, 283, 41, 261, 261, 483, 483,
	478, 478, 478, 478, 478, 498, 498, 498, 479, 479,
	479, 480, 480, 480, 482, 482, 482, 481, 481, 481,
	481, 481, 497, 497, 499, 499, 499, 450, 450, 451,
	451, 451, 454, 454, 470, 470, 471, 471, 469, 469,
	476, 476, 475, 475, 474, 474, 473, 473, 472, 472,
	472, 472, 465, 465, 464, 464, 452, 452, 452, 452,
	452, 453, 453, 453, 463, 463, 468, 468, 314, 314,
	313, 313, 269, 269, 270, 270, 312, 312, 267, 267,
	268, 268, 268, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 548,
	548, 549, 272, 272, 284, 284, 284, 284, 284, 284,
	271, 271, 273, 273, 249, 249, 247, 247, 239, 239,
	239, 239, 239, 239, 240, 240, 241, 241, 242, 242,
	242, 246, 246, 245, 245, 245, 245, 243, 243, 244,
	244, 244, 244, 244, 244, 436, 436, 545, 545, 546,
	546, 541, 541, 541, 544, 544, 544, 544, 544, 544,
	544, 544, 547, 547, 547, 543, 543, 251, 337, 337,
	337, 360, 360, 360, 360, 362, 336, 336, 336, 266,
	266, 265, 265, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 435, 435, 376, 376, 377,
	377, 295, 294, 294, 294, 294, 294, 292, 293, 291,
	291, 291, 291, 291, 288, 288, 287, 287, 287, 289,
	289, 289, 289, 289, 414, 414, 285, 285, 275, 275,
	275, 274, 274, 274, 477, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 290, 334, 334, 334, 335,
	335, 335, 335, 335, 335, 335, 335, 386, 386, 392,
	392, 557, 557, 556, 252, 252, 252, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 262, 262, 262, 459,
	459, 459, 459, 460, 460, 460, 460, 461, 461, 461,
	457, 457, 458, 458, 397, 398, 398, 504, 504, 505,
	505, 455, 455, 456, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 512, 512, 512,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 567, 567, 567, 553,
	553, 553, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 555, 555, 555, 555, 555, 555,
	555, 555, 555, 555, 555, 555, 555, 555, 555, 555,
	555, 332, 332, 332, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 399, 399, 400, 400, 509, 509, 509, 509,
	509, 509, 510, 510, 511, 511, 511, 511, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 384, 329,
	329, 329, 401, 393, 393, 394, 394, 395, 395, 387,
	387, 387, 387, 387, 387, 388, 388, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 389,
	389, 391, 391, 403, 403, 403, 402, 402, 402, 402,
	402, 402, 402, 264, 264, 264, 264, 381, 381, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 254, 254, 254, 254, 258, 258, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 259, 259, 259, 259, 259, 257, 257, 257,
	257, 257, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 121, 122, 122, 256, 339, 339, 484, 484, 487,
	487, 485, 485, 486, 488, 488, 488, 489, 489, 489,
	490, 490, 490, 494, 494, 348, 348, 348, 356, 356,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 3,
	1, 1, 7, 7, 7, 8, 8, 0, 4, 7,
	6, 0, 3, 0, 2, 0, 1, 1, 1, 1,
	4, 2, 2, 3, 3, 4, 5, 3, 4, 4,
	2, 2, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 4, 3, 3,
	3, 4, 5, 6, 5, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 5, 5, 6, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 4,
	7, 6, 6, 3, 5, 0, 2, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 1, 4, 4, 4, 3, 4, 3,
	2, 2, 2, 2, 2, 3, 2, 3, 2, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 3, 3, 3, 1, 3, 3, 4, 0, 2,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 5, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 6, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 3, 3, 2, 2, 1, 5, 6, 4, 1,
	1, 1, 5, 4, 1, 1, 2, 0, 1, 1,
	2, 5, 0, 1, 1, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 2, 2, 0,
	4, 7, 3, 3, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 3, 9, 1, 4, 4, 4, 7,
	9, 7, 7, 7, 9, 7, 7, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 5, 0, 1, 3, 0, 1, 0, 2, 0,
	2, 0, 1, 6, 8, 8, 6, 6, 5, 5,
	5, 6, 6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -612, -615, -2, -5, 636, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 626, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 559, 632, 462, 14, 511, -15, -16, -558, -17,
	267, -364, -365, -366, -368, -616, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 386, 392, 449, 625,
	62, -185, -187, 654, 655, 658, 546, 549, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 554,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 390, 260, 238, 240, 15, 32, 43,
	365, -186, 86, 547, 239, -188, 13, 660, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 627, -360, 382, 628, 630, 629, 89, 97,
	-353, -355, 462, 267, 386, 392, 625, 655, 658, 546,
	549, 561, 562, 563, 564, 565, 566, 567, 568, 570,
	571, 572, 573, 574, 575, 576, 586, 587, 577, 578,
	579, 580, 581, 582, 583, 584, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	514, 611, 612, 613, 614, 542, 569, 605, 606, 607,
	608, 363, 364, 551, 279, 303, 417, 309, 316, 163,
	183, 177, 206, 197, 547, 172, 283, 321, 284, 96,
	166, 497, 111, 474, 446, 169, 298, 300, 302, 543,
	544, 376, 305, 541, 304, 306, 308, 545, 285, 366,
	193, 188, 297, 281, 186, 286, 41, 287, 359, 211,
	288, 289, 556, 470, 362, 476, 313, 53, 444, 187,
	471, 301, 473, 215, 219, 488, 350, 489, 181, 182,
	478, 491, 210, 213, 214, 259, 356, 357, 44, 553,
	271, 492, 217, 650, 209, 204, 500, 317, 315, 360,
	208, 180, 203, 282, 66, 221, 220, 222, 440, 441,
	442, 443, 290, 291, 380, 487, 200, 189, 367, 173,
	23, 495, 266, 475, 393, 292, 310, 318, 216, 218,
	273, 278, 333, 555, 448, 361, 277, 314, 493, 185,
	270, 299, 265, 496, 651, 174, 395, 293, 167, 307,
	490, 653, 499, 65, 408, 179, 170, 643, 644, 256,
	164, 275, 280, 652, 294, 295, 296, 540, 320, 319,
	311, 171, 548, 201, 272, 207, 191, 178, 202, 165,
	274, 498, 409, 623, 365, 427, 199, 196, 276, 249,
	494, 477, 168, 431, 410, 194, 322, 618, 619, 620,
	381, 355, 323, 324, 192, 263, 468, 469, 327, 437,
	345, 411, 447, 418, 412, 228, 229, 331, 480, 482,
	212, 621, 334, 335, 336, 472, 337, 338, 339, 340,
	385, 57, 59, 98, 101, 100, 656, 657, 64, 30,
	371, 374, 406, 413, 347, 624, 552, 344, 348, 349,
	375, 26, 429, 397, 433, 432, 49, 50, 51, 54,
	55, 56, 58, 60, 61, 52, 539, 390, 403, 501,
	46, 48, 400, 28, 377, 428, 450, 343, 430, 461,
	47, 459, 460, 481, 27, 379, 378, 63, 45, 436,
	438, 439, 325, 341, 388, 633, 502, 383, 399, 402,
	384, 346, 373, 404, 68, 67, 396, 634, 391, 389,
	342, 557, 558, 351, 585, 368, 445, 536, 535, 534,
	533, 532, 531, 530, 529, 328, 329, 330, 414, 415,
	416, 426, 419, 420, 421, 422, 423, 424, 425, 464,
	465, 635, 483, 485, 486, 484, 244, 659, 369, 370,
	247, 637, 638, 99, 639, 641, 640, 29, 642, 649,
	646, 647, 648, 560, 232, -441, -439, -360, 547, 625,
	392, 546, 549, 386, 365, 655, 658, 390, 267, 328,
	329, 330, 462, 363, -233, -360, 659, -197, 251, 40,
	-247, -360, -197, -87, -16, -15, -186, -187, -247, 246,
	-369, 24, 444, -99, 445, 241, 242, 86, 78, -360,
	-9, -113, -8, -120, -85, -184, 449, -367, -360, 328,
	328, -367, 246, -362, 277, 425, -360, -496, 252, -445,
	-418, 278, -444, -420, -447, -421, 33, 237, 239, 238,
	559, 274, 16, 390, 248, 14, 13, 391, 260, 26,
	27, 29, 15, 392, 394, 30, 395, 398, 399, 400,
	43, 403, 404, 267, 89, 97, 92, 285, -232, -360,
	-395, -387, 118, -390, -382, -383, -385, -338, -532, -380,
	86, 145, 146, 153, 119, 661, -384, -477, 37, 121,
	565, 569, 605, 512, -330, -331, -332, -333, -334, -335,
	550, -360, -533, -531, 92, 102, 104, 108, 109, 107,
	105, 157, 190, 106, 93, 158, -187, 89, -553, 575,
	-354, 598, 611, 612, 613, 614, 597, 62, -503, -511,
	245, -509, 156, 195, 263, 191, 14, 151, 437, 192,
	606, 607, 608, 572, 594, 514, 576, 586, 601, 567,
	568, 570, 562, 563, 564, 566, 577, 579, 593, -512,
	589, 599, 600, 585, 609, 610, 646, 602, 603, 604,
	641, 91, 90, 592, 591, 578, 573, 574, 580, 561,
	571, 581, 582, 590, 595, 596, 374, 111, 375, 376,
	504, 366, 81, 377, 252, 444, 71, 378, 379, 380,
	381, 382, 511, 383, 72, 384, 373, 267, 427, 385,
	194, 212, 516, 515, 517, 508, 505, 503, 506, 507,
	509, 510, 583, 584, 588, -136, -138, 616, -606, -321,
	-607, 6, 7, 8, 9, -608, 158, -597, 446, 555,
	92, 321, 363, 17, 504, 645, 545, 645, 545, 168,
	165, -432, 168, 117, 174, 173, 250, 168, -432, -360,
	171, 645, 170, 643, 331, 273, -409, -175, 363, 427,
	337, 98, 277, -412, -410, 543, -497, 325, 321, 297,
	247, 114, -176, 257, 256, 112, 504, 245, 401, 316,
	57, 59, -568, -569, 234, 235, 236, -560, 537, -559,
	-360, 645, 650, 376, 100, 101, 643, 644, 28, 246,
	387, 273, 482, 480, 481, 483, 484, 485, 486, -65,
	-513, -495, 477, 476, -373, 469, 475, 467, 479, 470,
	364, 339, 559, 338, 237, 637, 544, 538, -348, 411,
	447, 501, 502, 388, 448, 488, 490, 471, 111, 198,
	195, 247, 249, 246, 643, 363, 504, 427, 98, 337,
	246, -568, 650, 165, 488, 490, 446, 277, 425, 42,
	-438, 437, -437, -439, 489, 500, 90, 91, 487, -348,
	111, 468, 468, -606, -321, -185, -187, -123, -558, 545,
	645, 247, 363, 427, 277, 248, 246, 540, 543, 249,
	504, 245, 328, 387, 273, 337, 98, 170, 643, -191,
	-192, -193, 230, 231, 232, 70, 235, 233, 67, 33,
	34, 35, -1, 125, 660, -387, -387, -6, 663, -6,
	-387, -360, -360, 160, -254, -258, -255, -257, -256, -260,
	-259, 195, 196, 156, 199, 205, 201, 202, 203, 204,
	206, 207, 208, 209, 210, 213, 214, 211, 32, 212,
	263, 191, 192, 193, 194, 215, 177, 197, 552, 223,
	178, 224, 179, 225, 180, 226, 181, 182, 227, 183,
	186, 187, 188, 189, 185, 159, -222, 92, 33, 86,
	159, 92, -214, 269, -197, -247, -239, 159, 661, -214,
	-606, -207, -208, 11, -247, -336, -360, 446, 128, -99,
	78, -99, 445, 78, -99, 445, 241, -561, -562, -563,
	-565, 241, 445, 444, 242, -118, 159, 285, 17, -367,
	-367, 84, -247, -420, 277, -445, -418, 37, 83, 160,
	250, 160, 83, 86, 388, 363, 427, 389, 504, 246,
	401, 249, 277, 402, 363, 427, 246, 249, 504, 277,
	363, 246, 249, 427, 277, 402, 363, 467, 468, 249,
	28, 393, 396, 397, 468, -517, 500, 160, 117, 114,
	115, 116, -387, 135, -402, 128, 129, 130, 131, 132,
	133, 134, 142, 141, 152, 145, 146, 147, 148, 149,
	150, 151, 143, 144, 138, 118, 136, 140, 137, 120,
	155, -187, -387, -395, 62, -385, -385, -385, -385, -360,
	-477, -392, -387, 86, 86, 86, 86, 86, 159, 105,
	92, -387, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, -510, 86, 86, -399, -400, 86,
	86, -380, -336, 86, 92, 92, 86, 86, 86, 92,
	86, 86, 86, -400, -400, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, -208, 160, -207, 86, -207, -208, -188, -187, 33,
	34, 33, 34, 33, 34, 33, 34, -609, 634, 86,
	102, 656, 228, 17, -360, 643, -360, -591, 33, 548,
	548, 548, 548, 493, 554, 172, 173, 174, -360, 171,
	250, -360, -407, 252, -407, -407, -231, -360, -233, 387,
	249, 540, 249, -176, -407, -407, -407, -407, -407, 248,
	-407, 24, 246, 246, 246, 246, -407, 511, 128, 128,
	60, -570, 176, 160, -560, -213, 86, -591, 651, 652,
	653, -372, 136, 140, -372, -317, 18, -317, 24, 24,
	275, 275, 275, -372, 315, -617, -618, 17, 138, -370,
	-618, -370, -370, -372, -619, 248, 478, 44, 276, 275,
	-209, -210, 22, -209, 472, 468, -462, 473, 474, -374,
	-618, -373, -372, -372, -373, -372, -372, -372, 33, 246,
	249, 504, 337, 638, -617, -617, 32, 32, -496, -496,
	-247, -496, -496, 538, -349, -360, -496, -496, -496, -301,
	-302, -247, -571, 251, 653, -603, -602, 491, -605, 493,
	165, -439, 165, -439, 89, -420, 277, 277, 160, 128,
	24, -440, 128, 139, -439, -439, -440, -440, -271, 42,
	-359, 156, -360, 92, -271, 42, -600, -599, -247, -208,
	-188, -187, 87, 87, 87, 548, -591, -496, -496, -496,
	-496, -496, -497, -496, -496, -496, -496, -496, -367, -223,
	-360, -233, 252, -496, -496, -496, -496, -189, -190, 147,
	-387, -360, -193, -3, -146, -145, 122, 123, 125, 628,
	382, 627, 631, 625, -439, 42, -490, 409, 408, -484,
	-486, 86, -485, 86, -485, -485, -485, -485, -485, 86,
	86, -487, 86, -487, -487, -484, -488, 86, -488, -489,
	86, -489, -488, -360, -466, 554, -393, -395, -360, 40,
	-506, 62, -184, 86, 32, 86, -214, -360, 192, 170,
	642, 36, -507, 62, -184, 86, 32, -208, -139, 40,
	-210, 21, 159, 102, 92, -118, -99, 78, -118, -99,
	-99, 87, 160, -564, 108, 109, -566, 210, 201, -360,
	-116, 92, -7, -8, -9, -10, -47, -85, -82, -184,
	238, 546, 549, -534, -532, 86, 33, 436, 83, 17,
	-446, 246, 504, 387, 273, 249, 363, -444, -427, -424,
	-422, -359, -420, -423, -422, -449, -336, 468, -140, 451,
	450, 327, -387, -387, -387, -387, -387, 107, 118, 355,
	108, 109, -382, -403, 33, 323, 324, -383, -383, -383,
	-383, -383, -383, -383, -383, -383, -383, -383, -383, -391,
	-401, -477, 86, 138, 136, 140, 137, 120, -385, -385,
	-383, -383, -273, -359, 156, 87, 160, -387, -557, -556,
	122, -387, -387, -387, -387, -413, -415, -336, 86, -360,
	-554, -555, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 378, 373, 379, 377, 366, 385, 380,
	381, 194, 535, 536, 529, 530, 531, 532, 533, 534,
	-393, -393, -387, -554, -393, -329, 34, 33, -395, -395,
	-395, 87, -387, -567, 353, 352, 354, -211, -360, -393,
	87, 87, 87, 102, -395, -395, -393, -383, -393, -393,
	-393, -393, -555, -329, -329, -329, -329, 147, -395, -395,
	-329, -329, -329, -329, 147, -329, -329, -329, -329, -329,
	-329, -329, -329, -329, -329, -329, 87, 87, 87, 147,
	-395, -209, -138, -515, -514, -387, 42, -139, -210, -610,
	635, 86, -336, -598, 92, 92, 661, 170, 643, 17,
	504, -360, 17, 246, -360, 102, -360, 102, 494, 495,
	169, 173, 172, -360, 171, -360, -360, 118, -360, -360,
	36, 86, -223, -407, -407, -407, -575, -360, 93, -428,
	-425, -422, -360, -360, -418, -360, -349, -247, -407, -407,
	-407, -407, -247, -282, 54, 55, 56, -422, -177, 57,
	58, -571, -559, 36, -212, -360, -317, -385, -385, -387,
	363, 504, 246, -422, 277, -617, -372, -372, -350, -349,
	-374, -369, -374, -374, -317, -370, -372, -372, -387, -374,
	-370, -317, -360, 468, -317, -317, -462, -372, -371, -360,
	-371, -407, -349, -350, -350, -247, -247, -296, -303, -297,
	-304, 269, 243, 371, 372, 240, 238, 11, 239, -311,
	316, -408, 512, -277, -278, 78, 43, -280, 267, 413,
	406, 279, 283, 96, 284, 446, 285, 248, 287, 288,
	289, 304, 306, 259, 290, 291, 292, 437, 293, 164,
	305, 294, 295, 296, 389, -272, 6, 340, 554, 42,
	52, 53, 460, 459, 557, 280, -360, -575, -573, 32,
	-360, 32, -428, -422, -360, -360, 160, 250, -200, -202,
	-199, -195, -196, -201, -320, -322, -198, 86, -247, -187,
	-360, -439, 160, 492, 494, 495, -603, -440, -603, -440,
	250, 33, 436, -443, 436, 33, -418, -437, 488, 490,
	-433, 92, 437, -423, -442, 83, 156, -514, -440, -440,
	-442, -442, 155, 160, -601, 493, 494, 234, -209, 102,
	-249, -247, -575, -427, -418, -360, -496, -249, -249, -249,
	-362, -362, 86, 159, 37, -360, -360, -360, -360, -316,
	160, -315, 17, -361, -360, 36, 92, 159, -147, -145,
	124, -387, -6, 627, -387, -6, -6, -387, -6, -387,
	-494, 410, 102, 102, -339, 92, -339, 102, 102, 102,
	560, 87, 92, -431, 83, -508, -396, -552, 616, -216,
	87, -211, -550, -551, -211, -215, -360, -506, -239, 128,
	128, 128, 25, -508, -216, 87, -550, -209, 617, -139,
	-206, -205, -387, -360, 24, -118, -99, -562, 159, 363,
	160, -212, -446, -426, -423, -448, 147, -360, -434, 160,
	554, 664, 90, 250, -588, -587, 428, 87, 160, -518,
	251, 511, 92, 661, 444, 228, 229, 107, 355, 108,
	109, -477, -395, -391, -385, -385, -383, -383, -389, 264,
	-389, 117, -387, 662, -386, -556, 124, -387, 36, 160,
	36, 160, 84, 160, 87, -484, -387, 159, 87, 87,
	17, 17, 87, -387, 87, 87, 87, 87, 17, 17,
	-387, 87, 159, 87, 87, 87, 87, 84, 87, 160,
	87, 87, 87, 87, 160, -395, -395, -387, -395, 87,
	87, 87, -387, -387, -387, -395, 87, -387, -387, -387,
	-387, -387, -387, -387, -387, -387, -387, -212, -456, 463,
	-456, -456, 160, 160, 160, 87, -139, 86, 102, 160,
	657, -343, -342, 92, -360, -360, 170, 643, -360, 92,
	643, -360, 92, 170, 174, 174, 173, -360, 92, 37,
	24, 24, 314, -232, -234, -235, -236, -237, -238, 138,
	161, 162, 86, -247, -247, -247, -577, 414, -589, 160,
	42, -587, 504, -173, 327, -411, 84, -180, 17, 554,
	-247, -247, -247, -247, -261, 36, 17, -194, -248, -360,
	86, 87, 160, -360, -360, -360, -419, 84, -360, -350,
	-317, -317, -374, -317, -317, 160, 23, -372, -374, -374,
	-239, -370, -239, 159, -239, -349, -483, 36, -213, 160,
	21, 269, -246, -357, -243, -245, 254, -377, -244, 257,
	-546, 255, 253, 112, 258, 312, 113, 248, -357, -357,
	254, -281, 250, 36, -357, -299, 248, 358, 312, 255,
	21, 269, -298, 248, 113, -360, 254, 258, 255, 253,
	-356, 128, -348, 155, 250, 44, 389, -356, 558, 269,
	-356, -356, -356, -356, -356, -356, -356, 286, 286, -356,
	-356, -356, -356, -356, -356, -356, -356, -356, -356, -356,
	165, -356, -356, -356, -356, -356, -356, 86, 332, 281,
	282, 314, -578, 414, 32, 369, 369, 370, -589, 365,
	32, -181, 363, -302, -300, -371, 32, -323, -324, -325,
	-326, -328, -327, 69, 73, 75, 79, 70, 71, 72,
	76, 81, 74, 32, 160, -358, -363, 36, -360, 92,
	-358, -187, -202, -200, -358, 86, -440, -602, -604, 496,
	493, 499, -442, -442, 102, 250, 86, 128, -442, -442,
	42, -359, -599, 500, 494, -139, 160, 83, -249, -224,
	-225, -226, -227, -254, -336, 196, 199, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 212,
	263, 191, 192, 193, 194, 215, 177, 197, 552, 178,
	179, 180, 181, 182, 183, 186, 187, 188, 189, 185,
	-360, -233, -317, -190, -202, -360, 92, -360, 147, 125,
	-6, 123, -151, -150, -149, 126, 625, 631, 125, 125,
	125, 87, 87, 87, 160, 87, 87, 87, 160, 87,
	160, 102, -521, 473, 41, 160, 86, 87, 160, 62,
	160, 128, 87, 160, -387, -360, 92, -387, 192, 87,
	62, -139, 92, 160, -203, 38, 39, 159, 446, -360,
	-532, 87, -448, 160, 250, 159, 159, -424, 392, -359,
	-426, 21, 554, -336, 40, -343, 128, 661, -360, 87,
	-389, -389, 117, -385, -382, 87, 125, -387, 123, -252,
	-254, 408, 409, -387, -252, -253, -259, 156, 195, 263,
	194, 193, 191, 408, 409, -271, -415, 551, -203, 87,
	-360, -387, -387, 87, -387, -387, 17, -360, -271, -383,
	-387, -208, -208, 87, 87, -455, -456, -455, -455, 87,
	87, 87, 87, -455, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 86, 102, 104, 102, 104,
	-514, -611, 64, 633, 63, 436, 107, 317, 160, 102,
	92, 662, 160, 128, 92, -360, -360, 17, 246, -360,
	17, 174, 92, -590, 321, 363, 504, 246, 363, 321,
	504, 246, -467, 102, 400, 87, 160, -336, -224, -213,
	86, -213, -580, 475, 416, 426, -356, -379, -378, 365,
	43, -501, 437, 422, 423, -425, 277, -349, -586, 99,
	128, 83, 344, 348, 350, 349, 345, 346, 347, -405,
	-406, -404, -408, -573, 86, 86, -184, 36, 136, -180,
	86, 86, 36, -478, 334, -254, -247, -194, -360, 17,
	160, -572, 159, -1, -360, -360, -418, -372, -317, -387,
	-387, -317, -372, -372, -374, -360, -239, -478, -254, 36,
	-297, 243, 239, -452, 314, 315, -453, -468, 317, -470,
	86, -251, -336, -244, -545, -546, -407, -360, 113, -545,
	113, 86, -251, -336, -336, -300, -336, -360, -360, -360,
	-360, -307, -306, -336, -309, 33, -310, -360, -360, -360,
	-360, 113, -360, 113, -276, 42, 49, 50, 51, -356,
	-356, 198, -279, 42, 436, 438, 439, -309, 102, 102,
	102, 102, 92, 92, 92, -356, -356, 102, 92, -363,
	92, -547, 173, 46, 47, 102, 102, 102, 102, 42,
	92, -284, 42, 297, 301, 298, 299, 300, 92, 102,
	42, 102, 42, 102, 42, -360, 86, -548, -549, 92,
	333, -467, -580, -356, 369, -439, 128, 128, -379, -582,
	96, 417, -585, 327, -183, 504, 33, -217, 243, 239,
	-573, -430, -429, -336, -199, -199, -199, -199, -199, -199,
	69, 80, 69, 69, 69, 74, 69, 74, 69, -325,
	69, 80, -430, -201, -213, -363, 87, -596, -595, -594,
	-592, 77, 251, 78, -393, -442, 493, 497, 498, -426,
	-375, 92, -433, -221, 24, -247, -247, -499, 307, 308,
	87, 160, -254, -319, 19, 159, 121, -6, -147, -149,
	-387, -6, -387, 627, 382, 628, 92, 102, 102, -529,
	457, 452, 454, 113, -396, -516, -515, 62, -184, -211,
	-508, -551, -514, -360, 662, 662, 662, 662, 92, 62,
	-184, -508, -221, -521, -205, -204, 45, -360, 102, 17,
	-423, -418, 147, 147, -360, 393, -434, 92, 415, 92,
	246, 662, 92, -343, -382, -387, 87, -262, 182, 181,
	-262, 36, 87, 87, -485, -485, -484, -487, -484, -262,
	-262, 87, 86, -203, 87, 24, 87, 87, 87, -387,
	87, 87, 160, -504, 513, -505, 587, -455, -455, -455,
	-455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
	-455, -455, -455, -455, -398, -397, 269, 458, 640, 640,
	458, 640, 640, 87, 160, -554, 160, -351, 322, -351,
	-342, 92, 250, 92, 170, -360, 92, 643, 92, -360,
	-360, -360, 314, -360, 314, -360, -360, 92, 92, 92,
	-236, -254, 87, 36, -240, -241, -242, -251, -243, -245,
	36, -581, 96, -576, 92, -360, 93, -582, 158, 367,
	42, 418, 419, 434, 362, 102, 102, 424, -574, -360,
	-182, 246, 363, -584, 53, 128, 92, -247, -404, -348,
	155, 288, 337, -314, -313, -360, 92, -240, -184, -247,
	-240, -240, -184, -479, 336, 21, 102, 146, -214, 84,
	159, -202, -248, -360, 147, 87, -317, -239, -317, -317,
	-372, -479, -184, -464, 318, 86, -462, 86, -462, 113,
	345, -471, -469, 269, -305, 46, 48, -254, -543, -360,
	-541, -543, -360, -541, -541, -407, -387, -305, -251, 250,
	32, 239, -308, 342, 343, 348, 350, -435, 313, 118,
	-435, 160, -203, 160, -360, -271, -271, 32, 92, 92,
	-249, 87, 160, 128, 102, 92, -581, -576, 128, -440,
	92, 92, -582, 92, 92, -586, 128, -250, 246, -349,
	160, -217, -217, -317, 160, 128, -219, -218, 83, 84,
	-220, 83, -218, -218, 69, 69, -317, -594, -593, 24,
	-546, -546, -546, 87, 87, 15, -226, 42, -318, 20,
	21, 147, 125, 123, 125, 125, -360, 87, 87, -491,
	618, -525, -527, 452, 21, 21, 15, 251, 87, -508,
	662, -508, -529, 46, 47, -418, -434, 437, -247, 160,
	662, -252, -290, 92, -387, 87, -387, 87, 92, 87,
	92, -208, 21, 87, 160, 87, 87, 87, 160, 87,
	87, -387, 87, -554, -352, 192, 92, -352, 363, -361,
	-360, 17, -360, 92, -360, -467, 314, -467, 314, 246,
	-360, 244, -184, 87, 160, -184, 92, -579, 428, 102,
	42, 102, 158, 420, -502, -174, 96, -249, 33, -217,
	-583, 96, 128, 661, 86, -356, -356, -356, -360, 87,
	160, -356, -356, 87, 87, 87, -269, 554, -480, 268,
	102, 146, 102, 146, 102, -358, -202, -360, -317, -572,
	159, -317, -480, -454, 319, 102, -383, 86, -383, 86,
	-463, 316, 86, 87, 160, -360, -336, -266, -265, -263,
	107, 118, 42, 406, -264, 96, 155, 302, 305, 304,
	280, 303, -295, -376, 83, 412, 342, 343, -408, 618,
	542, 253, 112, 113, 394, -377, 86, 86, 84, 322,
	86, 86, -543, 87, -305, -336, 42, -308, 42, 356,
	313, -306, -360, 155, -271, 87, -549, 92, -554, -579,
	92, -442, -584, 92, -174, -249, -573, -208, -429, -514,
	-387, 86, -387, 86, 69, 11, 19, -380, -387, -395,
	646, 648, 649, 252, -6, 628, 382, -286, 619, 92,
	21, 92, -523, 92, -430, -491, -142, -283, -348, 285,
	87, -289, 138, 554, 87, 87, -455, -455, -458, -457,
	-461, 458, 314, 466, -395, 92, 92, 87, 87, 92,
	-360, 170, 92, 661, 92, -467, 92, -467, -360, 314,
	-228, -254, -178, 554, -269, -242, -178, 21, 554, 366,
	42, 102, 42, 421, 92, -182, 128, 108, 109, -344,
	-345, 92, -413, -271, -273, 92, -313, -380, -380, -267,
	-184, 36, -268, -311, -408, 554, -141, -140, -267, 554,
	86, -481, 164, 102, 146, 102, 102, -317, -317, -481,
	-470, 21, 87, -449, 87, -449, 86, 128, -383, -469,
	-472, 62, -263, 107, -383, 92, -273, -274, 42, 301,
	297, 128, 128, -275, 42, 281, 282, -285, 86, 312,
	15, 198, 86, 113, 113, -247, -413, -413, -544, 344,
	345, 346, 351, 348, 349, 347, 350, -544, -413, -413,
	86, -436, -435, -383, -356, -356, 155, -583, -209, -212,
	-542, -360, 253, 21, 21, -500, 554, 647, 86, 86,
	-360, -360, -340, 620, 102, 92, 454, -286, -492, 621,
	-519, -462, -271, 128, 87, 76, 552, 555, 87, -460,
	120, 420, 424, -381, -384, 102, 104, 190, 158, 87,
	87, -360, -347, -346, 92, 92, 92, 314, -467, 553,
	-179, 61, 500, 92, 93, 415, 92, 93, 366, -174,
	92, 662, 160, 128, 87, -450, 269, -184, 160, -311,
	-348, -142, -450, -270, -312, -360, 92, -498, 173, 335,
	554, 102, 146, 102, -208, -482, 173, 335, -453, 87,
	87, 87, -449, 102, 87, -476, -473, 86, -311, 271,
	138, 92, 92, 102, 86, -509, 32, 92, -414, 86,
	87, 87, 87, 87, -413, 102, -271, -356, 87, 87,
	160, 649, 86, -395, -395, 86, 21, -340, -493, 622,
	92, -528, 457, -522, -520, 452, 453, 454, 455, 92,
	553, 66, 556, -459, -460, 424, -381, -384, 616, 464,
	464, 464, 662, 160, 128, -467, 92, -230, -360, 312,
	437, -345, 92, -416, -451, 321, 21, -311, -356, -451,
	87, 160, -356, -356, 335, 102, 146, 102, -209, 335,
	-465, 320, 87, -476, -311, -475, -474, 319, 272, 86,
	87, -387, -399, -356, 87, -288, -287, 550, -413, -416,
	84, -416, 84, -416, 84, -416, 84, 87, -271, -360,
	253, -137, 86, 87, 87, -341, -360, -523, 92, -530,
	251, -526, -527, 456, -520, 21, 454, 21, 21, -143,
	160, 66, 117, 465, 465, 465, -346, 92, 92, -229,
	36, 459, 393, -417, 259, 356, 357, 96, 554, 342,
	343, 360, 359, 361, 21, -452, -271, -312, -380, -380,
	102, 102, 87, 160, -360, 268, 86, -394, -388, -387,
	268, 87, -360, -294, -292, -293, 83, 471, 310, 311,
	87, -544, -544, -544, -544, -295, 87, 160, -393, 87,
	160, -537, 86, 102, -525, -524, -526, 21, -523, 21,
	-523, -523, 461, 554, -459, 92, -356, -356, 92, 92,
	341, -356, -356, -356, -336, 86, -464, -474, -473, -394,
	87, 160, -435, -293, 83, -292, 83, 16, 15, -416,
	-416, -416, -416, 86, 87, -360, -540, 32, 87, -536,
	-535, -337, -531, -360, 457, 458, 92, -523, 128, 555,
	-614, -613, 639, 102, 102, -360, 102, 102, 92, -449,
	-454, 87, -388, -291, 307, 308, 32, 173, -291, -393,
	-539, -538, -338, 87, 160, 159, 92, 556, 92, 87,
	-470, 107, 42, 309, 87, 160, 128, -535, -360, -538,
	42, -387, 159, -360,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 0, 0, 0, 0, 0, 720, 721, 0, 684,
	0, 0, 0, 0, 0, 0, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 533, 0, 0, 0,
	0, 803, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, -2, 733, 0,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 733, 0, 0,
	0, 811, 0, 0, 0, 854, 872, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1411, 1412,
	1413, 1414, 2216, 2186, -2, 1948, 1923, 2110, 2111, 2005,
	2018, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
	2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
	2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
	2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301,
	2302, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2112, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, -2, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
	2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, -2, -2, -2, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2217,
	2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 0, 314, 312, 1893, 1923,
	1948, 2005, 2018, 2019, 2058, 2110, 2111, 2143, 2186, 2202,
	2203, 2204, 2216, 0, 0, 1007, 0, 781, 0, 0,
	786, 1358, 781, 351, 722, 723, 811, 837, 682, 0,
	388, 0, 1938, 392, 2193, 0, 0, 0, 0, 679,
	382, 383, 384, 385, 386, 387, 0, 0, 980, 0,
	0, 378, 0, 345, 2008, 2215, 1415, 0, 0, 0,
	0, 0, 201, 1131, 203, 1133, 207, 215, 0, 0,
	0, 220, 221, 224, 225, 226, 227, 228, 0, 232,
	0, 234, 237, 0, 239, 240, 0, 243, 244, 245,
	0, 255, 256, 257, 1134, 1135, 1136, -2, 130, 1005,
	1851, 1737, 0, 1744, 1757, 1768, 1497, 1498, 1499, 1500,
	0, 0, 0, 0, 0, 0, 1508, 1509, 0, 1539,
	2257, 2298, 2299, 0, 1517, 1518, 1519, 1520, 1521, 1522,
	0, 141, 153, 154, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 0, 1798, 1799, 1800, 1708, 1484, 1411, 0, 2266,
	0, 2288, 2293, 2294, 2295, 2296, 2287, 0, 0, 1692,
	0, 1682, 0, 0, -2, -2, 0, 0, 2083, -2,
	2300, 2301, 2302, 2263, 2284, 2292, 2267, 2268, 2291, 2259,
	2260, 2261, 2254, 2255, 2256, 2258, 2270, 2272, 2283, 0,
	2279, 2289, 2290, 2191, 0, 0, 2238, 0, 0, 0,
	2233, 155, 156, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1703, -2, 1705, -2, 1707, -2, 1710, -2, -2, -2,
	-2, 1715, 1716, -2, 1718, -2, -2, -2, -2, -2,
	-2, -2, 1694, 1695, 1696, 1697, 1686, 1687, 1688, 1689,
	1690, 1691, -2, -2, -2, 837, 930, 0, 837, 0,
	812, 859, 862, 865, 868, 815, 0, 0, 103, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 329, 331, 0, 335, 0, 0, 331, 328, 322,
	0, 1171, 1171, 1171, 0, 0, 0, 0, 1171, 1171,
	1171, 1171, 1171, 0, 1171, 0, 0, 0, 0, 0,
	1171, 0, 1040, 1138, 1139, 1140, 1169, 1170, 1243, 0,
	0, 0, 738, 734, 735, 736, 737, 825, 0, 827,
	830, 0, 0, 659, 659, 897, 897, 0, 605, 0,
	0, 0, 659, 0, 619, 611, 0, 0, 0, 659,
	0, 0, 832, 832, 0, 662, 669, 659, 659, -2,
	659, 659, 656, 659, 0, 0, 1183, 625, 626, 627,
	611, 611, 630, 631, 632, 642, 643, 670, 1875, 0,
	0, 533, 533, 0, 533, 533, 0, 533, 533, 533,
	0, 740, 1964, 2053, 1945, 2024, 1903, 2008, 2215, 0,
	287, 2083, 292, 0, 1947, 1967, 0, 0, 1986, 0,
	-2, 0, 367, 837, 0, 0, 811, 0, 0, 0,
	0, 533, 533, 533, 533, 533, 1242, 533, 533, 533,
	533, 533, 0, 0, 0, 533, 533, 533, 533, 0,
	873, 874, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 109, 108, 0, 1852, 1870, 1803, 1804, 1805, 1857,
	1807, 1861, 1861, 1861, 1861, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1861, 1861, 0, 0, 1850,
	1827, 1859, 1859, 1859, 1857, 1854, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1864, 1864, 1867, 1867, 1864, 0, 428, 426, 427, 1733,
	0, 0, 0, 0, 781, 785, 1356, 0, 0, 0,
	837, -2, 0, 0, 683, 389, 1416, 0, 0, 393,
	0, 394, 0, 0, 396, 0, 0, 0, 417, 0,
	420, 404, 405, 406, 407, 400, 0, 181, 0, 380,
	381, 0, 0, 347, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 212, 208, 216, 219, 229, 236,
	0, 248, 250, 253, 209, 217, 222, 223, 230, 251,
	210, 213, 214, 218, 252, 254, 211, 231, 235, 249,
	233, 238, 241, 242, 247, 0, 182, 0, 0, 0,
	0, 0, 1743, 0, 0, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 1737, 0, 0, 1503, 1504, 1505, 1506, 0,
	1510, 0, 1540, 0, 0, 0, 0, 0, 0, 1797,
	1801, 0, 1733, 1733, 0, 1733, 1729, 0, 0, 0,
	0, 0, 0, 1733, 1665, 0, 0, 1667, 1683, 0,
	0, 1669, 1670, 0, 1673, 1674, 1733, 0, 1733, 1678,
	1733, 1733, 1733, 1661, 1662, 0, 1729, 1729, 1729, 1729,
	0, 0, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
	1729, 1729, 1729, 1729, 1729, 1729, 1729, 0, 0, 0,
	0, 832, 0, 838, 0, -2, 0, 856, 858, 860,
	861, 863, 864, 866, 867, 869, 870, 817, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 71, 73, 0,
	0, 0, 0, 0, 0, 333, 0, 338, 324, 2045,
	0, 323, 0, 0, 0, 0, 0, 1004, 0, 0,
	1171, 1171, 1171, 1041, 0, 0, 0, 0, 0, 0,
	0, 0, 1171, 1171, 1171, 1171, 0, 1189, 0, 0,
	0, 740, 739, 0, 826, 0, 0, 70, 594, 595,
	596, 897, 0, 0, 598, 599, 0, 600, 0, 0,
	611, 659, 659, 617, 618, 613, 612, 665, 666, 662,
	0, 662, 662, 897, 0, 636, 637, 638, 659, 659,
	644, 833, 0, 645, 646, 662, 0, 667, 668, 897,
	0, 0, 897, 897, 0, 654, 655, 657, 659, 0,
	0, 1171, 0, 675, 613, 613, 1876, 1877, 0, 0,
	1180, 0, 0, 0, 0, 678, 0, 0, 0, 444,
	445, 0, 0, 741, 0, 266, 270, 0, 273, 0,
	2053, 0, 2053, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 310, 311, 0, 0, 0, 0, 301, 304,
	1350, 1351, 1128, 1129, 305, 306, 359, 360, 0, 832,
	855, 857, 851, 852, 853, 0, 72, 0, 0, 0,
	0, 0, 533, 0, 0, 0, 0, 0, 716, 0,
	1020, 718, 0, 0, 0, 0, 0, 905, 899, 901,
	975, 141, 875, 8, 126, 123, 0, 19, 0, 0,
	19, 19, 0, 19, 315, 0, 1873, 1871, 1872, 1806,
	1858, 0, 1832, 0, 1833, 1834, 1835, 1846, 1847, 0,
	0, 1828, 0, 1829, 1830, 1831, 1822, 0, 1823, 1824,
	0, 1825, 1826, 313, 425, 0, 0, 1734, 1008, 0,
	759, 773, 754, 0, 762, 0, 0, 1358, 0, 0,
	0, 0, 742, 773, 744, 0, 762, 832, 809, 0,
	787, 0, 0, 390, 0, 401, 395, 0, 402, 397,
	398, 0, 0, 419, 421, 422, 423, 408, 409, 680,
	376, 377, 368, 369, 370, 371, 372, 373, 374, 375,
	0, 0, 0, 379, 151, 0, 348, 349, 0, 0,
	0, 195, 196, 197, 198, 199, 200, 202, 186, 705,
	707, 1120, 1132, 0, 1123, 0, 205, 246, 178, 0,
	0, 0, 1738, 1739, 1740, 1741, 1742, 1747, 0, 1749,
	1751, 1753, 1755, 0, 1773, -2, -2, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1758,
	1771, 1772, 0, 0, 0, 0, 0, 0, 1769, 1769,
	1764, 0, 1523, 1352, 1353, 1501, 0, 0, 1537, 1541,
	0, 0, 0, 0, 0, 0, 1154, 1857, 0, 142,
	1728, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
	0, 0, 1737, 0, 0, 0, 1730, 1731, 0, 0,
	0, 1620, 0, 0, 1626, 1627, 1628, 0, 768, 0,
	1693, 1666, 1684, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929, 931, 0, 777, 779, 780, 806, 787, 813,
	0, 0, 0, 101, 106, 0, 1210, 0, 0, 0,
	0, 0, 0, 0, 74, 1184, 75, 1186, 342, 343,
	0, 0, 337, 325, 2045, 327, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 1056, 1057, 531,
	1114, 0, 0, 0, 1130, 1158, 1167, 0, 0, 0,
	0, 0, 1216, 1042, 1047, 1048, 1049, 1043, 1044, 1050,
	1051, 0, 828, 0, 0, 944, 597, 660, 661, 898,
	601, 0, 0, 608, 2008, 613, 897, 897, 620, 614,
	621, 664, 622, 623, 624, 662, 897, 897, 834, 659,
	662, 647, 663, 662, 1358, 651, 0, 658, 1358, 676,
	1358, 0, 674, 628, 629, 1218, 830, 442, 443, 448,
	450, 0, 499, 499, 499, 482, 499, 0, 0, 470,
	1878, 0, 0, 0, 0, 479, 1878, 0, 0, 1878,
	1878, 1878, 1878, 1878, 1878, 1878, 0, 0, 1878, 1878,
	1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 0,
	1878, 1878, 1878, 1878, 1878, 1335, 1878, 0, 498, 1181,
	489, 490, 491, 492, 497, 0, 0, 527, 0, 0,
	1055, 0, 531, 0, 0, 1097, 0, 0, 910, 0,
	911, 912, 913, 908, 946, 970, 970, 0, 970, 950,
	1358, 0, 0, 0, 278, 279, 267, 0, 268, 0,
	0, 281, 282, 0, 284, 285, 286, 293, 1945, 2024,
	288, 290, 0, 0, 294, 307, 308, 309, 0, 0,
	299, 300, 0, 0, 362, 363, 365, 0, 787, 1185,
	702, 1354, 703, 704, 708, 0, 0, 711, 712, 713,
	714, 715, 1022, 0, 0, 1106, 1107, 1108, 1109, 897,
	0, 906, 0, 902, 976, 0, 978, 0, 0, 124,
	19, 0, 117, 114, 0, 0, 0, 0, 0, 1853,
	1802, 1874, 0, 0, 0, 1855, 0, 0, 0, 0,
	0, 107, 789, 749, 0, 753, 770, 0, 774, 0,
	0, 766, 758, 763, 0, 0, 783, 750, 1357, 0,
	0, 0, 0, 743, 0, 0, 748, 787, 0, 810,
	839, 840, 843, 1417, 0, 403, 399, 418, 0, 533,
	0, 0, 0, 189, 1117, 0, 190, 194, 184, 0,
	0, 0, 1122, 0, 1119, 1124, 0, 204, 0, 0,
	179, 180, 1201, 1210, 0, 0, 0, 1748, 1750, 1752,
	1754, 1756, 0, 1759, 1769, 1769, 1765, 0, 1760, 0,
	1762, 0, 1738, 1507, 0, 1542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 1610, 1611,
	0, 0, 1615, 0, 1617, 1618, 1619, 1621, 0, 0,
	0, 1625, 0, 1664, 1685, 1668, 1671, 0, 1675, 0,
	1677, 1679, 1680, 1681, 0, 837, 837, 0, 0, 1581,
	1581, 1581, 0, 0, 0, 0, 1581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1526, 0,
	1527, 1528, 0, 0, 0, 932, 807, 0, 0, 0,
	0, 0, 1208, 0, 91, 0, 0, 0, 0, 96,
	0, 0, 76, 344, 332, 334, 0, 326, 0, 1172,
	0, 0, 0, 0, 0, 1010, 1011, 1013, 0, 1016,
	1017, 1018, 1022, 830, 0, 830, 1067, 1878, 535, 0,
	0, 1116, 0, 1086, 0, 0, 0, -2, 0, 0,
	1167, 0, 0, 0, 1220, 0, 0, 0, 727, 731,
	23, 831, 0, 604, 602, 0, 606, 0, 607, 659,
	615, 616, 897, 639, 640, 0, 0, 897, 659, 659,
	650, 662, 671, 0, 672, 1358, 1220, 0, 0, 1180,
	1286, 1254, 460, 0, 1371, 1372, 500, 0, 1378, 1387,
	1171, 1449, 0, 1387, 0, 0, 1389, 1390, 0, 0,
	0, 0, 483, 484, 0, 469, 0, 0, 0, 0,
	0, 0, 468, 0, 0, 510, 0, 0, 0, 0,
	0, 1879, 1878, 1878, 0, 477, 478, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 1878, 1878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	1343, 0, 1067, 1878, 0, 0, 0, 0, 535, 1111,
	1084, 1102, 0, 446, 447, 507, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 830, 971, 0, 973, 974,
	948, -2, 0, 910, 953, 1733, 0, 271, 272, 0,
	0, 277, 295, 297, 269, 0, 0, 0, 296, 298,
	302, 303, 361, 364, 366, 849, 0, 0, 1244, 0,
	1023, 1024, 1026, 1027, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1929, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1021, 719, 888, 900, 907, 977, 979, 142, 903, 0,
	127, 19, 126, 118, 119, 0, 19, 0, 0, 0,
	0, 1863, 1862, 1848, 0, 1849, 1860, 1865, 0, 1868,
	0, 429, 793, 0, 0, 773, 775, 0, 0, 773,
	0, 0, 782, 0, 0, 0, 0, 0, 0, 0,
	773, 849, 789, 0, 846, 844, 845, 0, 0, 681,
	152, 424, 0, 0, 0, 0, 0, 706, 0, 1121,
	186, 0, 0, 206, 0, 0, 0, 1210, 1205, 1732,
	1761, 1763, 0, 1770, 1766, 1502, 1511, 1538, 0, 0,
	1544, 1556, 1556, 0, 0, 0, 1547, 1861, 1861, 1550,
	1857, 1859, 1857, 1556, 1556, 0, 1155, 0, 1156, 843,
	143, 0, 0, 1616, 0, 0, 0, 769, 0, 0,
	0, 1577, 1579, 1581, 1581, 1588, 1582, 1589, 1590, 1581,
	1581, 1581, 1581, 1595, 1581, 1581, 1581, 1581, 1581, 1581,
	1581, 1581, 1581, 1581, 1581, 1575, 0, 0, 1791, 1792,
	778, 0, 0, 820, 821, 822, 823, 824, 0, 0,
	61, 61, 1210, 0, 100, 92, 0, 0, 0, 0,
	0, 336, 0, 77, 78, 80, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 1015, 0, 0, 0,
	1364, 0, 1071, 1068, 1069, 1070, 0, 1111, 536, 537,
	538, 539, 0, 0, 0, 1115, 0, 0, 1079, 0,
	0, 0, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	-2, 1175, 0, 0, 0, 1364, 1194, 0, 0, 1199,
	1364, 1364, 0, 1228, 0, 1217, 781, 0, -2, 0,
	0, 729, 0, 0, 945, 603, 609, 897, 633, 835,
	836, 1358, 897, 897, 659, 677, 673, 1228, 1219, 0,
	449, 499, 0, 1274, 0, 0, 1280, 0, 1287, 453,
	0, 501, 0, 1377, 1405, 1388, 1405, 1450, 1405, 1405,
	1171, 0, 501, 0, 0, 471, 0, 0, 0, 0,
	0, 467, 504, 843, 454, 456, 457, 458, 508, 509,
	511, 0, 513, 514, 473, 485, 486, 487, 488, 0,
	0, 0, 480, 493, 494, 495, 496, 455, 1303, 1304,
	1305, 1308, 1309, 1310, 1311, 0, 0, 1314, 1315, 1316,
	1317, 1318, 1402, 1403, 1404, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1344, 1345, 1346, 1347, 1348, 1349, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 0, 0, 1339, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 1111, 530,
	0, 0, 1086, 0, 1104, 0, 1098, 1099, 0, 0,
	751, 897, 354, 0, 940, 933, 0, 917, 0, 919,
	937, 920, 938, 939, 924, 0, 926, 0, 922, 923,
	928, 921, 897, 909, 947, 972, 949, 952, 954, 955,
	961, 0, 0, 0, 0, 265, 274, 275, 276, 283,
	0, 555, 289, 805, 0, 1355, 709, 710, 1245, 1246,
	717, 0, 1028, 886, 0, 0, 122, 125, 0, 120,
	0, 0, 0, 0, 112, 110, 1856, 0, 0, 795,
	166, 0, 0, 0, 771, 0, 776, 773, 757, 767,
	756, 764, 765, 784, 1359, 1360, 1361, 1362, 0, 773,
	747, 746, 808, 793, 841, 842, 0, 1418, 391, 0,
	1118, 186, 191, 192, 193, 187, 185, 1125, 0, 1127,
	0, 1203, 0, 0, 1767, 1543, 1512, 1545, 1557, 1558,
	1546, 0, 1514, 1515, 1548, 1549, 1551, 1552, 1553, 1554,
	1555, 1516, 0, 1157, 1612, 0, 1614, 1622, 1623, 0,
	1672, 1676, 0, 0, 0, 0, 0, 1586, 1587, 1591,
	1592, 1593, 1594, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 837, 1576, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 63, 0, 63,
	1209, 1211, 0, 975, 0, 0, 97, 0, 0, 79,
	81, 0, 2009, 0, 0, 0, 0, 88, 1003, 1006,
	1012, 1014, 0, 0, 0, 1365, 1366, 1368, 1369, 1370,
	0, 1039, 0, 0, 1059, 1060, 1061, 1073, 0, 541,
	542, 0, 0, 0, 554, 550, 551, 552, 532, 1110,
	1093, 0, 0, 1082, 0, 0, 1092, 0, 1176, 1878,
	1878, 1878, 0, 0, 1288, 1878, 1878, 0, 1196, 1198,
	0, 0, 1292, 1231, 0, 0, 1222, 0, 970, 0,
	0, 897, 728, 731, 732, 829, 610, 648, 652, 649,
	897, 1231, 441, 1252, 0, 0, 0, 0, 0, 1284,
	0, 0, 1256, 0, 472, 502, 0, -2, 0, 1406,
	0, 1391, 1406, 0, 0, 1405, 0, 461, 501, 0,
	0, 0, 515, 520, 521, 0, 517, 518, 1445, 0,
	519, 0, 506, 0, 512, 1306, 1307, 0, 1312, 1313,
	0, 1337, 0, 0, 0, 452, 522, 0, 0, 0,
	523, 524, 529, 1112, 1113, 1079, 0, 1093, 0, 1103,
	0, 1100, 1101, 837, 0, 0, 914, 941, 0, 0,
	915, 0, 916, 918, 925, 927, 353, 956, 0, 0,
	958, 959, 960, 951, 291, 850, 1025, 0, 871, 0,
	0, 904, 0, 19, 0, 0, 115, 1866, 1869, 797,
	0, 794, 167, 0, 0, 0, 0, 761, 772, 755,
	1363, 745, 795, 847, 848, 188, 183, 1126, 1213, 0,
	1204, 0, 1469, 1525, 0, 1624, 0, 1581, 1578, 1581,
	1580, 1572, 0, 1529, 0, 1531, 1532, 1533, 0, 1535,
	1536, 0, 816, 0, 59, 0, 62, 60, 0, 99,
	93, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 1045, 1292, 0, 1045, 1072, 1058, 0, 0,
	543, 544, 0, 547, 553, 1074, 0, 0, 1076, 1077,
	1078, 0, 0, 1090, 0, 0, 0, 0, 1168, 1182,
	0, 0, 0, -2, 0, -2, 1193, 0, 1237, 0,
	1229, 0, 1221, 0, 1224, 897, 897, -2, 725, 730,
	0, 653, 1237, 1254, 0, 1275, 0, 0, 0, 0,
	0, 0, 0, 1255, 0, 1268, 503, 1407, -2, 1421,
	1423, 0, 1181, 1426, 1427, 0, 0, 0, 0, 0,
	0, 1476, 1435, 0, 0, 1439, 1440, 1441, 0, 0,
	1444, 0, 1785, 1786, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 1385, 462, 463, 0, 465, 466, 1878,
	1446, 505, 459, 1878, 475, 1336, 1340, 1341, 1338, 528,
	525, 526, 1082, 1085, 1096, 1105, 752, 832, 355, 356,
	942, 0, 934, 965, 962, 0, 0, 1029, 887, 895,
	2238, 2240, 2237, 116, 121, 0, 0, 799, 0, 796,
	0, 790, 792, 177, 760, 797, 137, 169, 0, 0,
	1513, 0, 0, 0, 1613, 1663, 1584, 1585, 0, 1573,
	0, 1567, 1568, 1569, 1574, 0, 0, 819, 814, 64,
	95, 0, 98, 68, 83, 0, 84, 0, 0, 0,
	0, 1031, 1038, 1052, 1187, 1367, 1037, 0, 0, 540,
	545, 0, 548, 549, 1094, 1093, 0, 1080, 1081, 0,
	1088, 0, 0, 1177, 1178, 1179, 1289, 1290, 1291, 1247,
	1195, 0, -2, 1300, 0, 0, 1191, 1213, 1247, 0,
	0, 1225, 0, 1232, 0, 1230, 1223, 837, 726, 1234,
	451, 1286, 1276, 0, 1278, 0, 0, 0, 0, 1257,
	-2, 0, 1422, 1424, 1425, 1428, 1429, 1430, 1481, 1482,
	1483, 0, 0, 1433, 1478, 1479, 1480, 1434, 0, 0,
	0, 0, 0, 1783, 1784, 1474, 0, 0, 1392, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1393, 0, 0,
	0, 1384, 1386, 464, 0, 0, 1878, 1095, 352, 0,
	0, 966, 968, 963, 964, 889, 0, 0, 0, 0,
	111, 113, 128, 0, 798, 168, 0, 799, 139, 0,
	160, 0, 1214, 0, 1524, 0, 0, 0, 1583, 1570,
	0, 0, 0, 0, 0, 1787, 1788, 1789, 0, 1530,
	1534, 94, 0, 66, 0, 85, 86, 0, 0, 0,
	0, 1053, 1054, 1062, 1063, 0, 1065, 1066, 546, 1075,
	1083, 1087, 1090, 0, 1142, 1249, 0, 1197, 1180, 1302,
	1878, 1200, 1249, 0, 1294, 1878, 1878, 1215, 0, 1227,
	0, 1239, 0, 1233, 832, 440, 0, 1236, 1272, 1277,
	1279, 1281, 0, 1285, 1283, 1258, -2, 0, 1266, 0,
	0, 1431, 1432, 0, 0, 1682, 1878, 0, 1464, 0,
	1142, 1142, 1142, 1142, 0, 516, 474, 0, 943, 957,
	0, 896, 0, 0, 0, 0, 0, 788, 129, 0,
	138, 157, 0, 170, 171, 0, 0, 0, 0, 1206,
	0, 1472, 1473, 0, 1559, 0, 0, 0, 1563, 1564,
	1565, 1566, 65, 68, 0, 0, 87, 0, 1030, 0,
	1064, 1089, 1091, 1141, 1190, 0, 1286, 1301, 0, 1192,
	1293, 0, 0, 0, 1226, 1238, 0, 1241, 724, 1235,
	1253, 0, 1282, 1259, 1267, 0, 1262, 0, 0, 0,
	1477, 0, 1438, 0, 1443, 1452, 1465, 0, 0, 1373,
	0, 1375, 0, 1379, 0, 1381, 0, 0, 476, 967,
	969, 0, 1733, 891, 892, 0, 801, 791, 140, 144,
	0, 166, 163, 0, 172, 0, 0, 0, 0, 1202,
	0, 1470, 0, 1560, 1561, 1562, 67, 69, 89, 0,
	1032, 1033, 1046, 1143, 1878, 1878, 0, 0, 0, 1149,
	1150, 1878, 1878, 1878, 0, 1274, 1306, 1295, 1296, 1297,
	1240, 1273, 1261, 0, -2, 1269, 0, 0, 1735, 1745,
	1746, 1436, 1442, 1451, 1453, 1454, 0, 1466, 1467, 1468,
	1475, 1142, 1142, 1142, 1142, 1383, 890, 0, 0, 800,
	0, 131, 0, 0, 161, 162, 164, 0, 173, 0,
	175, 176, 0, 0, 1571, 1034, 0, 0, 1146, 1147,
	0, 0, 0, 0, 1250, 0, 1252, 1263, -2, 0,
	1271, 0, 1437, 1455, 0, 1456, 0, 0, 0, 1374,
	1376, 1380, 1382, 1733, 893, 802, 1212, 0, 145, 0,
	147, 149, 150, 1408, 158, 159, 165, 174, 0, 0,
	1019, 1035, 0, 1144, 1145, 1148, 1151, 1152, 1153, 0,
	1254, 1270, 1736, 1457, 1459, 1460, 0, 0, 1458, 0,
	132, 133, 0, 146, 0, 0, 1207, 1471, 1036, 1251,
	1248, 1461, 1463, 1462, 894, 0, 0, 148, 1409, 134,
	135, 136, 0, 1410,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 663, 660,
	129, 128, 130, 3, 664, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 661, 141, 662, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1116
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1126
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1136
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1227
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1251
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1282
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1299
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1319
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1329
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1349
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1355
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1362
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1376
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1385
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1454
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1463
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1477
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1483
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1487
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1512
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1516
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1522
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1535
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1562
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1576
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1587
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1593
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1597
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1610
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1622
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1634
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1638
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1652
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1656
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1661
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1668
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1676
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1682
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1691
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1702
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1706
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1712
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1716
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1732
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1752
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1771
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1775
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1779
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1797
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1807
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1814
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1819
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1826
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1831
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1835
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1863
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1867
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1873
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1881
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1901
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1920
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1949
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1958
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1962
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2005
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2009
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2019
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2032
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2057
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2065
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2075
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2085
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2089
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2097
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2101
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2112
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2116
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2129
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2138
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2142
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2296
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2300
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2304
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2308
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2312
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2316
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2332
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2336
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2340
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2344
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2348
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2363
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2372
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2379
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2386
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2413
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2417
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2430
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2438
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2442
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2446
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2450
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2456
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2489
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2523
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2527
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2550
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2556
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2560
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2566
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2592
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2650
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2657
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2664
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2672
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2695
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2703
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2709
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2713
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2719
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2729
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2733
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2747
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2786
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2791
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2795
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2799
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2803
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2807
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2819
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2823
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2829
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2833
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2846
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2857
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2896
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2909
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2925
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2932
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2943
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2958
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2964
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2980
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2984
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3059
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3070
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3076
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3084
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3088
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3092
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3096
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3122
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3140
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3150
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3166
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3170
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3178
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3186
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3226
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3230
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3236
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3242
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3247
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3254
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3269
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3276
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3284
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3288
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3313
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3336
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3346
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3353
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3362
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3370
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3374
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3380
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3391
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3395
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3401
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3405
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3429
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3439
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3449
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3465
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3487
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3493
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3497
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3509
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3517
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3535
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3545
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3555
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3576
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3601
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3605
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3609
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3613
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3634
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3665
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3669
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3674
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3680
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3686
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3694
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3698
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3704
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3712
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3719
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3725
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3731
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3737
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3743
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3750
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3757
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3765
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3771
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3783
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3789
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3795
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3803
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3807
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3832
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3862
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3877
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3890
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3907
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3919
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3936
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3944
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3948
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3957
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3973
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3977
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3981
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3985
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3992
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4004
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4011
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4015
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4022
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4026
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4030
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4034
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4041
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4048
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4054
		{
			yyVAL.item = nil
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4059
		{
			yyVAL.item = nil
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4135
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4180
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4193
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4197
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4212
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4223
		{
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4227
		{
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4232
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4242
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4252
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4260
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4309
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4313
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4321
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4325
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4329
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4339
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4348
		{
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4350
		{
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4359
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4369
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4378
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4382
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4386
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4392
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4404
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4419
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4450
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4456
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4482
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4494
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4505
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4514
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4518
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4523
		{
			yyVAL.str = ""
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4527
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4533
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4548
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4552
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4558
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4566
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4573
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4581
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4593
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4598
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4606
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4612
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4617
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4623
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4629
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4633
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4661
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4669
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4677
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4685
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4689
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4695
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4708
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4716
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4725
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4731
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4739
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4747
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4755
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4761
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4775
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4783
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4789
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4799
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4804
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4811
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4827
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4840
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4851
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4855
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4861
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4867
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4876
		{
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4878
		{
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4881
		{
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4890
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4894
		{
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4899
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4908
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4915
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4921
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4929
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4936
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4943
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4963
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4971
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4981
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4985
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4991
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4998
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5004
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5012
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5019
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5026
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5045
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5049
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5053
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5062
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5066
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5072
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5081
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5085
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5091
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5095
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5101
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5105
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5111
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5116
		{
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5120
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5127
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5131
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5138
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5147
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5153
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5157
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5163
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5167
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5189
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5200
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5211
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5233
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5256
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5264
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5273
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5277
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5290
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5294
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5299
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5303
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5310
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5315
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5322
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5328
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5332
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5348
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5353
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5357
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5363
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5373
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5392
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5416
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5425
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5429
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5433
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5441
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5454
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5463
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5467
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5473
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5485
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5490
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5494
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5500
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5508
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5513
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5517
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5523
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5533
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5544
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5548
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5552
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5557
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5561
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5565
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5574
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5582
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5586
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5590
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5604
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5608
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5618
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5628
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5638
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5650
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5658
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5675
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5683
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5691
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5699
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5707
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5715
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5723
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5731
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5739
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5749
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5762
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5766
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5772
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5776
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5782
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5786
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5790
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5794
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5798
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5802
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5806
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5810
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5814
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5840
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5844
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5849
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5853
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5863
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5872
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5881
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5892
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5896
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5905
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5910
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5914
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5920
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5924
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5930
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5934
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5938
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5942
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5947
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5955
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5961
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5969
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5979
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5989
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5993
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5999
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6008
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6017
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6026
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6034
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6045
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6055
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6059
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6065
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6069
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6079
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6083
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6087
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6097
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6103
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6114
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6118
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6124
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6130
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6134
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6140
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6146
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6150
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6154
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6158
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6164
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6168
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6174
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6178
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6188
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6194
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6198
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6208
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6221
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6227
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6233
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6247
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6265
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6269
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6275
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6285
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6289
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6293
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6298
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6302
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6306
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6310
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6319
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6323
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6327
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6331
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6336
		{
			yyVAL.str = ""
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6340
		{
			yyVAL.str = yyDollar[1].str
		}
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6344
		{
			yyVAL.str = yyDollar[2].str
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6350
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6354
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6359
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6363
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6367
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6371
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6375
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6381
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1003:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6423
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6436
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6442
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1006:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6448
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6461
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6466
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6473
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6480
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6484
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6490
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6496
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6501
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6505
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6509
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6520
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6553
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6558
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6565
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6572
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6576
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6582
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6588
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6592
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6596
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6602
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6608
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6614
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6618
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6624
		{
			yyVAL.str = ""
		}
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6631
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1037:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6637
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6652
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6669
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6686
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6690
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6696
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6700
		{
			yyVAL.str = "DEFINER = "
		}
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6704
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6709
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6713
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6727
		{
			yyVAL.str = ""
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6735
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6741
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6746
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6752
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6765
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6770
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6775
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6781
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6788
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6795
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6802
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6809
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6817
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6823
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6830
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6837
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6845
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6851
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6860
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6877
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6893
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6912
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6918
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6927
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6945
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6951
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6958
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6966
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6972
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6980
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6986
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6994
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7000
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7018
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7022
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7029
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7034
		{
			yyVAL.str = ""
		}
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7038
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1095:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7044
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7057
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7072
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7078
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7084
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7090
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7097
		{
			yyVAL.str = ""
		}
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7101
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7110
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7116
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7124
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7132
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7140
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7148
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7153
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7165
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7176
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7285
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7289
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7295
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7308
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7312
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7318
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7331
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7335
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7339
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7348
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7354
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7361
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7367
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7376
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7383
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7394
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7398
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7404
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7413
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7417
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7421
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7426
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7430
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7434
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7438
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7444
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7479
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7511
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7517
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7529
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7535
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7541
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7547
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7553
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7559
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7570
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7581
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7590
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7594
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7600
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7614
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7628
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7632
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7636
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7640
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7644
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7648
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7652
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7656
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7662
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7677
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7681
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7692
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7696
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7701
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7705
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7711
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7715
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7721
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7730
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7739
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7745
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7749
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7755
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7766
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7772
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7790
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7808
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7826
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7842
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7855
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7867
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7876
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7888
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7898
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7908
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7919
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7929
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7940
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7948
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7959
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7966
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7976
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7989
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7997
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8006
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8015
		{
			yyVAL.str = ""
		}
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8019
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8025
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8029
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8034
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8038
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8045
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8057
		{
			yyVAL.str = ""
		}
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8061
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1215:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8067
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8088
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8102
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8110
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8120
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8127
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8134
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8141
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8148
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8152
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8156
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8160
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8164
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8171
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8182
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8189
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8196
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8200
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8206
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8212
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8216
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8223
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8230
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8237
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8244
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8248
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8253
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8257
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8261
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8270
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8287
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8295
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8303
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8307
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8319
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8323
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8329
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8333
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8339
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8352
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8370
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8376
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8380
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8386
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8395
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8406
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8410
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8419
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8425
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8430
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8438
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8442
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8452
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8456
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8467
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8475
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8483
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8491
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8502
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8511
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8521
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8531
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8535
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8540
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8544
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8550
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8554
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8560
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8569
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8583
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8589
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8593
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8599
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8608
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8622
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8628
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8632
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8636
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8642
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8646
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8650
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8654
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8658
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8662
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8666
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8679
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8683
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8691
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8695
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8699
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8703
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8707
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8711
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8719
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8725
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8731
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8735
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8739
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8743
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8747
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8753
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8759
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8765
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8771
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8777
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8783
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8787
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8791
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8795
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8800
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8811
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8815
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8821
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8832
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8836
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8842
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8846
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8862
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8876
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8880
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8889
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8895
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8907
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8914
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8923
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8931
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8938
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8946
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8957
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8963
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8967
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8971
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8977
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8981
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8987
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9000
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9013
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9054
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9096
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9110
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9116
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9129
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9142
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9155
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9168
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9183
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9193
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9199
		{
			yyVAL.str = ""
		}
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9203
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9213
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9219
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9225
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9247
		{
			yyVAL.str = ""
		}
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9251
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9257
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9263
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9267
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9272
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9280
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9284
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9288
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9292
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9298
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9308
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9313
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9324
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9330
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9334
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9340
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9344
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9348
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9352
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9356
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9360
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9365
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9369
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9373
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9381
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9385
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9389
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9393
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9401
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9415
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9419
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9423
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9431
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9435
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9441
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9445
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9450
		{
			yyVAL.str = ""
		}
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9454
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9460
		{
			yyVAL.str = ""
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9464
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9470
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9487
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9494
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9501
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9508
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9515
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9524
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9530
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9536
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9540
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9548
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9552
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9557
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9564
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9568
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9572
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9577
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9581
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9585
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9589
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9602
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9607
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9611
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9627
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9633
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9637
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9641
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9645
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9669
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9673
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9677
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9681
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9687
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9691
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9695
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9699
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9703
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9707
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9711
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9715
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9723
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9765
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9769
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9773
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9790
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9798
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9802
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9812
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9816
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9820
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9824
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9836
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9840
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9859
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9868
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9877
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9888
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9898
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9908
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9917
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9927
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9937
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9947
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9956
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9970
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9979
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9985
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9989
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9995
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10004
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10016
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10033
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10050
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10063
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10102
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10117
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10132
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10149
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10164
		{
		}
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10171
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10175
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10179
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10185
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10189
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10193
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10197
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10203
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10207
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10211
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10217
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10225
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10235
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10239
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10246
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10251
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10255
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10260
		{
			yyVAL.str = ","
		}
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10264
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10269
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10273
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10285
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10311
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10323
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10335
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10346
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10378
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10388
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10410
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10421
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10432
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10454
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10465
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10476
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10487
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10498
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10509
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10520
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10542
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10553
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10577
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10586
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10595
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10604
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10613
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10624
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10633
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10643
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10652
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10670
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10679
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10691
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10715
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10750
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10786
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10799
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10812
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10824
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10833
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10841
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10849
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10871
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10882
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10893
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10902
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10914
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10924
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10934
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10943
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10963
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10973
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10991
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11005
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11015
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11034
		{
		}
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11036
		{
		}
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11078
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11090
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11094
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11098
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11104
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11109
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11113
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11119
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11123
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11129
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11133
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11140
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11144
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11148
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11157
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11161
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11165
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11170
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11180
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11184
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11188
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11192
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11196
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11200
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11204
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11208
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11212
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11216
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11224
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11228
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11232
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11236
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11240
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11244
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11248
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11252
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11256
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11260
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11276
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11280
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11287
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11291
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11295
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11301
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11305
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11309
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11313
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11317
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11321
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11331
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11335
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11339
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11343
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11362
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11367
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11377
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11390
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11395
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11399
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11403
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11407
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11411
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11418
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11422
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11426
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11430
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11437
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11453
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11483
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11495
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11508
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11521
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11534
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11547
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11560
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11573
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11586
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11612
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11640
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11667
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11709
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11745
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11781
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11810
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11830
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11850
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11886
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11899
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11925
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11986
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11998
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12010
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12022
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12046
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12058
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12097
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12110
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12125
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12133
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12142
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12175
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12180
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12186
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12193
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12197
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12202
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12206
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12212
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12218
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12225
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12232
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12241
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12248
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12255
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12264
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12268
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12272
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12278
		{
		}
	case 1874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12280
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12290
		{
			yyVAL.str = ""
		}
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12294
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
