// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const HNSW = 57675
const ZONEMAP = 57676
const LEADING = 57677
const BOTH = 57678
const TRAILING = 57679
const UNKNOWN = 57680
const LISTS = 57681
const OP_TYPE = 57682
const REINDEX = 57683
const EF_SEARCH = 57684
const EF_CONSTRUCTION = 57685
const M = 57686
const QUANTIZATION = 57687
const EXPIRE = 57688
const ACCOUNT = 57689
const ACCOUNTS = 57690
const UNLOCK = 57691
const DAY = 57692
const NEVER = 57693
const PUMP = 57694
const MYSQL_COMPATIBILITY_MODE = 57695
const UNIQUE_CHECK_ON_AUTOINCR = 57696
const MODIFY = 57697
const CHANGE = 57698
const SECOND = 57699
const ASCII = 57700
const COALESCE = 57701
const COLLATION = 57702
const HOUR = 57703
const MICROSECOND = 57704
const MINUTE = 57705
const MONTH = 57706
const QUARTER = 57707
const REPEAT = 57708
const REVERSE = 57709
const ROW_COUNT = 57710
const WEEK = 57711
const REVOKE = 57712
const FUNCTION = 57713
const PRIVILEGES = 57714
const TABLESPACE = 57715
const EXECUTE = 57716
const SUPER = 57717
const GRANT = 57718
const OPTION = 57719
const REFERENCES = 57720
const REPLICATION = 57721
const SLAVE = 57722
const CLIENT = 57723
const USAGE = 57724
const RELOAD = 57725
const FILE = 57726
const TEMPORARY = 57727
const ROUTINE = 57728
const EVENT = 57729
const SHUTDOWN = 57730
const NULLX = 57731
const AUTO_INCREMENT = 57732
const APPROXNUM = 57733
const SIGNED = 57734
const UNSIGNED = 57735
const ZEROFILL = 57736
const ENGINES = 57737
const LOW_CARDINALITY = 57738
const AUTOEXTEND_SIZE = 57739
const ADMIN_NAME = 57740
const RANDOM = 57741
const SUSPEND = 57742
const ATTRIBUTE = 57743
const HISTORY = 57744
const REUSE = 57745
const CURRENT = 57746
const OPTIONAL = 57747
const FAILED_LOGIN_ATTEMPTS = 57748
const PASSWORD_LOCK_TIME = 57749
const UNBOUNDED = 57750
const SECONDARY = 57751
const RESTRICTED = 57752
const USER = 57753
const IDENTIFIED = 57754
const CIPHER = 57755
const ISSUER = 57756
const X509 = 57757
const SUBJECT = 57758
const SAN = 57759
const REQUIRE = 57760
const SSL = 57761
const NONE = 57762
const PASSWORD = 57763
const SHARED = 57764
const EXCLUSIVE = 57765
const MAX_QUERIES_PER_HOUR = 57766
const MAX_UPDATES_PER_HOUR = 57767
const MAX_CONNECTIONS_PER_HOUR = 57768
const MAX_USER_CONNECTIONS = 57769
const FORMAT = 57770
const VERBOSE = 57771
const CONNECTION = 57772
const TRIGGERS = 57773
const PROFILES = 57774
const LOAD = 57775
const INLINE = 57776
const INFILE = 57777
const TERMINATED = 57778
const OPTIONALLY = 57779
const ENCLOSED = 57780
const ESCAPED = 57781
const STARTING = 57782
const LINES = 57783
const ROWS = 57784
const IMPORT = 57785
const DISCARD = 57786
const JSONTYPE = 57787
const MODUMP = 57788
const OVER = 57789
const PRECEDING = 57790
const FOLLOWING = 57791
const GROUPS = 57792
const DATABASES = 57793
const TABLES = 57794
const SEQUENCES = 57795
const EXTENDED = 57796
const FULL = 57797
const PROCESSLIST = 57798
const FIELDS = 57799
const COLUMNS = 57800
const OPEN = 57801
const ERRORS = 57802
const WARNINGS = 57803
const INDEXES = 57804
const SCHEMAS = 57805
const NODE = 57806
const LOCKS = 57807
const ROLES = 57808
const TABLE_NUMBER = 57809
const COLUMN_NUMBER = 57810
const TABLE_VALUES = 57811
const TABLE_SIZE = 57812
const NAMES = 57813
const GLOBAL = 57814
const PERSIST = 57815
const SESSION = 57816
const ISOLATION = 57817
const LEVEL = 57818
const READ = 57819
const WRITE = 57820
const ONLY = 57821
const REPEATABLE = 57822
const COMMITTED = 57823
const UNCOMMITTED = 57824
const SERIALIZABLE = 57825
const LOCAL = 57826
const EVENTS = 57827
const PLUGINS = 57828
const CURRENT_TIMESTAMP = 57829
const DATABASE = 57830
const CURRENT_TIME = 57831
const LOCALTIME = 57832
const LOCALTIMESTAMP = 57833
const UTC_DATE = 57834
const UTC_TIME = 57835
const UTC_TIMESTAMP = 57836
const REPLACE = 57837
const CONVERT = 57838
const SEPARATOR = 57839
const TIMESTAMPDIFF = 57840
const CURRENT_DATE = 57841
const CURRENT_USER = 57842
const CURRENT_ROLE = 57843
const SECOND_MICROSECOND = 57844
const MINUTE_MICROSECOND = 57845
const MINUTE_SECOND = 57846
const HOUR_MICROSECOND = 57847
const HOUR_SECOND = 57848
const HOUR_MINUTE = 57849
const DAY_MICROSECOND = 57850
const DAY_SECOND = 57851
const DAY_MINUTE = 57852
const DAY_HOUR = 57853
const YEAR_MONTH = 57854
const SQL_TSI_HOUR = 57855
const SQL_TSI_DAY = 57856
const SQL_TSI_WEEK = 57857
const SQL_TSI_MONTH = 57858
const SQL_TSI_QUARTER = 57859
const SQL_TSI_YEAR = 57860
const SQL_TSI_SECOND = 57861
const SQL_TSI_MINUTE = 57862
const RECURSIVE = 57863
const CONFIG = 57864
const DRAINER = 57865
const SOURCE = 57866
const STREAM = 57867
const HEADERS = 57868
const CONNECTOR = 57869
const CONNECTORS = 57870
const DAEMON = 57871
const PAUSE = 57872
const CANCEL = 57873
const TASK = 57874
const RESUME = 57875
const MATCH = 57876
const AGAINST = 57877
const BOOLEAN = 57878
const LANGUAGE = 57879
const WITH = 57880
const QUERY = 57881
const EXPANSION = 57882
const WITHOUT = 57883
const VALIDATION = 57884
const UPGRADE = 57885
const RETRY = 57886
const ADDDATE = 57887
const BIT_AND = 57888
const BIT_OR = 57889
const BIT_XOR = 57890
const CAST = 57891
const COUNT = 57892
const APPROX_COUNT = 57893
const APPROX_COUNT_DISTINCT = 57894
const SERIAL_EXTRACT = 57895
const APPROX_PERCENTILE = 57896
const CURDATE = 57897
const CURTIME = 57898
const DATE_ADD = 57899
const DATE_SUB = 57900
const EXTRACT = 57901
const GROUP_CONCAT = 57902
const MAX = 57903
const MID = 57904
const MIN = 57905
const NOW = 57906
const POSITION = 57907
const SESSION_USER = 57908
const STD = 57909
const STDDEV = 57910
const MEDIAN = 57911
const CLUSTER_CENTERS = 57912
const KMEANS = 57913
const STDDEV_POP = 57914
const STDDEV_SAMP = 57915
const SUBDATE = 57916
const SUBSTR = 57917
const SUBSTRING = 57918
const SUM = 57919
const SYSDATE = 57920
const SYSTEM_USER = 57921
const TRANSLATE = 57922
const TRIM = 57923
const VARIANCE = 57924
const VAR_POP = 57925
const VAR_SAMP = 57926
const AVG = 57927
const RANK = 57928
const ROW_NUMBER = 57929
const DENSE_RANK = 57930
const BIT_CAST = 57931
const BITMAP_BIT_POSITION = 57932
const BITMAP_BUCKET_NUMBER = 57933
const BITMAP_COUNT = 57934
const BITMAP_CONSTRUCT_AGG = 57935
const BITMAP_OR_AGG = 57936
const NEXTVAL = 57937
const SETVAL = 57938
const CURRVAL = 57939
const LASTVAL = 57940
const ARROW = 57941
const ROW = 57942
const OUTFILE = 57943
const HEADER = 57944
const MAX_FILE_SIZE = 57945
const FORCE_QUOTE = 57946
const PARALLEL = 57947
const STRICT = 57948
const UNUSED = 57949
const BINDINGS = 57950
const DO = 57951
const DECLARE = 57952
const LOOP = 57953
const WHILE = 57954
const LEAVE = 57955
const ITERATE = 57956
const UNTIL = 57957
const CALL = 57958
const PREV = 57959
const SLIDING = 57960
const FILL = 57961
const SPBEGIN = 57962
const BACKEND = 57963
const SERVERS = 57964
const HANDLER = 57965
const PERCENT = 57966
const SAMPLE = 57967
const MO_TS = 57968
const PITR = 57969
const RECOVERY_WINDOW = 57970
const CDC = 57971
const GROUPING = 57972
const SETS = 57973
const CUBE = 57974
const ROLLUP = 57975
const LOGSERVICE = 57976
const REPLICAS = 57977
const STORES = 57978
const SETTINGS = 57979
const KILL = 57980
const BACKUP = 57981
const FILESYSTEM = 57982
const PARALLELISM = 57983
const RESTORE = 57984
const QUERY_RESULT = 57985

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12998

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 814,
	22, 814,
	-2, 807,
	-1, 167,
	246, 1248,
	248, 1142,
	-2, 1194,
	-1, 194,
	44, 634,
	248, 634,
	275, 641,
	276, 641,
	479, 634,
	-2, 669,
	-1, 234,
	664, 2026,
	-2, 533,
	-1, 548,
	664, 2150,
	-2, 412,
	-1, 606,
	664, 2209,
	-2, 410,
	-1, 607,
	664, 2210,
	-2, 411,
	-1, 608,
	664, 2211,
	-2, 413,
	-1, 750,
	327, 181,
	451, 181,
	452, 181,
	-2, 1923,
	-1, 817,
	86, 1708,
	-2, 2086,
	-1, 818,
	86, 1727,
	-2, 2057,
	-1, 822,
	86, 1728,
	-2, 2085,
	-1, 856,
	86, 1635,
	-2, 2289,
	-1, 857,
	86, 1636,
	-2, 2288,
	-1, 858,
	86, 1637,
	-2, 2278,
	-1, 859,
	86, 2250,
	-2, 2271,
	-1, 860,
	86, 2251,
	-2, 2272,
	-1, 861,
	86, 2252,
	-2, 2280,
	-1, 862,
	86, 2253,
	-2, 2260,
	-1, 863,
	86, 2254,
	-2, 2269,
	-1, 864,
	86, 2255,
	-2, 2281,
	-1, 865,
	86, 2256,
	-2, 2282,
	-1, 866,
	86, 2257,
	-2, 2287,
	-1, 867,
	86, 2258,
	-2, 2292,
	-1, 868,
	86, 2259,
	-2, 2293,
	-1, 869,
	86, 1704,
	-2, 2124,
	-1, 870,
	86, 1705,
	-2, 1907,
	-1, 871,
	86, 1706,
	-2, 2133,
	-1, 872,
	86, 1707,
	-2, 1916,
	-1, 874,
	86, 1710,
	-2, 1924,
	-1, 876,
	86, 1712,
	-2, 2157,
	-1, 878,
	86, 1715,
	-2, 1945,
	-1, 880,
	86, 1717,
	-2, 2169,
	-1, 881,
	86, 1718,
	-2, 2168,
	-1, 882,
	86, 1719,
	-2, 1992,
	-1, 883,
	86, 1720,
	-2, 2081,
	-1, 886,
	86, 1723,
	-2, 2180,
	-1, 888,
	86, 1725,
	-2, 2183,
	-1, 889,
	86, 1726,
	-2, 2185,
	-1, 890,
	86, 1729,
	-2, 2193,
	-1, 891,
	86, 1730,
	-2, 2066,
	-1, 892,
	86, 1731,
	-2, 2111,
	-1, 893,
	86, 1732,
	-2, 2076,
	-1, 894,
	86, 1733,
	-2, 2101,
	-1, 905,
	86, 1613,
	-2, 2283,
	-1, 906,
	86, 1614,
	-2, 2284,
	-1, 907,
	86, 1615,
	-2, 2285,
	-1, 1013,
	474, 669,
	475, 669,
	-2, 635,
	-1, 1064,
	128, 1907,
	139, 1907,
	159, 1907,
	-2, 1881,
	-1, 1187,
	22, 841,
	-2, 790,
	-1, 1297,
	11, 814,
	22, 814,
	-2, 1490,
	-1, 1381,
	22, 841,
	-2, 790,
	-1, 1743,
	86, 1780,
	-2, 2083,
	-1, 1744,
	86, 1781,
	-2, 2084,
	-1, 1919,
	87, 1014,
	-2, 1020,
	-1, 2377,
	111, 1186,
	155, 1186,
	195, 1186,
	198, 1186,
	288, 1186,
	-2, 1179,
	-1, 2542,
	11, 814,
	22, 814,
	-2, 955,
	-1, 2576,
	87, 1867,
	160, 1867,
	-2, 2068,
	-1, 2577,
	87, 1867,
	160, 1867,
	-2, 2067,
	-1, 2578,
	87, 1843,
	160, 1843,
	-2, 2054,
	-1, 2579,
	87, 1844,
	160, 1844,
	-2, 2059,
	-1, 2580,
	87, 1845,
	160, 1845,
	-2, 1980,
	-1, 2581,
	87, 1846,
	160, 1846,
	-2, 1973,
	-1, 2582,
	87, 1847,
	160, 1847,
	-2, 1897,
	-1, 2583,
	87, 1848,
	160, 1848,
	-2, 2056,
	-1, 2584,
	87, 1849,
	160, 1849,
	-2, 1978,
	-1, 2585,
	87, 1850,
	160, 1850,
	-2, 1972,
	-1, 2586,
	87, 1851,
	160, 1851,
	-2, 1960,
	-1, 2587,
	87, 1867,
	160, 1867,
	-2, 1961,
	-1, 2588,
	87, 1867,
	160, 1867,
	-2, 1962,
	-1, 2590,
	87, 1856,
	160, 1856,
	-2, 2101,
	-1, 2591,
	87, 1833,
	160, 1833,
	-2, 2086,
	-1, 2592,
	87, 1865,
	160, 1865,
	-2, 2057,
	-1, 2593,
	87, 1865,
	160, 1865,
	-2, 2085,
	-1, 2594,
	87, 1865,
	160, 1865,
	-2, 1925,
	-1, 2595,
	87, 1863,
	160, 1863,
	-2, 2076,
	-1, 2596,
	87, 1860,
	160, 1860,
	-2, 1950,
	-1, 2597,
	86, 1814,
	87, 1814,
	160, 1814,
	409, 1814,
	410, 1814,
	411, 1814,
	-2, 1896,
	-1, 2598,
	86, 1815,
	87, 1815,
	160, 1815,
	409, 1815,
	410, 1815,
	411, 1815,
	-2, 1898,
	-1, 2599,
	86, 1816,
	87, 1816,
	160, 1816,
	409, 1816,
	410, 1816,
	411, 1816,
	-2, 2129,
	-1, 2600,
	86, 1818,
	87, 1818,
	160, 1818,
	409, 1818,
	410, 1818,
	411, 1818,
	-2, 2058,
	-1, 2601,
	86, 1820,
	87, 1820,
	160, 1820,
	409, 1820,
	410, 1820,
	411, 1820,
	-2, 2036,
	-1, 2602,
	86, 1822,
	87, 1822,
	160, 1822,
	409, 1822,
	410, 1822,
	411, 1822,
	-2, 1979,
	-1, 2603,
	86, 1824,
	87, 1824,
	160, 1824,
	409, 1824,
	410, 1824,
	411, 1824,
	-2, 1956,
	-1, 2604,
	86, 1825,
	87, 1825,
	160, 1825,
	409, 1825,
	410, 1825,
	411, 1825,
	-2, 1957,
	-1, 2605,
	86, 1827,
	87, 1827,
	160, 1827,
	409, 1827,
	410, 1827,
	411, 1827,
	-2, 1895,
	-1, 2606,
	87, 1870,
	160, 1870,
	409, 1870,
	410, 1870,
	411, 1870,
	-2, 1930,
	-1, 2607,
	87, 1870,
	160, 1870,
	409, 1870,
	410, 1870,
	411, 1870,
	-2, 1946,
	-1, 2608,
	87, 1873,
	160, 1873,
	409, 1873,
	410, 1873,
	411, 1873,
	-2, 1926,
	-1, 2609,
	87, 1873,
	160, 1873,
	409, 1873,
	410, 1873,
	411, 1873,
	-2, 1995,
	-1, 2610,
	87, 1870,
	160, 1870,
	409, 1870,
	410, 1870,
	411, 1870,
	-2, 2018,
	-1, 2832,
	111, 1186,
	155, 1186,
	195, 1186,
	198, 1186,
	288, 1186,
	-2, 1180,
	-1, 2850,
	84, 732,
	160, 732,
	-2, 1364,
	-1, 3282,
	198, 1186,
	312, 1453,
	-2, 1425,
	-1, 3471,
	111, 1186,
	155, 1186,
	195, 1186,
	198, 1186,
	-2, 1304,
	-1, 3473,
	111, 1186,
	155, 1186,
	195, 1186,
	198, 1186,
	-2, 1304,
	-1, 3485,
	84, 732,
	160, 732,
	-2, 1364,
	-1, 3507,
	198, 1186,
	312, 1453,
	-2, 1426,
	-1, 3662,
	111, 1186,
	155, 1186,
	195, 1186,
	198, 1186,
	-2, 1305,
	-1, 3691,
	87, 1266,
	160, 1266,
	-2, 1186,
	-1, 3838,
	87, 1266,
	160, 1266,
	-2, 1186,
	-1, 4009,
	87, 1270,
	160, 1270,
	-2, 1186,
	-1, 4064,
	87, 1271,
	160, 1271,
	-2, 1186,
}

const yyPrivate = 57344

const yyLast = 56672

var yyAct = [...]int{
	784, 760, 4118, 786, 4086, 4110, 223, 2882, 1643, 2008,
	4013, 1723, 3492, 3592, 4019, 3302, 4012, 4020, 3929, 3838,
	3268, 769, 3885, 3964, 762, 3719, 3379, 3815, 3521, 1487,
	3784, 3876, 1333, 2876, 1555, 3380, 3905, 3837, 3650, 1719,
	3906, 3753, 814, 1783, 2879, 1063, 648, 1188, 3806, 3587,
	3596, 2794, 3886, 3888, 3453, 1953, 3458, 1770, 2428, 3671,
	3508, 3277, 1726, 666, 1462, 673, 673, 1181, 2853, 1493,
	3659, 673, 692, 701, 3238, 3224, 701, 3200, 208, 3632,
	2536, 2574, 3474, 3664, 3377, 2106, 2993, 2994, 37, 2995,
	3227, 3445, 1788, 2971, 3279, 2905, 3476, 2119, 758, 2142,
	3297, 3422, 2218, 3286, 2990, 2701, 3063, 2572, 2174, 3342,
	2982, 3207, 2666, 2068, 1968, 3205, 3023, 3285, 2820, 1176,
	3203, 2388, 141, 3201, 2332, 3202, 3247, 709, 3198, 3171,
	2356, 2431, 757, 1628, 3111, 1621, 2833, 2214, 2331, 752,
	2202, 2461, 1785, 2103, 36, 1632, 2643, 2182, 3037, 1881,
	2183, 2175, 2625, 942, 713, 2147, 68, 1633, 2099, 2213,
	698, 2537, 1548, 1636, 2520, 2809, 2907, 2072, 2804, 2515,
	984, 2429, 2887, 2845, 1998, 2377, 1928, 2387, 2570, 219,
	8, 1784, 1124, 2248, 1717, 6, 1418, 2215, 2069, 218,
	7, 761, 1057, 2172, 1595, 1564, 1667, 665, 1533, 648,
	1527, 2424, 751, 2368, 1777, 2738, 1452, 759, 1529, 2371,
	1757, 1708, 770, 1496, 23, 1660, 1204, 2181, 1647, 2163,
	2178, 1602, 1716, 223, 1967, 223, 27, 1115, 1116, 1924,
	1056, 2544, 1927, 706, 673, 1586, 715, 1532, 647, 683,
	1022, 959, 1472, 2516, 1447, 1497, 16, 700, 1789, 983,
	1488, 909, 1476, 686, 24, 25, 209, 716, 975, 1722,
	981, 17, 1644, 205, 1403, 1095, 965, 10, 1008, 1334,
	2222, 201, 14, 1379, 712, 911, 668, 912, 15, 1265,
	1266, 1267, 1264, 1265, 1266, 1267, 1264, 206, 64, 197,
	168, 1112, 33, 1265, 1266, 1267, 1264, 3895, 697, 3803,
	2774, 1111, 2774, 1113, 2774, 2546, 198, 3488, 973, 3388,
	974, 3254, 3080, 189, 3079, 2232, 1182, 199, 693, 3623,
	3461, 3372, 1183, 704, 2689, 1069, 2631, 2629, 2628, 2626,
	1894, 1605, 1609, 1107, 1108, 207, 140, 667, 2330, 1398,
	679, 1531, 674, 3863, 695, 3164, 1458, 1071, 1372, 954,
	696, 126, 1042, 1455, 1456, 1457, 2336, 1108, 931, 1072,
	202, 1108, 929, 968, 694, 964, 3181, 978, 979, 980,
	1659, 2340, 1401, 3161, 1895, 3166, 3163, 4098, 1182, 1510,
	1888, 2737, 1394, 1607, 3585, 3059, 3057, 8, 2152, 3871,
	3760, 3754, 3588, 1106, 3378, 2199, 1328, 7, 2766, 2764,
	3890, 2177, 753, 910, 2169, 1265, 1266, 1267, 1264, 1265,
	1266, 1267, 1264, 3140, 2469, 4124, 3884, 4095, 3768, 3822,
	921, 945, 206, 1263, 3602, 1227, 1409, 4048, 2675, 3637,
	1090, 3633, 2219, 3475, 3990, 2379, 2683, 148, 149, 1642,
	150, 151, 2768, 3882, 3790, 152, 206, 206, 153, 2719,
	2378, 3940, 1572, 1408, 3766, 1407, 1045, 1406, 930, 931,
	206, 929, 928, 3823, 206, 64, 197, 168, 1073, 2839,
	711, 140, 206, 64, 197, 168, 1404, 1067, 1426, 1068,
	3138, 206, 2230, 206, 1443, 2988, 2372, 1410, 206, 64,
	197, 168, 1961, 2793, 2564, 202, 970, 206, 963, 753,
	1037, 1035, 1091, 1036, 1657, 926, 1262, 967, 966, 3083,
	2565, 167, 195, 204, 196, 124, 1664, 1897, 3030, 2837,
	202, 3031, 3032, 2116, 948, 206, 1656, 3165, 955, 922,
	3071, 2789, 140, 202, 194, 188, 187, 202, 1534, 3792,
	1536, 70, 2082, 1690, 1651, 202, 1661, 2644, 962, 206,
	64, 197, 168, 1676, 202, 3162, 202, 206, 64, 197,
	168, 202, 2083, 2084, 1906, 1907, 1031, 972, 2791, 2840,
	1663, 1982, 961, 3612, 1648, 1725, 960, 1085, 1080, 1075,
	1079, 1083, 947, 206, 64, 197, 168, 1506, 953, 1484,
	1507, 1043, 1235, 2551, 1260, 1237, 2550, 3987, 1650, 2552,
	1494, 1495, 190, 191, 192, 1088, 2786, 3272, 4047, 1078,
	1959, 2790, 1066, 2319, 1196, 951, 1709, 1425, 1039, 1713,
	1492, 3893, 202, 1238, 1491, 1494, 1495, 1065, 1608, 1606,
	202, 3893, 3978, 1823, 2806, 900, 2077, 899, 901, 902,
	200, 903, 904, 1712, 2807, 3270, 4023, 4024, 1199, 2787,
	1207, 1210, 2769, 971, 3892, 3977, 202, 3891, 3976, 1255,
	1086, 136, 3892, 3891, 3381, 193, 3983, 137, 3966, 1089,
	673, 673, 673, 4090, 4091, 3381, 673, 3966, 1509, 952,
	3992, 3993, 1041, 673, 1192, 3874, 3064, 3969, 167, 195,
	204, 196, 3757, 2805, 3988, 3989, 1076, 3996, 3995, 3994,
	3997, 672, 672, 701, 701, 2670, 673, 681, 1207, 1210,
	1231, 194, 2234, 3877, 3878, 3879, 3880, 3065, 3611, 3066,
	1087, 3902, 1193, 2100, 138, 1729, 3613, 2090, 1118, 2926,
	3395, 1704, 2094, 3446, 1714, 2510, 1233, 63, 2226, 2812,
	3451, 3101, 1247, 2231, 2504, 1248, 2983, 3220, 1236, 1239,
	1242, 1960, 2792, 1243, 3794, 3795, 969, 1520, 1711, 1040,
	1077, 2160, 2367, 3642, 1615, 1614, 971, 2796, 1397, 1305,
	1427, 3533, 2767, 1250, 1232, 3985, 698, 698, 698, 976,
	3099, 1245, 1257, 2114, 2115, 1202, 65, 3218, 747, 2680,
	2788, 749, 193, 1482, 1184, 958, 748, 2467, 2226, 3586,
	3894, 1230, 3802, 3398, 3058, 3105, 2977, 2773, 4022, 924,
	1183, 1258, 1259, 1069, 1183, 2506, 1192, 3799, 3747, 1183,
	2220, 146, 203, 2220, 147, 3639, 1191, 2220, 3081, 169,
	2337, 2567, 3078, 3426, 61, 1071, 2513, 1084, 1252, 3548,
	1337, 3603, 2253, 3215, 3216, 2221, 1508, 1072, 1896, 1728,
	1727, 1234, 925, 664, 1209, 1208, 3300, 1108, 3301, 3217,
	1246, 3274, 1108, 1108, 1108, 1222, 4055, 1108, 1240, 1108,
	681, 3545, 3821, 1081, 3236, 1710, 1082, 3248, 1253, 1254,
	3828, 1183, 3225, 2507, 2508, 2233, 1069, 3922, 3214, 2237,
	2239, 2240, 3819, 3991, 2499, 946, 3916, 944, 1038, 1251,
	139, 45, 3298, 3299, 703, 2846, 1211, 62, 1071, 699,
	3748, 5, 1209, 1208, 697, 697, 697, 2627, 2973, 702,
	1072, 1610, 2986, 2374, 1249, 699, 1400, 910, 1402, 143,
	144, 3767, 1241, 145, 693, 693, 693, 3538, 3172, 3907,
	1414, 1195, 1197, 1200, 1417, 3924, 1178, 1179, 1423, 666,
	1215, 1216, 1185, 3493, 1187, 1186, 1377, 1068, 1338, 1382,
	695, 695, 695, 3638, 169, 1219, 696, 696, 696, 2765,
	2684, 65, 1301, 1302, 1303, 1304, 1092, 1658, 1074, 3793,
	694, 694, 694, 984, 1306, 1221, 699, 65, 169, 169,
	1201, 3930, 1405, 927, 699, 1494, 1495, 3269, 1699, 203,
	3226, 1700, 169, 2881, 3212, 1898, 169, 3500, 3437, 1244,
	710, 2447, 2351, 973, 169, 974, 1198, 2427, 2450, 1471,
	699, 3304, 3788, 169, 1483, 169, 1299, 3629, 3434, 3776,
	169, 3777, 2434, 1494, 1495, 3226, 3188, 1490, 673, 169,
	2502, 1522, 3829, 2877, 2878, 673, 2881, 3771, 65, 648,
	648, 3549, 3901, 3710, 3820, 1464, 65, 2479, 4130, 648,
	648, 2567, 2811, 1559, 1559, 3102, 673, 169, 2984, 2101,
	3221, 4113, 3776, 2478, 3777, 2449, 3436, 3599, 3796, 1213,
	2500, 2501, 65, 2818, 1544, 3779, 1543, 701, 1587, 666,
	3984, 169, 1220, 3275, 1598, 1469, 1349, 1350, 1561, 169,
	1486, 1485, 1557, 1557, 3931, 1468, 1467, 3842, 3807, 223,
	4011, 3477, 2955, 3278, 1177, 1566, 3160, 3778, 648, 2815,
	2816, 2448, 2470, 2427, 2927, 169, 2928, 2929, 3779, 1296,
	3583, 2091, 1420, 1421, 2814, 1705, 2093, 2238, 1430, 1431,
	1432, 1433, 1434, 3643, 1436, 3699, 1424, 1419, 711, 3963,
	1442, 1735, 1738, 1739, 3384, 1521, 1530, 3294, 3705, 1227,
	3778, 3176, 1736, 2824, 2828, 2829, 2830, 2825, 2827, 2826,
	1640, 3298, 3299, 2433, 2676, 1645, 1383, 3439, 2435, 2556,
	936, 2465, 2223, 1655, 2089, 1381, 3720, 3721, 3722, 3726,
	3724, 3725, 3727, 3723, 2066, 1416, 1435, 3333, 2779, 3104,
	3025, 3027, 2437, 1441, 1440, 1428, 2444, 1439, 3042, 3043,
	1438, 1900, 4114, 1688, 3213, 3712, 3303, 1429, 1044, 705,
	978, 979, 980, 1553, 1554, 2235, 2236, 1559, 3295, 1559,
	1192, 940, 2436, 1032, 1666, 1449, 938, 937, 2249, 2924,
	3841, 1538, 1540, 1451, 3423, 1473, 1477, 1477, 1477, 1226,
	1454, 1551, 1552, 2660, 1478, 1479, 3113, 3112, 1448, 2346,
	2345, 1619, 2783, 1622, 1623, 1649, 2344, 1511, 1512, 1616,
	1473, 1473, 972, 1662, 1413, 1624, 1625, 3234, 1909, 1498,
	1630, 1631, 1501, 1411, 1412, 1910, 1588, 698, 943, 1032,
	698, 698, 4010, 2491, 3621, 3178, 2343, 1559, 1653, 1654,
	1908, 932, 2352, 1698, 3672, 1665, 672, 672, 1180, 1542,
	1611, 933, 672, 939, 1192, 1787, 4126, 1034, 4132, 1190,
	1033, 3973, 1579, 1635, 1263, 3253, 1639, 1818, 1819, 1836,
	1822, 1638, 1567, 1072, 1585, 1461, 1771, 2438, 1837, 1573,
	3339, 1072, 1218, 1470, 679, 4120, 4111, 4112, 3772, 2851,
	1480, 1844, 3773, 1846, 2370, 1847, 1848, 1849, 1499, 1500,
	1599, 1502, 1503, 1463, 1504, 1600, 1721, 2956, 2958, 2959,
	2960, 2957, 1724, 1034, 3026, 2141, 1033, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 2228,
	3385, 3772, 1707, 1768, 1769, 3887, 1192, 3706, 3707, 1737,
	3701, 2852, 1899, 1740, 3700, 1463, 1902, 1879, 1904, 1702,
	3235, 1674, 2567, 1821, 1677, 1032, 1911, 1913, 4121, 1914,
	2443, 1916, 1917, 4108, 2441, 697, 1587, 2780, 697, 697,
	3335, 1925, 1559, 1930, 1931, 3296, 1933, 1522, 673, 1669,
	1901, 1697, 1845, 673, 2534, 693, 1559, 1227, 693, 693,
	1706, 984, 1675, 2646, 1954, 1678, 1679, 1683, 1684, 2464,
	4066, 1694, 1715, 2946, 2947, 2359, 1882, 1559, 4034, 1696,
	1692, 695, 2369, 1522, 695, 695, 1695, 696, 692, 1835,
	696, 696, 1691, 936, 3442, 1720, 1718, 1693, 2360, 2361,
	4031, 694, 2852, 3397, 694, 694, 4067, 4025, 1981, 1034,
	1766, 1767, 1033, 1759, 2324, 2535, 1189, 1988, 1988, 4139,
	1522, 2675, 1522, 1522, 1189, 3308, 673, 673, 2139, 2055,
	1925, 2059, 4007, 1955, 1559, 2063, 2064, 1225, 2287, 1224,
	2079, 2286, 648, 4067, 935, 1227, 2262, 3957, 1890, 938,
	937, 4035, 3306, 3956, 3950, 1973, 648, 3339, 1559, 3170,
	1687, 1934, 3168, 2535, 3045, 914, 915, 916, 917, 1686,
	2798, 1980, 3925, 4032, 1983, 1984, 1265, 1266, 1267, 1264,
	2263, 1985, 2535, 3912, 3861, 673, 1925, 1559, 1885, 2124,
	2770, 673, 673, 673, 709, 709, 1826, 1827, 1828, 1932,
	2945, 2134, 2135, 2136, 2137, 4008, 2117, 3860, 2143, 1842,
	1850, 2010, 1843, 3855, 1263, 223, 1225, 2057, 223, 223,
	1263, 223, 2261, 1921, 1922, 1923, 1263, 2263, 2665, 1856,
	1857, 2434, 2437, 2651, 1991, 1936, 1937, 1938, 1939, 2219,
	1880, 2081, 2420, 1886, 2329, 2228, 1570, 2407, 3854, 1878,
	2323, 2322, 1265, 1266, 1267, 1264, 3913, 3862, 2434, 2437,
	2294, 1836, 1836, 2185, 2210, 1263, 1949, 914, 915, 916,
	917, 1920, 3853, 1378, 1836, 1836, 2112, 1956, 1957, 3450,
	2393, 3852, 2204, 2065, 1517, 3832, 2263, 1450, 2126, 2127,
	2128, 1528, 3831, 2151, 1774, 2102, 2154, 2155, 3136, 2157,
	1969, 1929, 1971, 1972, 1950, 1990, 2198, 2109, 2110, 2095,
	1951, 2086, 1565, 2088, 1954, 1945, 1978, 919, 1559, 2217,
	1964, 2263, 3805, 1473, 2107, 2108, 1545, 1970, 4122, 1265,
	1266, 1267, 1264, 2188, 2080, 3554, 1962, 1477, 1265, 1266,
	1267, 1264, 2123, 3502, 1974, 2263, 1992, 1993, 3488, 1477,
	3467, 3049, 1649, 1649, 2263, 2854, 1979, 3737, 2228, 2056,
	1987, 1989, 3415, 3411, 1662, 2228, 2061, 2438, 3316, 2211,
	2678, 2067, 2433, 2427, 2432, 2259, 2430, 2435, 2677, 698,
	2193, 2669, 3020, 1069, 2406, 2085, 2096, 2087, 2422, 2414,
	2756, 2744, 2736, 2062, 2438, 2263, 1069, 2691, 754, 2433,
	2427, 2432, 2673, 2430, 2435, 1071, 2661, 2653, 2567, 2122,
	2282, 2180, 2648, 2640, 2638, 2121, 3503, 1072, 1071, 919,
	1072, 1072, 2636, 3468, 2180, 1965, 1966, 2129, 2130, 2267,
	1072, 2436, 1072, 2148, 3552, 3416, 3412, 787, 797, 2209,
	2634, 3317, 1975, 1976, 2146, 2392, 1718, 788, 2325, 789,
	793, 796, 792, 790, 791, 2535, 2132, 2165, 2436, 1671,
	1314, 1212, 1986, 2393, 1263, 1263, 1174, 2301, 1169, 1296,
	1263, 2111, 2300, 2246, 2247, 2393, 2200, 3258, 2285, 2649,
	2654, 2276, 2186, 2187, 1954, 2649, 2641, 2639, 1280, 2275,
	934, 2197, 2196, 1069, 2194, 2635, 3096, 4133, 3249, 3917,
	2274, 2206, 794, 2264, 2227, 1680, 2334, 2335, 2208, 2338,
	4094, 3673, 2341, 2635, 3480, 1071, 1474, 697, 2393, 2626,
	2462, 2324, 3478, 2347, 1825, 1824, 3896, 1072, 2212, 752,
	1825, 1824, 673, 673, 673, 795, 1505, 693, 3804, 2317,
	1263, 2265, 2225, 3918, 2207, 1263, 3370, 673, 673, 673,
	673, 1263, 3764, 3703, 1263, 3674, 1549, 3702, 3481, 3688,
	2389, 2250, 1263, 695, 2241, 3646, 3479, 1550, 3460, 696,
	2394, 2395, 2396, 1263, 2399, 1522, 2263, 2228, 1681, 3250,
	2244, 2245, 2243, 694, 1759, 1283, 1284, 1285, 1286, 1287,
	1280, 2255, 3340, 3331, 3323, 3318, 1851, 1852, 1853, 1854,
	3229, 1522, 1858, 1859, 1860, 1861, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1459, 2456, 1109,
	1110, 1460, 1547, 3251, 1114, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1280, 2242, 2980, 2979, 2822, 1475, 1862, 1459,
	2401, 2402, 941, 1460, 1855, 2775, 2688, 2652, 2558, 2191,
	2404, 2405, 1765, 2190, 2189, 1445, 1515, 1516, 1444, 1518,
	1519, 2411, 1523, 1524, 1525, 2413, 2463, 2415, 1762, 1764,
	1761, 1194, 1763, 2698, 2620, 2149, 673, 1988, 1778, 1603,
	2256, 2149, 1778, 3050, 1935, 2539, 2539, 2079, 2539, 1940,
	2318, 2320, 2321, 2326, 1267, 1264, 1574, 1575, 1576, 1577,
	1578, 1915, 1580, 1581, 1582, 1583, 1584, 3975, 648, 648,
	1590, 1591, 1592, 1593, 1264, 2416, 1192, 1103, 1104, 1105,
	3715, 3714, 1559, 673, 2295, 2296, 1546, 2298, 3067, 2916,
	2914, 2353, 2426, 2893, 2305, 2891, 673, 2425, 3647, 3648,
	1337, 3694, 1192, 2611, 666, 1265, 1266, 1267, 1264, 4104,
	1598, 1102, 2079, 4129, 1099, 2616, 3373, 2618, 4103, 3640,
	223, 2562, 1994, 1995, 1316, 3448, 2541, 2468, 2545, 2390,
	2471, 2472, 2473, 2474, 2475, 2476, 2477, 1315, 4102, 2480,
	2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490,
	1840, 2492, 2493, 2494, 2495, 2496, 2821, 2497, 2403, 2400,
	2543, 2657, 2758, 2409, 2759, 1841, 2410, 4100, 4099, 1069,
	2967, 4038, 2419, 2613, 2439, 2440, 4006, 2445, 4128, 3641,
	2671, 2120, 4004, 2217, 3919, 3449, 2965, 2120, 2120, 2120,
	1559, 1071, 1559, 2569, 1559, 2795, 3857, 3845, 2621, 1192,
	2553, 1477, 2554, 1072, 2963, 2952, 3835, 2690, 2412, 3824,
	2709, 3755, 3676, 2547, 1265, 1266, 1267, 1264, 1338, 3675,
	3494, 2559, 2560, 3371, 3482, 2615, 1265, 1266, 1267, 1264,
	2966, 2681, 3447, 1559, 1192, 2509, 2514, 2630, 2722, 1168,
	1164, 1165, 1166, 1167, 2575, 2714, 2964, 2713, 2712, 2710,
	2548, 3319, 3219, 2729, 1265, 1266, 1267, 1264, 1559, 3092,
	1538, 1540, 3062, 2700, 2962, 2951, 3061, 2717, 3454, 3129,
	2950, 2949, 1557, 3459, 1096, 1097, 1098, 1101, 2563, 1100,
	1265, 1266, 1267, 1264, 2566, 1265, 1266, 1267, 1264, 2622,
	2948, 2940, 2730, 2934, 1604, 2408, 2933, 1557, 2932, 2667,
	2668, 2612, 2931, 3115, 2614, 2771, 2642, 2777, 2778, 2278,
	2702, 2781, 2702, 2733, 2734, 2555, 2328, 2711, 1278, 1288,
	1289, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1280, 1192,
	2168, 2167, 3128, 1192, 2166, 2162, 2706, 2161, 2118, 1905,
	1559, 2685, 2687, 1522, 1265, 1266, 1267, 1264, 2720, 2059,
	1903, 2655, 1603, 2682, 2696, 1672, 1396, 2850, 2731, 1265,
	1266, 1267, 1264, 747, 2857, 2663, 749, 2858, 3206, 4125,
	2674, 748, 2672, 4123, 2679, 1265, 1266, 1267, 1264, 2277,
	2762, 1265, 1266, 1267, 1264, 2868, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1269, 4105, 1192, 3797, 3798, 2692, 2693,
	3593, 4092, 2260, 2890, 4054, 4053, 1265, 1266, 1267, 1264,
	1192, 1192, 1192, 1988, 2708, 2718, 1192, 4016, 2900, 2901,
	2902, 2903, 1192, 2910, 4050, 2911, 2912, 2695, 2913, 3981,
	2915, 2834, 3617, 3980, 3785, 2835, 3961, 2847, 2861, 2838,
	3904, 2910, 3651, 2864, 1265, 1266, 1267, 1264, 3898, 1718,
	3881, 1172, 3872, 2539, 2869, 3849, 3844, 2819, 1541, 1265,
	1266, 1267, 1264, 2715, 2716, 3843, 3801, 2968, 3787, 2728,
	2871, 2799, 3786, 3756, 2010, 2575, 3696, 648, 3655, 2808,
	1265, 1266, 1267, 1264, 2059, 3644, 3626, 3624, 1192, 2079,
	2079, 2079, 2079, 2079, 2079, 1288, 1289, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1280, 1192, 2079, 1072, 3622, 2539,
	1171, 2800, 3619, 3616, 1268, 3615, 2817, 3591, 2884, 3589,
	3562, 3559, 1298, 2859, 2974, 3028, 2841, 1559, 2363, 2364,
	2365, 1308, 2888, 2895, 2849, 3556, 2888, 2885, 673, 673,
	2801, 8, 2803, 2380, 2381, 2382, 2383, 2856, 2972, 3444,
	3431, 7, 2885, 2896, 2897, 3424, 3605, 1317, 2899, 3408,
	2125, 2870, 3406, 3401, 2906, 2873, 1265, 1266, 1267, 1264,
	2886, 3351, 3329, 3604, 3328, 2922, 2923, 2892, 4131, 3326,
	3325, 3542, 2898, 1265, 1266, 1267, 1264, 3320, 2889, 3314,
	2938, 2939, 3016, 223, 3313, 3230, 2867, 3193, 223, 1929,
	1265, 1266, 1267, 1264, 3403, 3192, 3191, 2930, 1265, 1266,
	1267, 1264, 2270, 3182, 2942, 3180, 2976, 3177, 3175, 2333,
	1836, 2258, 1836, 3106, 3103, 3077, 3082, 3046, 3060, 3035,
	2996, 1265, 1266, 1267, 1264, 3132, 1265, 1266, 1267, 1264,
	3091, 2961, 2975, 2953, 2943, 2981, 1559, 2996, 2941, 3098,
	2937, 2936, 2739, 2740, 2935, 2784, 2776, 2772, 2745, 855,
	854, 3029, 1265, 1266, 1267, 1264, 3013, 2664, 2348, 2978,
	3019, 3051, 1528, 3017, 2342, 2339, 3055, 2997, 2998, 2999,
	3000, 3001, 3002, 1623, 2171, 2164, 3033, 3036, 1893, 1892,
	1673, 1345, 1341, 1624, 1625, 3131, 1340, 1630, 1631, 1265,
	1266, 1267, 1264, 1882, 1175, 923, 4080, 3072, 3076, 1265,
	1266, 1267, 1264, 3018, 3937, 3933, 3781, 2860, 3780, 1565,
	3084, 3769, 1265, 1266, 1267, 1264, 2865, 2866, 3765, 3074,
	3618, 3600, 2120, 3572, 3473, 1635, 3472, 206, 1639, 197,
	168, 3085, 3471, 1638, 3441, 3420, 3418, 3053, 3417, 3052,
	3414, 3179, 3413, 3407, 3405, 3100, 3386, 3130, 3183, 3184,
	3185, 3187, 3376, 3189, 3190, 3375, 3362, 3070, 3068, 3075,
	3073, 3361, 3260, 1192, 3196, 1072, 3088, 3167, 3134, 3209,
	2883, 3087, 3086, 3094, 1265, 1266, 1267, 1264, 1072, 3223,
	3125, 3117, 3116, 3110, 673, 3044, 2797, 3108, 3107, 2637,
	2633, 3095, 2632, 2306, 3127, 2299, 2293, 3239, 1192, 3114,
	202, 673, 2292, 1192, 1192, 3118, 3119, 3121, 2291, 2290,
	3123, 3124, 2079, 2389, 2288, 3257, 673, 2755, 3120, 2284,
	3122, 2283, 2281, 3169, 1279, 1278, 1288, 1289, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1280, 2456, 2754, 2272, 2269,
	3233, 3195, 1597, 2289, 1265, 1266, 1267, 1264, 3284, 2268,
	3287, 2170, 3287, 3287, 1876, 1875, 1874, 1192, 1839, 3174,
	1838, 1829, 1571, 3173, 1265, 1266, 1267, 1264, 2753, 1569,
	4079, 3353, 2752, 4037, 3955, 3309, 2834, 1335, 3932, 3305,
	3211, 3949, 2751, 1559, 1559, 3261, 2750, 3867, 3242, 3194,
	3263, 3264, 3262, 3246, 206, 1265, 1266, 1267, 1264, 1265,
	1266, 1267, 1264, 3864, 3851, 2885, 3846, 3271, 3273, 1265,
	1266, 1267, 1264, 1265, 1266, 1267, 1264, 3310, 3311, 3750,
	1069, 3267, 1557, 1557, 3749, 3255, 3241, 3282, 3252, 3232,
	673, 3244, 3245, 3731, 3256, 2749, 3713, 3209, 3709, 3687,
	2885, 3670, 1071, 3947, 2748, 2885, 2885, 3945, 2747, 1522,
	3292, 3283, 2059, 2059, 1072, 2426, 1072, 3266, 2746, 3573,
	2425, 1072, 1265, 1266, 1267, 1264, 2743, 202, 3570, 3288,
	3289, 1265, 1266, 1267, 1264, 1265, 1266, 1267, 1264, 3307,
	3293, 3540, 3539, 2848, 3536, 1265, 1266, 1267, 1264, 1072,
	3535, 3501, 3498, 1265, 1266, 1267, 1264, 3496, 3462, 2885,
	3015, 2742, 3126, 1618, 1629, 1620, 1192, 4072, 2741, 1634,
	2722, 1637, 1730, 1731, 1732, 1733, 1734, 2735, 3374, 3338,
	1626, 1453, 3007, 2969, 2894, 2843, 2842, 3315, 1265, 1266,
	1267, 1264, 2836, 799, 142, 1265, 1266, 1267, 1264, 142,
	3290, 3354, 2802, 2757, 1265, 1266, 1267, 1264, 3322, 2647,
	2557, 3321, 3327, 2498, 1775, 2391, 3336, 3337, 1779, 1780,
	1781, 1782, 2362, 3334, 3330, 673, 2327, 1760, 1820, 3347,
	202, 3348, 2131, 1919, 1889, 1703, 1830, 3141, 3142, 2725,
	1652, 1627, 1395, 3143, 3144, 3145, 3146, 1380, 3147, 3148,
	3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3355,
	1376, 3324, 680, 2721, 1375, 142, 1265, 1266, 1267, 1264,
	1374, 1373, 1372, 3364, 1371, 1370, 1369, 3358, 3359, 3360,
	1368, 1367, 1366, 1365, 1364, 1363, 1362, 1361, 1360, 1883,
	1265, 1266, 1267, 1264, 1359, 1358, 1357, 1356, 2143, 3428,
	3387, 2697, 3430, 1355, 1354, 1353, 3432, 1352, 2575, 1773,
	1351, 3438, 3389, 1348, 3390, 1347, 1346, 2702, 3394, 1344,
	1343, 1342, 1339, 1332, 3039, 3040, 3409, 1331, 1265, 1266,
	1267, 1264, 1329, 1328, 3265, 1327, 1265, 1266, 1267, 1264,
	1326, 3399, 1325, 1324, 1323, 1322, 673, 2059, 1321, 2524,
	2528, 2529, 2530, 2525, 2533, 2526, 2531, 3466, 3433, 2527,
	3435, 2532, 1320, 1319, 1318, 1313, 3943, 1312, 3393, 1311,
	1310, 1309, 1958, 2539, 2079, 3485, 1229, 1173, 3343, 3344,
	3537, 2398, 2376, 3421, 1217, 4070, 4021, 3346, 2823, 2173,
	2568, 1228, 3005, 3352, 3349, 3425, 1070, 3427, 1977, 3504,
	3010, 142, 1192, 3004, 3008, 3011, 3440, 3014, 3003, 3009,
	125, 3284, 3974, 3443, 3692, 1192, 142, 3012, 142, 2529,
	2530, 67, 3575, 3883, 66, 2662, 2650, 1192, 1446, 3551,
	3576, 1947, 1948, 1559, 1942, 1943, 1944, 3228, 2466, 3280,
	3486, 3281, 3090, 3455, 3391, 3392, 3487, 3547, 3365, 2048,
	3490, 3457, 1612, 3483, 673, 2645, 2059, 1883, 2667, 2668,
	1192, 3534, 1883, 1883, 2686, 1668, 3204, 3553, 2918, 1646,
	2349, 2133, 1557, 1223, 1072, 2919, 2920, 2921, 3197, 676,
	3574, 1072, 2872, 3491, 2844, 2418, 3527, 3484, 2385, 3495,
	677, 3497, 223, 678, 1952, 3463, 3464, 3465, 1918, 3489,
	4083, 3469, 3470, 1825, 1824, 1192, 3566, 3563, 3543, 3848,
	3577, 3312, 2150, 2511, 3541, 2153, 3546, 2505, 2156, 1391,
	1392, 2158, 3550, 1389, 1390, 1387, 1388, 1385, 1386, 2060,
	1514, 3555, 3557, 1513, 3558, 1256, 2192, 3357, 3038, 2350,
	2205, 3561, 3565, 1466, 3505, 1465, 3568, 3620, 1437, 3567,
	1489, 3564, 4044, 4042, 3998, 3971, 3970, 3544, 3628, 3968,
	3908, 3868, 3598, 1192, 3745, 3744, 3682, 3590, 3410, 2906,
	3584, 3383, 3382, 3368, 2451, 2421, 1670, 3367, 3048, 2203,
	3231, 1463, 3429, 1192, 1559, 1559, 4074, 4073, 3560, 3239,
	3093, 2855, 3594, 2782, 2378, 3595, 2271, 3243, 1399, 1214,
	4073, 3663, 2996, 3663, 4074, 3711, 3625, 3363, 3627, 1189,
	2539, 1481, 3259, 75, 3657, 3658, 2, 1192, 3653, 1192,
	3681, 210, 3, 1557, 1771, 4096, 3652, 4097, 3684, 1,
	3686, 2763, 914, 915, 916, 917, 1559, 1189, 1887, 1393,
	3635, 3631, 3654, 3636, 3634, 918, 913, 2996, 1535, 2549,
	2113, 3645, 1563, 1891, 673, 3667, 1192, 1192, 920, 3021,
	1192, 1192, 3022, 3656, 3668, 3356, 3024, 2785, 3677, 3678,
	2224, 3680, 2985, 2188, 3487, 1771, 2503, 2366, 3733, 3222,
	3660, 977, 1831, 2252, 3728, 3690, 3534, 2257, 3693, 1685,
	3679, 1954, 1206, 3697, 3742, 2266, 1682, 1205, 1203, 3717,
	3718, 1776, 801, 3729, 3730, 2885, 3751, 3752, 2176, 2970,
	2944, 3527, 3741, 4082, 4117, 4036, 3739, 4085, 1701, 1559,
	3689, 785, 3962, 3873, 4040, 3875, 2120, 3761, 2229, 1261,
	3695, 3069, 2273, 1004, 842, 812, 1330, 3139, 3738, 3137,
	2280, 811, 3782, 3452, 2813, 3746, 3740, 3041, 1072, 3818,
	1005, 3579, 3775, 3763, 2159, 3870, 3759, 1613, 1557, 1724,
	1617, 1724, 2297, 2417, 3734, 3758, 3827, 2302, 2303, 2304,
	3928, 3691, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314,
	2315, 2316, 3276, 3770, 3774, 2517, 984, 3762, 2880, 1641,
	3923, 3816, 3810, 3614, 3499, 3610, 3608, 3609, 717, 2092,
	646, 3789, 1054, 3732, 718, 2397, 3986, 3850, 1192, 956,
	3735, 2375, 957, 949, 3736, 2832, 2831, 1741, 1270, 3834,
	3800, 3840, 2524, 2528, 2529, 2530, 2525, 2533, 2526, 2531,
	3811, 1758, 2527, 3598, 2532, 3158, 3159, 3813, 3812, 1307,
	756, 2254, 2810, 3522, 3034, 3825, 74, 3830, 73, 72,
	71, 231, 1192, 803, 230, 3783, 3649, 1559, 3958, 4087,
	782, 3396, 781, 780, 3826, 779, 778, 777, 2522, 2523,
	3808, 2521, 2519, 2518, 3847, 2074, 2073, 3047, 3366, 2138,
	2140, 142, 142, 142, 1070, 3237, 2909, 2904, 1999, 1997,
	1526, 3858, 2446, 2453, 1996, 3856, 1557, 4018, 3400, 1291,
	3601, 1295, 3938, 3939, 3708, 2954, 3597, 3606, 1941, 3607,
	2442, 3900, 2016, 3889, 2925, 2013, 2012, 1292, 1294, 1290,
	3869, 1293, 1279, 1278, 1288, 1289, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1280, 2917, 3704, 3698, 2044, 1072, 3909,
	3814, 3662, 1809, 3506, 3507, 3513, 2384, 1123, 1119, 1121,
	1724, 1122, 1120, 2707, 3332, 2423, 3199, 1297, 2358, 2357,
	3897, 2355, 3903, 2354, 1422, 3899, 3982, 3630, 3927, 2573,
	2571, 1170, 1192, 3345, 3911, 3920, 3341, 2184, 3350, 3006,
	1559, 2201, 2120, 3952, 3089, 2075, 2071, 2070, 3959, 1094,
	1093, 1594, 2987, 2512, 3921, 1883, 3926, 1883, 3791, 3859,
	3935, 1946, 3960, 950, 2373, 109, 41, 122, 108, 3942,
	3944, 3946, 3948, 185, 3951, 3941, 1883, 1883, 59, 1557,
	184, 58, 120, 182, 57, 103, 102, 3967, 119, 180,
	3965, 1559, 56, 215, 3816, 214, 217, 216, 213, 2623,
	2624, 212, 1601, 211, 3972, 3666, 3979, 3954, 1597, 908,
	44, 4009, 43, 186, 42, 110, 60, 4017, 40, 4002,
	4003, 4001, 3999, 39, 38, 4000, 34, 13, 12, 35,
	1557, 4005, 22, 3910, 21, 1689, 20, 26, 3914, 3915,
	32, 31, 135, 134, 4033, 30, 133, 132, 131, 4026,
	2120, 4027, 130, 4028, 129, 4029, 128, 127, 2656, 4030,
	2659, 29, 4043, 19, 4045, 4046, 1384, 51, 50, 4041,
	3936, 4039, 49, 48, 47, 1805, 46, 3889, 4049, 1192,
	9, 123, 1802, 118, 116, 28, 1804, 1801, 1803, 1807,
	1808, 117, 3865, 3866, 1806, 114, 115, 113, 112, 3840,
	4062, 111, 106, 104, 86, 1809, 85, 4063, 4065, 4064,
	84, 99, 4068, 98, 97, 4071, 4081, 4069, 4089, 96,
	3511, 4088, 95, 94, 92, 2699, 93, 1003, 2705, 83,
	82, 81, 80, 79, 101, 107, 4101, 105, 4093, 2723,
	2724, 90, 1192, 4075, 4076, 4077, 4078, 2726, 2727, 100,
	91, 89, 88, 4106, 3927, 4107, 87, 78, 4109, 77,
	4115, 3523, 76, 2732, 166, 4119, 165, 164, 4116, 163,
	162, 160, 161, 159, 3514, 158, 157, 156, 155, 154,
	52, 53, 54, 55, 176, 3509, 175, 177, 179, 181,
	3531, 3532, 1730, 1883, 178, 4127, 3510, 183, 173, 171,
	174, 172, 4089, 4135, 170, 4088, 4134, 69, 11, 4051,
	4052, 121, 18, 4, 4119, 4136, 4056, 4057, 4058, 4059,
	4140, 4060, 1568, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 0, 3515, 206, 64, 197, 168, 1812, 1813,
	1814, 1815, 1816, 1817, 1810, 1811, 0, 0, 0, 0,
	3716, 0, 0, 198, 3836, 0, 992, 0, 0, 0,
	189, 0, 142, 0, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2862, 2863, 0, 1805, 0,
	0, 0, 0, 140, 1724, 1802, 3685, 0, 0, 1804,
	1801, 1803, 1807, 1808, 0, 0, 0, 1806, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 1279, 1278,
	1288, 1289, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 989,
	142, 3530, 0, 2432, 0, 0, 0, 0, 142, 1032,
	1279, 1278, 1288, 1289, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1280, 142, 0, 0, 142, 142, 0, 3519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 2694, 0, 0, 0, 0, 0, 0, 0,
	3516, 3520, 3518, 3517, 148, 149, 0, 150, 151, 0,
	0, 0, 152, 0, 0, 153, 1279, 1278, 1288, 1289,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 1883, 0, 0, 0,
	3525, 3526, 0, 1034, 0, 0, 1033, 0, 0, 0,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1812, 1813, 1814, 1815, 1816, 1817, 1810, 1811, 3683,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 195,
	204, 196, 124, 0, 0, 1018, 0, 0, 3135, 0,
	0, 0, 0, 3533, 993, 0, 0, 0, 0, 0,
	0, 194, 188, 187, 0, 3512, 0, 0, 70, 0,
	0, 3524, 0, 0, 0, 3054, 0, 3056, 0, 0,
	0, 995, 0, 1279, 1278, 1288, 1289, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1280, 0, 1883, 0, 0, 0,
	0, 1883, 1279, 1278, 1288, 1289, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1280, 2203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2251, 0, 0, 190,
	191, 192, 1279, 1278, 1288, 1289, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1280, 0, 0, 1017, 1015, 0, 3109,
	1279, 1278, 1288, 1289, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1280, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 1014, 0, 0, 0, 3133, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 136, 0,
	0, 0, 193, 0, 137, 0, 994, 1027, 0, 0,
	0, 3529, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2045, 0, 0, 0, 0,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 1024, 1028, 0, 0,
	0, 0, 0, 2078, 63, 0, 0, 0, 0, 0,
	0, 2048, 2015, 0, 0, 0, 1011, 3528, 1009, 1013,
	1031, 2049, 2050, 0, 1010, 1007, 1006, 0, 1012, 997,
	998, 996, 999, 1000, 1001, 1002, 0, 1029, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 2014, 0, 0,
	1025, 1026, 0, 65, 0, 0, 729, 728, 735, 725,
	0, 0, 0, 0, 0, 2022, 0, 0, 0, 732,
	733, 0, 734, 738, 0, 0, 719, 0, 142, 0,
	0, 142, 142, 3291, 142, 0, 743, 1021, 146, 203,
	0, 147, 0, 1020, 0, 0, 169, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 1016, 0,
	0, 2045, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 0, 0, 0, 1070, 0, 0, 142, 142, 0,
	0, 0, 747, 2038, 0, 749, 0, 1070, 0, 142,
	748, 0, 0, 0, 0, 0, 0, 2048, 2015, 0,
	0, 0, 0, 0, 142, 0, 0, 2049, 2050, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 45, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 1019, 0, 0, 0,
	0, 0, 990, 991, 985, 0, 143, 144, 0, 986,
	145, 2022, 0, 0, 0, 0, 0, 2005, 2007, 2004,
	0, 0, 2001, 0, 0, 0, 0, 2026, 0, 0,
	1265, 1266, 1267, 1264, 0, 0, 0, 0, 2032, 0,
	0, 0, 0, 0, 1297, 0, 2017, 0, 2000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2020, 2054,
	0, 0, 2021, 2023, 2025, 0, 2027, 2028, 2029, 2033,
	2034, 2035, 2037, 2040, 2041, 2042, 0, 0, 0, 2038,
	0, 0, 0, 2030, 2039, 2031, 0, 0, 0, 0,
	720, 722, 721, 0, 0, 2009, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	1809, 0, 0, 731, 0, 0, 0, 0, 0, 2046,
	746, 0, 0, 0, 0, 0, 0, 724, 3402, 0,
	0, 714, 0, 0, 0, 3404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2002, 2003, 2005, 2875, 2004, 0, 0, 2874, 0,
	0, 0, 0, 2026, 0, 0, 0, 3419, 0, 2043,
	0, 0, 0, 0, 2032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2019, 0, 0, 0,
	0, 0, 0, 2018, 2020, 2054, 0, 0, 2021, 2023,
	2025, 0, 2027, 2028, 2029, 2033, 2034, 2035, 2037, 2040,
	2041, 2042, 0, 0, 0, 0, 0, 2036, 0, 2030,
	2039, 2031, 0, 0, 0, 0, 2024, 0, 0, 0,
	0, 2009, 0, 0, 0, 0, 0, 0, 0, 2052,
	2051, 0, 0, 0, 726, 730, 736, 0, 737, 739,
	0, 0, 740, 741, 742, 2046, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1805, 0, 0, 0, 2002, 2003, 0,
	1802, 0, 2011, 0, 1804, 1801, 1803, 1807, 1808, 0,
	0, 0, 1806, 0, 0, 2043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2019, 1883, 0, 0, 0, 0, 0, 2018,
	1142, 0, 0, 0, 2047, 0, 0, 2053, 0, 1883,
	0, 0, 3569, 0, 0, 3571, 0, 0, 0, 0,
	0, 0, 0, 2036, 0, 0, 0, 0, 0, 0,
	2542, 0, 2024, 0, 0, 0, 3578, 0, 0, 0,
	0, 0, 0, 0, 0, 2052, 2051, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2078, 0, 0, 2011, 0,
	0, 0, 0, 142, 0, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1812, 1813, 1814, 1815,
	1816, 1817, 1810, 1811, 1127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 0,
	2047, 0, 0, 2053, 0, 1150, 1154, 1156, 1158, 1160,
	1161, 1163, 0, 1168, 1164, 1165, 1166, 1167, 0, 1145,
	1146, 1147, 1148, 1125, 1126, 1151, 0, 1128, 0, 1130,
	1131, 1132, 1133, 1129, 1134, 1135, 1136, 1137, 1138, 1141,
	1143, 1139, 1140, 1149, 0, 0, 0, 0, 0, 0,
	0, 1153, 1155, 1157, 1159, 1162, 0, 1127, 0, 0,
	0, 1117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 1154,
	1156, 1158, 1160, 1161, 1163, 0, 1168, 1164, 1165, 1166,
	1167, 1144, 1145, 1146, 1147, 1148, 1125, 1126, 1151, 0,
	1128, 0, 1130, 1131, 1132, 1133, 1129, 1134, 1135, 1136,
	1137, 1138, 1141, 1143, 1139, 1140, 1149, 0, 0, 0,
	1127, 0, 0, 0, 1153, 1155, 1157, 1159, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1150, 1154, 1156, 1158, 1160, 1161, 1163, 0, 1168,
	1164, 1165, 1166, 1167, 0, 1145, 1146, 1147, 1148, 1125,
	1126, 1151, 0, 1128, 1144, 1130, 1131, 1132, 1133, 1129,
	1134, 1135, 1136, 1137, 1138, 1141, 1143, 1139, 1140, 1149,
	0, 0, 0, 729, 728, 735, 725, 1153, 1155, 1157,
	1159, 1162, 0, 0, 142, 0, 732, 733, 0, 734,
	738, 0, 0, 719, 2045, 142, 0, 0, 0, 0,
	0, 206, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1144, 0, 0,
	0, 0, 0, 0, 3661, 0, 0, 2703, 2704, 0,
	2048, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 749, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 729,
	728, 735, 725, 0, 2022, 0, 0, 0, 0, 0,
	0, 0, 732, 733, 0, 734, 738, 0, 1317, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2078, 2078, 2078, 2078, 2078, 2078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3934, 0, 0, 0, 0,
	0, 1152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 722, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 142, 746, 0, 0,
	0, 142, 0, 0, 724, 0, 2026, 0, 0, 0,
	0, 0, 0, 0, 1152, 0, 0, 2032, 0, 2045,
	0, 4014, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 2020, 2054, 0,
	0, 2021, 2023, 2025, 0, 2027, 2028, 2029, 2033, 2034,
	2035, 2037, 2040, 2041, 2042, 2048, 0, 2045, 0, 0,
	0, 0, 2030, 2039, 2031, 0, 0, 0, 0, 0,
	0, 0, 0, 720, 722, 721, 0, 1152, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 2048, 0, 0, 731, 0, 2046, 3839,
	4014, 0, 0, 746, 0, 0, 0, 0, 0, 2022,
	724, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 730, 736, 0, 737, 739, 0, 0, 740,
	741, 742, 0, 0, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2022, 2043, 0,
	0, 0, 0, 0, 0, 0, 4014, 0, 0, 0,
	0, 0, 0, 0, 0, 2019, 0, 0, 0, 0,
	0, 0, 2018, 0, 0, 0, 0, 2038, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 2024, 0, 0, 0, 0,
	0, 1070, 0, 142, 0, 2038, 0, 0, 142, 0,
	0, 0, 4138, 0, 0, 2078, 0, 726, 730, 736,
	0, 737, 739, 0, 0, 740, 741, 742, 0, 0,
	744, 745, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 2020, 2054, 0, 0, 2021, 2023, 2025, 2026,
	2027, 2028, 2029, 2033, 2034, 2035, 2037, 2040, 2041, 2042,
	2032, 0, 0, 3665, 0, 0, 0, 2030, 2039, 2031,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2020, 2054, 0, 0, 2021, 2023, 2025, 0, 2027, 2028,
	2029, 2033, 2034, 2035, 2037, 2040, 2041, 2042, 0, 0,
	0, 0, 0, 2046, 0, 2030, 2039, 2031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2046, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 2043, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2019, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2036, 0, 0, 0, 0, 0, 0, 2019, 0,
	2024, 0, 0, 0, 0, 2018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2036,
	0, 0, 0, 0, 0, 0, 0, 0, 2024, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3669, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 3669, 0, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 0, 336, 2078, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 810, 568, 519,
	434, 385, 586, 585, 0, 0, 879, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 763, 0, 0, 800, 855, 854, 787, 797, 0,
	0, 309, 229, 514, 634, 516, 515, 788, 0, 789,
	793, 796, 792, 790, 791, 0, 870, 0, 0, 0,
	0, 0, 0, 755, 767, 0, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	764, 765, 0, 0, 0, 0, 820, 0, 766, 0,
	0, 815, 794, 798, 0, 142, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 795, 818, 822, 330, 893,
	816, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 894, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	813, 0, 631, 0, 470, 0, 0, 877, 0, 0,
	0, 440, 0, 0, 366, 142, 0, 0, 817, 0,
	423, 403, 890, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 1833, 1832, 1834,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 874, 399, 596, 629, 630, 521, 0, 889,
	869, 871, 872, 876, 880, 881, 882, 883, 884, 886,
	888, 892, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 891, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 821, 571, 572, 389, 390, 391, 392,
	878, 597, 314, 493, 415, 142, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 900,
	873, 899, 901, 902, 898, 903, 904, 885, 776, 0,
	828, 896, 895, 897, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 783, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 862, 835, 836,
	837, 773, 838, 832, 833, 774, 834, 863, 826, 859,
	860, 802, 829, 839, 858, 840, 861, 864, 865, 905,
	906, 846, 830, 257, 907, 843, 866, 857, 856, 841,
	827, 867, 868, 809, 804, 844, 845, 831, 850, 851,
	852, 775, 823, 824, 825, 847, 848, 805, 806, 807,
	808, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 853, 639, 438,
	439, 0, 849, 642, 643, 640, 374, 425, 444, 432,
	819, 656, 517, 518, 657, 628, 0, 768, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 336, 1884, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 810, 568,
	519, 434, 385, 586, 585, 0, 0, 879, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 2104,
	0, 0, 763, 0, 0, 800, 855, 854, 787, 797,
	0, 0, 309, 229, 514, 634, 516, 515, 788, 0,
	789, 793, 796, 792, 790, 791, 0, 870, 0, 0,
	0, 0, 0, 0, 755, 767, 0, 772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 0, 0, 0, 0, 820, 0, 766,
	0, 0, 2105, 794, 798, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 795, 818, 822, 330,
	893, 816, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 894, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 813, 0, 631, 0, 470, 0, 0, 877, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 817,
	0, 423, 403, 890, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 874, 399, 596, 629, 630, 521, 0,
	889, 869, 871, 872, 876, 880, 881, 882, 883, 884,
	886, 888, 892, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 891, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 821, 571, 572, 389, 390, 391,
	392, 878, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	900, 873, 899, 901, 902, 898, 903, 904, 885, 776,
	0, 828, 896, 895, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 783, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 862, 835,
	836, 837, 773, 838, 832, 833, 774, 834, 863, 826,
	859, 860, 802, 829, 839, 858, 840, 861, 864, 865,
	905, 906, 846, 830, 257, 907, 843, 866, 857, 856,
	841, 827, 867, 868, 809, 804, 844, 845, 831, 850,
	851, 852, 775, 823, 824, 825, 847, 848, 805, 806,
	807, 808, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 853, 639,
	438, 439, 0, 849, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 0, 768, 206,
	819, 0, 0, 0, 0, 0, 0, 0, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 1300, 568,
	519, 434, 385, 586, 585, 0, 0, 879, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 763, 0, 0, 800, 855, 854, 787, 797,
	0, 0, 309, 229, 514, 634, 516, 515, 788, 0,
	789, 793, 796, 792, 790, 791, 0, 870, 0, 0,
	0, 0, 0, 0, 755, 767, 0, 772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 0, 0, 0, 0, 820, 0, 766,
	0, 0, 815, 794, 798, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 795, 818, 822, 330,
	893, 816, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 894, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 813, 0, 631, 0, 470, 0, 0, 877, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 817,
	0, 423, 403, 890, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 874, 399, 596, 629, 630, 521, 0,
	889, 869, 871, 872, 876, 880, 881, 882, 883, 884,
	886, 888, 892, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 891, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 821, 571, 572, 389, 390, 391,
	392, 878, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	900, 873, 899, 901, 902, 898, 903, 904, 885, 776,
	0, 828, 896, 895, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 783, 293, 527,
	370, 169, 414, 343, 592, 593, 0, 644, 862, 835,
	836, 837, 773, 838, 832, 833, 774, 834, 863, 826,
	859, 860, 802, 829, 839, 858, 840, 861, 864, 865,
	905, 906, 846, 830, 257, 907, 843, 866, 857, 856,
	841, 827, 867, 868, 809, 804, 844, 845, 831, 850,
	851, 852, 775, 823, 824, 825, 847, 848, 805, 806,
	807, 808, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 853, 639,
	438, 439, 0, 849, 642, 643, 640, 374, 425, 444,
	432, 819, 656, 517, 518, 657, 628, 0, 768, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 336, 4137,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 810,
	568, 519, 434, 385, 586, 585, 0, 0, 879, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 763, 0, 0, 800, 855, 854, 787,
	797, 0, 0, 309, 229, 514, 634, 516, 515, 788,
	0, 789, 793, 796, 792, 790, 791, 0, 870, 0,
	0, 0, 0, 0, 0, 755, 767, 0, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 764, 765, 0, 0, 0, 0, 820, 0,
	766, 0, 0, 815, 794, 798, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 795, 818, 822,
	330, 893, 816, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 894,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 813, 0, 631, 0, 470, 0, 0, 877,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	817, 0, 423, 403, 890, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 874, 399, 596, 629, 630, 521,
	0, 889, 869, 871, 872, 876, 880, 881, 882, 883,
	884, 886, 888, 892, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 891, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 821, 571, 572, 389, 390,
	391, 392, 878, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 900, 873, 899, 901, 902, 898, 903, 904, 885,
	776, 0, 828, 896, 895, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 783, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 862,
	835, 836, 837, 773, 838, 832, 833, 774, 834, 863,
	826, 859, 860, 802, 829, 839, 858, 840, 861, 864,
	865, 905, 906, 846, 830, 257, 907, 843, 866, 857,
	856, 841, 827, 867, 868, 809, 804, 844, 845, 831,
	850, 851, 852, 775, 823, 824, 825, 847, 848, 805,
	806, 807, 808, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 853,
	639, 438, 439, 0, 849, 642, 643, 640, 374, 425,
	444, 432, 819, 656, 517, 518, 657, 628, 0, 768,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 771, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	810, 568, 519, 434, 385, 586, 585, 0, 0, 879,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 763, 0, 0, 800, 855, 854,
	787, 797, 0, 0, 309, 229, 514, 634, 516, 515,
	788, 0, 789, 793, 796, 792, 790, 791, 0, 870,
	0, 0, 0, 0, 0, 0, 755, 767, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 765, 0, 0, 0, 0, 820,
	0, 766, 0, 0, 815, 794, 798, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 795, 818,
	822, 330, 893, 816, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	894, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 813, 0, 631, 0, 470, 0, 0,
	877, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 817, 0, 423, 403, 890, 4015, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 874, 399, 596, 629, 630,
	521, 0, 889, 869, 871, 872, 876, 880, 881, 882,
	883, 884, 886, 888, 892, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 891, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 821, 571, 572, 389,
	390, 391, 392, 878, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 900, 873, 899, 901, 902, 898, 903, 904,
	885, 776, 0, 828, 896, 895, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 783,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	862, 835, 836, 837, 773, 838, 832, 833, 774, 834,
	863, 826, 859, 860, 802, 829, 839, 858, 840, 861,
	864, 865, 905, 906, 846, 830, 257, 907, 843, 866,
	857, 856, 841, 827, 867, 868, 809, 804, 844, 845,
	831, 850, 851, 852, 775, 823, 824, 825, 847, 848,
	805, 806, 807, 808, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	853, 639, 438, 439, 0, 849, 642, 643, 640, 374,
	425, 444, 432, 819, 656, 517, 518, 657, 628, 0,
	768, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	336, 1884, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 810, 568, 519, 434, 385, 586, 585, 0, 0,
	879, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 763, 0, 0, 800, 855,
	854, 787, 797, 0, 0, 309, 229, 514, 634, 516,
	515, 788, 0, 789, 793, 796, 792, 790, 791, 0,
	870, 0, 0, 0, 0, 0, 0, 755, 767, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 764, 765, 0, 0, 0, 0,
	820, 0, 766, 0, 0, 815, 794, 798, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 795,
	818, 822, 330, 893, 816, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 894, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 813, 0, 631, 0, 470, 0,
	0, 877, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 817, 0, 423, 403, 890, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 874, 399, 596, 629,
	630, 521, 0, 889, 869, 871, 872, 876, 880, 881,
	882, 883, 884, 886, 888, 892, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 891, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 821, 571, 572,
	389, 390, 391, 392, 878, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 900, 873, 899, 901, 902, 898, 903,
	904, 885, 776, 0, 828, 896, 895, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	783, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 862, 835, 836, 837, 773, 838, 832, 833, 774,
	834, 863, 826, 859, 860, 802, 829, 839, 858, 840,
	861, 864, 865, 905, 906, 846, 830, 257, 907, 843,
	866, 857, 856, 841, 827, 867, 868, 809, 804, 844,
	845, 831, 850, 851, 852, 775, 823, 824, 825, 847,
	848, 805, 806, 807, 808, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 853, 639, 438, 439, 0, 849, 642, 643, 640,
	374, 425, 444, 432, 819, 656, 517, 518, 657, 628,
	0, 768, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 810, 568, 519, 434, 385, 586, 585, 0,
	0, 879, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 763, 0, 0, 800,
	855, 854, 787, 797, 0, 0, 309, 229, 514, 634,
	516, 515, 788, 0, 789, 793, 796, 792, 790, 791,
	0, 870, 0, 0, 0, 0, 0, 0, 755, 767,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 764, 765, 1596, 0, 0,
	0, 820, 0, 766, 0, 0, 815, 794, 798, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	795, 818, 822, 330, 893, 816, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 894, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 813, 0, 631, 0, 470,
	0, 0, 877, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 817, 0, 423, 403, 890, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 874, 399, 596,
	629, 630, 521, 0, 889, 869, 871, 872, 876, 880,
	881, 882, 883, 884, 886, 888, 892, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 891, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 821, 571,
	572, 389, 390, 391, 392, 878, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 900, 873, 899, 901, 902, 898,
	903, 904, 885, 776, 0, 828, 896, 895, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 783, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 862, 835, 836, 837, 773, 838, 832, 833,
	774, 834, 863, 826, 859, 860, 802, 829, 839, 858,
	840, 861, 864, 865, 905, 906, 846, 830, 257, 907,
	843, 866, 857, 856, 841, 827, 867, 868, 809, 804,
	844, 845, 831, 850, 851, 852, 775, 823, 824, 825,
	847, 848, 805, 806, 807, 808, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 853, 639, 438, 439, 0, 849, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 819, 768, 0, 2279, 0, 0, 0, 0, 0,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 810,
	568, 519, 434, 385, 586, 585, 0, 0, 879, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 763, 0, 0, 800, 855, 854, 787,
	797, 0, 0, 309, 229, 514, 634, 516, 515, 788,
	0, 789, 793, 796, 792, 790, 791, 0, 870, 0,
	0, 0, 0, 0, 0, 755, 767, 0, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 764, 765, 0, 0, 0, 0, 820, 0,
	766, 0, 0, 815, 794, 798, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 795, 818, 822,
	330, 893, 816, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 894,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 813, 0, 631, 0, 470, 0, 0, 877,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	817, 0, 423, 403, 890, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 874, 399, 596, 629, 630, 521,
	0, 889, 869, 871, 872, 876, 880, 881, 882, 883,
	884, 886, 888, 892, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 891, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 821, 571, 572, 389, 390,
	391, 392, 878, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 900, 873, 899, 901, 902, 898, 903, 904, 885,
	776, 0, 828, 896, 895, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 783, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 862,
	835, 836, 837, 773, 838, 832, 833, 774, 834, 863,
	826, 859, 860, 802, 829, 839, 858, 840, 861, 864,
	865, 905, 906, 846, 830, 257, 907, 843, 866, 857,
	856, 841, 827, 867, 868, 809, 804, 844, 845, 831,
	850, 851, 852, 775, 823, 824, 825, 847, 848, 805,
	806, 807, 808, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 853,
	639, 438, 439, 0, 849, 642, 643, 640, 374, 425,
	444, 432, 819, 656, 517, 518, 657, 628, 0, 768,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 771, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	810, 568, 519, 434, 385, 586, 585, 0, 0, 879,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 763, 0, 0, 800, 855, 854,
	787, 797, 0, 0, 309, 229, 514, 634, 516, 515,
	788, 0, 789, 793, 796, 792, 790, 791, 0, 870,
	0, 0, 0, 0, 0, 0, 755, 767, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 765, 1877, 0, 0, 0, 820,
	0, 766, 0, 0, 815, 794, 798, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 795, 818,
	822, 330, 893, 816, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	894, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 813, 0, 631, 0, 470, 0, 0,
	877, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 817, 0, 423, 403, 890, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 874, 399, 596, 629, 630,
	521, 0, 889, 869, 871, 872, 876, 880, 881, 882,
	883, 884, 886, 888, 892, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 891, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 821, 571, 572, 389,
	390, 391, 392, 878, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 900, 873, 899, 901, 902, 898, 903, 904,
	885, 776, 0, 828, 896, 895, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 783,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	862, 835, 836, 837, 773, 838, 832, 833, 774, 834,
	863, 826, 859, 860, 802, 829, 839, 858, 840, 861,
	864, 865, 905, 906, 846, 830, 257, 907, 843, 866,
	857, 856, 841, 827, 867, 868, 809, 804, 844, 845,
	831, 850, 851, 852, 775, 823, 824, 825, 847, 848,
	805, 806, 807, 808, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	853, 639, 438, 439, 0, 849, 642, 643, 640, 374,
	425, 444, 432, 819, 656, 517, 518, 657, 628, 0,
	768, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 810, 568, 519, 434, 385, 586, 585, 0, 0,
	879, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 763, 0, 0, 800, 855,
	854, 787, 797, 0, 0, 309, 229, 514, 634, 516,
	515, 788, 0, 789, 793, 796, 792, 790, 791, 0,
	870, 0, 0, 0, 0, 0, 0, 755, 767, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 764, 765, 0, 0, 0, 0,
	820, 0, 766, 0, 0, 815, 794, 798, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 795,
	818, 822, 330, 893, 816, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 894, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 813, 0, 631, 0, 470, 0,
	0, 877, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 817, 0, 423, 403, 890, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 874, 399, 596, 629,
	630, 521, 0, 889, 869, 871, 872, 876, 880, 881,
	882, 883, 884, 886, 888, 892, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 891, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 821, 571, 572,
	389, 390, 391, 392, 878, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 900, 873, 899, 901, 902, 898, 903,
	904, 885, 776, 0, 828, 896, 895, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	783, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 862, 835, 836, 837, 773, 838, 832, 833, 774,
	834, 863, 826, 859, 860, 802, 829, 839, 858, 840,
	861, 864, 865, 905, 906, 846, 830, 257, 907, 843,
	866, 857, 856, 841, 827, 867, 868, 809, 804, 844,
	845, 831, 850, 851, 852, 775, 823, 824, 825, 847,
	848, 805, 806, 807, 808, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 853, 639, 438, 439, 0, 849, 642, 643, 640,
	374, 425, 444, 432, 819, 656, 517, 518, 657, 628,
	0, 768, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 810, 568, 519, 434, 385, 586, 585, 0,
	0, 879, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 763, 0, 0, 800,
	855, 854, 787, 797, 0, 0, 309, 229, 514, 634,
	516, 515, 788, 0, 789, 793, 796, 792, 790, 791,
	0, 870, 0, 0, 0, 0, 0, 0, 755, 767,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 764, 765, 0, 0, 0,
	0, 820, 0, 766, 0, 0, 815, 794, 798, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	795, 818, 822, 330, 893, 816, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 894, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 813, 0, 631, 0, 470,
	0, 0, 877, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 817, 0, 423, 403, 890, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 874, 399, 596,
	629, 630, 521, 0, 889, 869, 871, 872, 876, 880,
	881, 882, 883, 884, 886, 888, 892, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 891, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 821, 571,
	572, 389, 390, 391, 392, 878, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 900, 873, 899, 901, 902, 898,
	903, 904, 885, 776, 0, 828, 896, 895, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 783, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 862, 835, 836, 837, 773, 838, 832, 833,
	774, 834, 863, 826, 859, 860, 802, 829, 839, 858,
	840, 861, 864, 865, 905, 906, 846, 830, 257, 907,
	843, 866, 857, 856, 841, 827, 867, 868, 809, 804,
	844, 845, 831, 850, 851, 852, 775, 823, 824, 825,
	847, 848, 805, 806, 807, 808, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 853, 639, 438, 439, 0, 3580, 642, 3581,
	3582, 374, 425, 444, 432, 819, 656, 517, 518, 657,
	628, 0, 768, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 771, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 810, 568, 519, 434, 385, 586, 585,
	0, 0, 879, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 763, 0, 0,
	800, 855, 854, 787, 797, 0, 0, 309, 229, 514,
	634, 516, 515, 2760, 0, 2761, 793, 796, 792, 790,
	791, 0, 870, 0, 0, 0, 0, 0, 0, 755,
	767, 0, 772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 764, 765, 0, 0,
	0, 0, 820, 0, 766, 0, 0, 815, 794, 798,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 795, 818, 822, 330, 893, 816, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 894, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 813, 0, 631, 0,
	470, 0, 0, 877, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 817, 0, 423, 403, 890, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 874, 399,
	596, 629, 630, 521, 0, 889, 869, 871, 872, 876,
	880, 881, 882, 883, 884, 886, 888, 892, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 891,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 821,
	571, 572, 389, 390, 391, 392, 878, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 900, 873, 899, 901, 902,
	898, 903, 904, 885, 776, 0, 828, 896, 895, 897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 783, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 862, 835, 836, 837, 773, 838, 832,
	833, 774, 834, 863, 826, 859, 860, 802, 829, 839,
	858, 840, 861, 864, 865, 905, 906, 846, 830, 257,
	907, 843, 866, 857, 856, 841, 827, 867, 868, 809,
	804, 844, 845, 831, 850, 851, 852, 775, 823, 824,
	825, 847, 848, 805, 806, 807, 808, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 853, 639, 438, 439, 0, 849, 642,
	643, 640, 374, 425, 444, 432, 819, 656, 517, 518,
	657, 628, 0, 768, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 1742, 0, 0, 0, 771,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 810, 568, 519, 434, 385, 586,
	585, 0, 0, 879, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 763, 0,
	0, 800, 855, 854, 787, 797, 0, 0, 309, 229,
	514, 634, 516, 515, 788, 0, 789, 793, 796, 792,
	790, 791, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 767, 0, 772, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 765, 0,
	0, 0, 0, 820, 0, 766, 0, 0, 815, 794,
	798, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 795, 818, 822, 330, 893, 816, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 894, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 813, 0, 631,
	0, 470, 0, 0, 877, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 817, 0, 423, 403, 890,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 1743, 1744, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 874,
	399, 596, 629, 630, 521, 0, 889, 869, 871, 872,
	876, 880, 881, 882, 883, 884, 886, 888, 892, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	891, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	821, 571, 572, 389, 390, 391, 392, 878, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 900, 873, 899, 901,
	902, 898, 903, 904, 885, 776, 0, 828, 896, 895,
	897, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 783, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 862, 835, 836, 837, 773, 838,
	832, 833, 774, 834, 863, 826, 859, 860, 802, 829,
	839, 858, 840, 861, 864, 865, 905, 906, 846, 830,
	257, 907, 843, 866, 857, 856, 841, 827, 867, 868,
	809, 804, 844, 845, 831, 850, 851, 852, 775, 823,
	824, 825, 847, 848, 805, 806, 807, 808, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 853, 639, 438, 439, 0, 849,
	642, 643, 640, 374, 425, 444, 432, 819, 656, 517,
	518, 657, 628, 0, 768, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 810, 568, 519, 434, 385,
	586, 585, 0, 0, 879, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 763,
	0, 0, 800, 855, 854, 787, 797, 0, 0, 309,
	229, 514, 634, 516, 515, 788, 0, 789, 793, 796,
	792, 790, 791, 0, 870, 0, 0, 0, 0, 0,
	0, 0, 767, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 765,
	0, 0, 0, 0, 820, 0, 766, 0, 0, 815,
	794, 798, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 795, 818, 822, 330, 893, 816, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 894, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 813, 0,
	631, 0, 470, 0, 0, 877, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 817, 0, 423, 403,
	890, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	874, 399, 596, 629, 630, 521, 0, 889, 869, 871,
	872, 876, 880, 881, 882, 883, 884, 886, 888, 892,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 891, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 821, 571, 572, 389, 390, 391, 392, 878, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 900, 873, 899,
	901, 902, 898, 903, 904, 885, 776, 0, 828, 896,
	895, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 783, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 862, 835, 836, 837, 773,
	838, 832, 833, 774, 834, 863, 826, 859, 860, 802,
	829, 839, 858, 840, 861, 864, 865, 905, 906, 846,
	830, 257, 907, 843, 866, 857, 856, 841, 827, 867,
	868, 809, 804, 844, 845, 831, 850, 851, 852, 775,
	823, 824, 825, 847, 848, 805, 806, 807, 808, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 853, 639, 438, 439, 0,
	849, 642, 643, 640, 374, 425, 444, 432, 819, 656,
	517, 518, 657, 628, 0, 768, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 810, 568, 519, 434,
	385, 586, 585, 0, 0, 879, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 800, 855, 854, 787, 797, 0, 0,
	309, 229, 514, 634, 516, 515, 788, 0, 789, 793,
	796, 792, 790, 791, 0, 870, 0, 0, 0, 0,
	0, 0, 755, 767, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 764,
	765, 0, 0, 0, 0, 820, 0, 766, 0, 0,
	815, 794, 798, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 795, 818, 822, 330, 893, 816,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 894, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 813,
	0, 631, 0, 470, 0, 0, 877, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 817, 0, 423,
	403, 890, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 874, 399, 596, 629, 630, 521, 0, 889, 869,
	871, 872, 876, 880, 881, 882, 883, 884, 886, 888,
	892, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 891, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 821, 571, 572, 389, 390, 391, 392, 878,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 900, 873,
	899, 901, 902, 898, 903, 904, 885, 776, 0, 828,
	896, 895, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 783, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 862, 835, 836, 837,
	773, 838, 832, 833, 774, 834, 863, 826, 859, 860,
	802, 829, 839, 858, 840, 861, 864, 865, 905, 906,
	846, 830, 257, 907, 843, 866, 857, 856, 841, 827,
	867, 868, 809, 804, 844, 845, 831, 850, 851, 852,
	775, 823, 824, 825, 847, 848, 805, 806, 807, 808,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 853, 639, 438, 439,
	0, 849, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 0, 768, 206, 64, 197,
	168, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 198, 0, 0, 0,
	0, 0, 0, 189, 0, 336, 0, 199, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 140, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 167, 195, 204, 196, 124, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 221, 0, 0, 0,
	440, 0, 0, 366, 194, 188, 187, 486, 0, 423,
	403, 233, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 606, 607, 608, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	465, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 224, 578, 581,
	511, 234, 0, 575, 590, 548, 589, 235, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 138, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 232, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 239, 304, 453, 240, 0, 293, 527, 370, 169,
	414, 343, 592, 593, 61, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	236, 45, 222, 225, 227, 226, 0, 62, 576, 588,
	622, 5, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 143,
	237, 517, 518, 238, 628, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2434, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2438, 470, 0, 0, 0, 2433, 0, 2432, 440, 2430,
	2435, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 2436, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 228,
	0, 0, 787, 797, 0, 0, 309, 229, 514, 634,
	516, 515, 788, 0, 789, 793, 796, 792, 790, 791,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	795, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 206, 64, 197, 168, 0, 0, 0, 0, 0,
	0, 401, 684, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	689, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 685, 687, 314, 493, 415, 699, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 169, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1127, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 2597, 2600, 2601, 2602, 2603, 2604, 2605,
	0, 2610, 2606, 2607, 2608, 2609, 0, 2592, 2593, 2594,
	2595, 1125, 2576, 2598, 0, 2577, 397, 2578, 2579, 2580,
	2581, 1129, 2582, 2583, 2584, 2585, 2586, 2589, 2590, 2587,
	2588, 2596, 409, 373, 410, 355, 387, 386, 388, 1153,
	1155, 1157, 1159, 1162, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 2591,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 2599,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 2434, 2437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 2438, 470, 0, 0, 0, 2433, 0, 2432,
	440, 2430, 2435, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 2436, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 2455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2454, 470, 0, 0, 0, 2460, 2457, 2459, 440, 0,
	2458, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 2452, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 2455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 2454, 470,
	0, 0, 0, 2460, 2457, 2459, 440, 0, 2458, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 2144, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	2145, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 1265, 1266, 1267, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 206, 656, 517, 518, 657, 628, 0,
	0, 0, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 140, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2195, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 169, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 206, 656, 517, 518, 657,
	628, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 2179,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1053, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1060, 1061, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 1047, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 1034, 468, 303, 1033, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 1051, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 1052, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 1055, 571,
	572, 389, 390, 391, 392, 349, 597, 1050, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 1062, 1048,
	1058, 1049, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 1059, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 1046, 425, 444, 432, 206, 656, 517, 518, 657,
	628, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2076, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1060, 1061, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 1034, 468, 303, 1033, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 1062, 2097,
	1058, 2098, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 1059, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 2989, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 2992, 0, 0,
	0, 2991, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 1562, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1560, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1558, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1556, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1560, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 669, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 670, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4084, 0, 228,
	855, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1560, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1558, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 2499, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 982, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1560, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1772, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 2538, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2540, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 2144, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 2145, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3208, 3210, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 2561, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1560, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	675, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 855, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4061, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3817, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 3953,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1786, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3833,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 3743, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3240, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2076, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 3456, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1560, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2540, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 2908, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	2658, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2619, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2617, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 2386,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 1926, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	2058, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1560, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 1963, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 1589, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 682, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 982, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 3186, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 1912, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 1539, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 1537, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 1415, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 750,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 707,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 708, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 2045, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 2048, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3809, 0, 0, 0,
	2038, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2026, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2032, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 2054, 0, 0, 2021,
	2023, 2025, 0, 2027, 2028, 2029, 2033, 2034, 2035, 2037,
	2040, 2041, 2042, 0, 0, 0, 0, 0, 0, 0,
	2030, 2039, 2031, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2046, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2019, 0, 0, 0, 0, 0, 0,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2036, 0, 0, 0, 0, 0,
	0, 0, 0, 2024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3669,
}

var yyPact = [...]int{
	274, -1000, -1000, -1000, -326, 15924, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51046, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 489, 51046, -323, 26802, 32544, -1000, -1000, 2754, -1000,
	49770, 17858, 51046, 591, 576, 51046, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 973, -1000, 55512, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 896, 4643, 54874, 12069,
	-214, -1000, 1651, -27, 2643, 488, -184, -188, 1133, 1146,
	1366, 1063, 51046, 1117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 251, 133, 50408,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4148, 254, 972, 986, 22970, 158,
	143, 1651, 470, -78, 332, -1000, 2074, 4141, 208, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12069, 12069, 15924, -373, 15924, 12069, 51046, 51046, -1000, -1000,
	-1000, -1000, -323, 49770, 896, 4643, 12069, 2643, 488, -184,
	-188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -78, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 143, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5161, -1000, 1699, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2448, 3171, 1697, 2642, 845, 49132,
	49132, 51046, -1000, 157, 845, 49132, -1000, -1000, -1000, 1651,
	3506, -1000, 51046, 51046, 275, 1933, -1000, 536, 570, 544,
	409, 401, 1692, -1000, -1000, -1000, -1000, -1000, -1000, 794,
	3462, -1000, 51046, 51046, 3180, 51046, -1000, 2304, 815, -1000,
	5430, 3316, 1446, 999, 3188, -1000, -1000, 3170, -1000, 412,
	346, 504, 496, 474, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 410, -1000, 3387, -1000, -1000, 388, -1000, -1000, 414,
	-1000, -1000, -1000, 125, -1000, -1000, -1000, -1000, -1000, -1000,
	5, -1000, -1000, 1164, 2552, 12069, 2288, -1000, 3661, 1704,
	-1000, -1000, -1000, 7576, 14633, 14633, 14633, 14633, 51046, -1000,
	-1000, 3024, 12069, 3165, 3164, 3163, 3161, -1000, -1000, -1000,
	-1000, -1000, -1000, 3159, 1691, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2062, -1000, -1000, -1000, 15274, -1000,
	3158, 3157, 3156, 3142, 3139, 3138, 3137, 3136, 3134, 3129,
	3127, 3126, 3121, 3117, 2831, 17210, 3116, 2634, 2630, 3115,
	3114, 3113, 2629, 3110, 3109, 3107, 2831, 2831, 3104, 3101,
	3099, 3098, 3097, 3091, 3090, 3089, 3088, 3082, 3081, 3080,
	3079, 3078, 3077, 3076, 3075, 3074, 3070, 3069, 3068, 3066,
	3065, 3064, 3058, 3054, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1503, -1000,
	3041, 3478, 2921, -1000, 3374, 3372, 3370, 3366, -253, 3036,
	2284, -1000, -1000, 111, 3461, 51046, -272, 51046, 443, -92,
	-94, -96, -1000, -68, -1000, -1000, 1111, -1000, 1100, 54236,
	945, -1000, -1000, 51046, 895, 895, 895, 51046, 51046, 229,
	956, 895, 895, 895, 895, 895, 948, 895, 3404, 964,
	961, 958, 957, 895, -28, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1920, 1917, 3248, 1082, 986, -1000, -1000, -1000,
	-1000, 1517, 51046, -1000, 2975, 443, -299, 1871, 1871, 3443,
	3443, 3401, 3399, 831, 830, 820, 1871, 704, -1000, 1889,
	1889, 1889, 1889, 1871, 545, 825, 3408, 3408, 151, 1889,
	94, 1871, 1871, 94, 1871, 1871, -1000, 1893, 341, -260,
	-1000, -1000, -1000, -1000, 1889, 1889, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3381, 3378, 896, 896, 51046, 896, 218,
	51046, 896, 896, 896, 51046, 905, -313, 46, 53598, 52960,
	2399, 2304, 809, 807, 1556, 1988, -1000, 1818, 51046, 51046,
	1818, 1818, 26164, 25526, -1000, 51046, -1000, 3478, 2921, 2822,
	1549, 2815, 2921, -97, 443, 896, 896, 896, 896, 896,
	364, 896, 896, 896, 896, 896, 51046, 51046, 48494, 896,
	896, 896, 896, 10140, 2074, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15924, 2260,
	2201, 206, 0, -300, 295, -1000, -1000, 51046, 3290, 355,
	-1000, -1000, -1000, 2957, -1000, 2959, 2959, 2959, 2959, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2959,
	2959, 2974, 3035, -1000, -1000, 2958, 2958, 2958, 2957, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2963, 2963, 2965, 2965, 2963, 51046,
	-116, -1000, -1000, 12069, 51046, 3309, 512, 3034, 845, 845,
	-1000, -1000, 51046, 334, 484, 845, 3478, 3305, 3408, 3435,
	-1000, -1000, 1690, 2283, 2628, -1000, 401, -1000, 475, 401,
	-1000, 459, 459, 1808, -1000, 1349, -1000, -1000, -1000, -1000,
	-1000, -1000, 51046, 5, 451, -1000, -1000, 2599, 3029, -1000,
	698, 1367, 1375, -1000, 370, 5536, 41476, 2304, 41476, 51046,
	-1000, -1000, -1000, -1000, -1000, -1000, 106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 398, -1000, 12069, 12069, 12069, 12069, 12069, -1000, 1044,
	13992, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14633, 14633,
	14633, 14633, 14633, 14633, 14633, 14633, 14633, 14633, 14633, 14633,
	3021, 1922, 14633, 14633, 14633, 14633, 29354, 1549, 3102, 1524,
	310, 1704, 1704, 1704, 1704, 12069, -1000, 1950, 2552, 12069,
	12069, 12069, 12069, 35734, 51046, -1000, -1000, 4706, 12069, 12069,
	3831, 12069, 3350, 12069, 12069, 12069, 2814, 6285, 51046, 12069,
	-1000, 2813, 2811, -1000, -1000, 2093, 12069, -1000, -1000, 12069,
	-1000, -1000, 12069, 14633, 12069, -1000, 12069, 12069, 12069, -1000,
	-1000, 3628, 3350, 3350, 3350, 1887, 12069, 12069, 3350, 3350,
	3350, 1881, 3350, 3350, 3350, 3350, 3350, 3350, 3350, 3350,
	3350, 3350, 3350, 2809, 2808, 2807, 11428, 3408, -214, -1000,
	9499, 3305, 3408, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -256, 3028, 51046, 2627, 2626, -332, 204,
	500, 51046, 1194, -1000, -1000, 51046, 2278, 51046, 2267, 69,
	1131, 1105, 1113, -1000, -1000, 51046, 52322, -1000, 51046, 1973,
	51046, 51046, 3342, -1000, 3027, 51046, 895, 895, 895, -1000,
	46580, 41476, 51046, 51046, 2304, 51046, 51046, 51046, 895, 895,
	895, 895, 51046, -1000, 3260, 41476, 3254, 905, -1000, 1082,
	51046, 1517, 3338, 51046, -1000, -1000, -1000, -1000, 3443, 14633,
	14633, -1000, -1000, 12069, -1000, 246, 47856, 1889, 1871, 1871,
	-1000, -1000, 51046, -1000, -1000, -1000, 1889, 51046, 1889, 1889,
	3443, 1889, -1000, -1000, -1000, 1871, 1871, -1000, -1000, 12069,
	-1000, -1000, 1889, 1889, -1000, -1000, 3443, 51046, 102, 3443,
	3443, 126, -1000, -1000, -1000, 1871, 51046, 51046, 895, 51046,
	-1000, 51046, 51046, -1000, -1000, 51046, 51046, 4569, 51046, 46580,
	47218, 3377, -1000, 41476, 51046, 51046, 1513, -1000, 944, 38924,
	-1000, 51046, 1471, -1000, 49, -1000, 67, 46, 1818, 46,
	1818, 934, -1000, 694, 699, 24250, 631, 41476, 6926, -1000,
	-1000, 1818, 1818, 6926, 6926, 1706, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1506, -1000, 289, 3408, -1000, -1000, -1000,
	-1000, -1000, 2266, -1000, 51046, 46580, 41476, 2304, 51046, 896,
	51046, 51046, 51046, 51046, 51046, -1000, 3026, 1687, -1000, 3314,
	51046, 51046, 51046, 51046, 1358, -1000, -1000, 21048, 1675, -1000,
	-1000, 1947, -1000, 12069, 15924, -240, 12069, 15924, 15924, 12069,
	15924, -1000, 12069, 350, -1000, -1000, -1000, -1000, 2265, -1000,
	2263, -1000, -1000, -1000, -1000, -1000, 2623, 2623, -1000, 2262,
	-1000, -1000, -1000, -1000, 2259, -1000, -1000, 2258, -1000, -1000,
	-1000, -1000, -157, 2804, 1164, -1000, 2622, 3186, -216, -1000,
	22332, 51046, 51046, 512, 512, -340, 1916, 1915, 1911, 3391,
	-1000, -216, -1000, 21690, 51046, 484, 3408, -1000, -223, 3305,
	12069, 51046, -1000, 3396, -1000, -1000, 401, -1000, -1000, -1000,
	459, 467, -1000, -1000, -1000, -1000, -1000, -1000, 1670, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -85,
	-87, 1494, -1000, 51046, -1000, -1000, 370, 41476, 43390, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 272, -1000, -1000, 180,
	-1000, 932, 309, 1807, -1000, -1000, 231, 223, 267, 997,
	2552, -1000, 1968, 1968, 1987, -1000, 782, -1000, -1000, -1000,
	-1000, 3024, -1000, -1000, -1000, 2382, 2206, -1000, 1828, 1828,
	1726, 1726, 1726, 1726, 1726, 1870, 1870, -1000, -1000, -1000,
	7576, 3021, 14633, 14633, 14633, 14633, 974, 974, 4331, 4349,
	-1000, -1000, -1000, -1000, 12069, 179, 1946, -1000, 12069, 2615,
	1605, 2396, 1452, 1806, -1000, 2957, 12069, 1660, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2802, 2792,
	2625, 3459, 2791, 12069, -1000, -1000, 1803, 1792, 1784, -1000,
	2322, 10787, -1000, -1000, -1000, 2775, 1641, 2774, -1000, -1000,
	-1000, 2772, 1781, 1444, 2767, 2723, 2762, 2761, 2755, 2749,
	1490, 12069, 12069, 12069, 12069, 2748, 1775, 1770, 12069, 12069,
	12069, 12069, 2746, 12069, 12069, 12069, 12069, 12069, 12069, 12069,
	12069, 12069, 12069, 51046, 149, 149, 149, 1481, 1480, -1000,
	-1000, 1751, -1000, 2552, -1000, -1000, 3305, -1000, 3020, 2244,
	1474, -1000, -1000, -320, 2557, 51046, 51046, 186, 51046, 2613,
	-273, 51046, -1000, -1000, 2612, -1000, -1000, -1000, 1126, 1092,
	1086, -1000, 51046, -1000, 2606, 3313, 3395, 988, 51046, 1327,
	3016, 51046, 51046, 51046, 347, -1000, -1000, 1312, -1000, 309,
	-19, 596, 1287, 3178, 3457, -120, 51046, 51046, 51046, 51046,
	3332, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45942,
	905, -1000, 3009, 1748, -1000, -1000, 1704, 1704, 2552, 51046,
	51046, 51046, 3177, 51046, 51046, 3443, 3443, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1889, 3443, 3443, 1614, 1871, 1889,
	-1000, -1000, 1889, -340, -1000, 1889, -1000, -340, 1620, -340,
	51046, -1000, -1000, -1000, 3329, 2975, 1472, -1000, -1000, -1000,
	3434, 1509, 869, 869, 1170, 763, 3433, 19772, -1000, 1782,
	1304, 931, 3274, 407, -1000, 1782, -145, 853, 1782, 1782,
	1782, 1782, 1782, 1782, 1782, 787, 771, 1782, 1782, 1782,
	1782, 1782, 1782, 1782, 1782, 1782, 1782, 1782, 1128, 1782,
	1782, 1782, 1782, 1782, -1000, 1782, 3007, 562, -1000, -1000,
	-1000, -1000, -1000, -1000, 799, 726, 329, 3365, 445, -1000,
	513, 1312, 369, 3361, 472, 51046, 51046, 3633, 1412, -1000,
	-1000, -1000, -1000, -1000, 29992, 29992, 23612, 29992, -1000, 219,
	1818, 46, 99, -1000, -1000, 1471, 6926, 1471, 6926, 2243,
	-1000, -1000, 929, -1000, -1000, 1287, -1000, 51046, 51046, -1000,
	-1000, 3004, 1910, -1000, -1000, 17210, -1000, 6926, 6926, -1000,
	-1000, 31906, 51046, -1000, -7, -1000, 15, 3305, -1000, 1252,
	-1000, -1000, 1469, 1287, 3187, 51046, 1252, 1252, 1252, -1000,
	-1000, 18496, 51046, 51046, -1000, -1000, -1000, -1000, 3443, 10140,
	-1000, 38924, -1000, -1000, 45304, -1000, 44666, 1939, -1000, 15924,
	2196, 203, -1000, 291, -304, 202, 2142, 201, 2552, -1000,
	-1000, 2745, 2743, 1743, -1000, 1725, 2742, 1717, 1716, 2234,
	-1000, 73, -1000, 3294, 1293, -1000, 3003, -1000, 1715, 3244,
	-1000, 1463, -1000, 1909, 1710, -1000, -1000, 3186, -1000, 12069,
	44028, 12069, 1061, 1293, 1709, 3243, 1463, -1000, 3305, 2605,
	-1000, 1458, -1000, 2291, 1612, 258, -1000, -1000, -1000, 51046,
	2599, 1705, 43390, 1351, -1000, 924, 1609, 1601, -1000, 41476,
	396, 41476, -1000, 41476, -1000, -1000, 415, -1000, 51046, 3304,
	-1000, -1000, -1000, 2557, 1908, -338, 51046, -1000, -1000, -1000,
	-1000, -1000, 1700, -1000, 974, 974, 4331, 4175, -1000, 14633,
	-1000, 14633, 3094, -1000, 1938, -1000, 12069, 2170, 5088, 12069,
	5088, 2084, 28078, 35734, -103, 3300, 3056, 51046, -1000, -1000,
	12069, 12069, -1000, 3032, -1000, -1000, -1000, -1000, 12069, 12069,
	2482, -1000, 51046, -1000, -1000, -1000, -1000, 28078, -1000, 14633,
	-1000, -1000, -1000, -1000, 12069, 1495, 1495, 2970, 1695, 149,
	149, 149, 2961, 2954, 2919, 1694, 149, 2911, 2901, 2897,
	2888, 2839, 2835, 2825, 2821, 2790, 2770, 1693, -1000, 2997,
	-1000, -1000, 2090, 13351, 9499, -1000, -1000, 335, 1420, 2233,
	2595, 144, -1000, 1907, -1000, 2594, 51046, 51046, 1181, -1000,
	51046, 3456, -1000, -1000, -1000, -1000, 1088, -1000, 2593, -1000,
	285, 247, 2123, 366, 2739, 1400, -1000, -1000, 51046, -1000,
	-1000, -1000, 18496, 2975, 2996, 2975, 217, 1782, 696, 41476,
	806, -1000, 51046, 2087, 1898, 3185, 819, 3287, 51046, 2986,
	433, 2980, 2979, 3328, 571, 5224, 51046, 1332, -1000, 1586,
	3454, 4141, -1000, 51046, -1000, -1000, 51046, -1000, 2304, -1000,
	1871, -1000, -1000, 3443, -1000, -1000, 12069, 12069, 3443, 1871,
	1871, -1000, 1889, -1000, 51046, -1000, -340, 571, 5224, 3326,
	4705, 729, 2724, -1000, 51046, -1000, -1000, -1000, 920, -1000,
	1089, 895, 51046, 2012, 1089, 2010, 2978, -1000, -1000, 51046,
	51046, 51046, 51046, -1000, -1000, 51046, -1000, 51046, 51046, 51046,
	51046, 51046, 42752, -1000, 51046, 51046, -1000, 51046, 2007, 51046,
	2006, 3306, -1000, 1782, 1782, 1041, -1000, -1000, 687, -1000,
	42752, 2230, 2226, 2224, 2221, 2592, 2589, 2588, 1782, 1782,
	2219, 2586, 42114, 2582, 1417, 2218, 2199, 2198, 2193, 2581,
	1070, -1000, 2579, 2192, 2174, 2158, 51046, 2977, 2486, 585,
	-1000, -1000, 2123, 217, 1782, 436, 51046, 1897, 1896, 696,
	650, 595, -20, 24888, -1000, -1000, -1000, 51046, 38924, 38924,
	38924, 38924, 38924, 38924, -1000, 3219, 3203, 2976, -1000, 3215,
	3211, 3228, 3218, 2960, 51046, 38924, 2975, -1000, 42114, -1000,
	-1000, -1000, 1549, 1685, 3160, 1123, 12069, 6926, -1000, -1000,
	24, 23, -1000, -1000, -1000, -1000, 41476, 2567, 631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3394, 51046, 51046, 901,
	2738, 1394, -1000, -1000, -1000, 5224, 2959, 2959, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2959, 2959, 2974,
	-1000, -1000, 2958, 2958, 2958, 2957, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2963, 2963, 2965, 2965,
	2963, -1000, -1000, 3439, -1000, 1393, -1000, -1000, 1582, -1000,
	1952, -327, 15924, 1941, 1783, -1000, 12069, 15924, 12069, -242,
	421, -244, -1000, -1000, -1000, 2566, -1000, -1000, -1000, 2194,
	-1000, 2190, -1000, 228, 264, 2005, -216, 9499, 468, 51046,
	-216, 51046, 9499, -1000, 51046, -1000, 169, -349, -351, 165,
	2564, 447, -216, 3394, 73, 12069, 3277, -1000, -1000, 51046,
	2187, -1000, -1000, -1000, 3453, 41476, 2304, 1739, 40838, -1000,
	386, -1000, 268, 649, 2562, -1000, 953, 142, 2561, 2557,
	-1000, -1000, -1000, -1000, 14633, 1704, -1000, -1000, -1000, 2552,
	12069, 2736, -1000, 1075, 1075, 2297, 2735, 2734, -1000, 2959,
	2959, -1000, 2957, 2958, 2957, 1075, 1075, 2733, -1000, 2956,
	-1000, 3300, -1000, 2275, 2700, -1000, 2638, 2578, 12069, -1000,
	2721, 4301, 1528, -34, -175, 149, 149, -1000, -1000, -1000,
	-1000, 149, 149, 149, 149, -1000, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 847, -86, -265,
	-114, -266, -1000, 2720, 1392, -1000, -1000, -1000, -1000, -1000,
	3831, 1389, 616, 616, 2557, 2556, -1000, 911, 2555, 1125,
	51046, 2553, -278, -1000, 2551, -1000, -1000, 51046, 51046, 51046,
	51684, 722, 51046, 51046, 2544, -1000, 2543, 2535, 1327, 5224,
	2717, 3322, 19134, 3310, 2302, -1000, -1000, -1000, 31268, 650,
	-1000, -1000, -1000, 846, 424, 2180, 645, -1000, 51046, 636,
	3264, 1862, 2533, 51046, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3287, -1000, 1122, 537, 37648, 16572, -1000, 434,
	51046, -1000, 19134, 19134, 434, 541, 1867, -1000, 845, 1241,
	152, 38924, 51046, -1000, 38286, 51046, 2715, -1000, -1000, 1287,
	3443, -1000, 2552, 2552, -340, 3443, 3443, 1871, -1000, -1000,
	541, -1000, 434, -1000, 1536, 20410, 679, 559, 521, -1000,
	748, -1000, -1000, 844, 3273, 5224, -1000, 51046, -1000, 51046,
	-1000, 51046, 51046, 895, 12069, 3273, 51046, 907, -1000, 1196,
	560, 508, 903, 903, 1382, -1000, 3300, -1000, -1000, 1355,
	-1000, -1000, -1000, -1000, 51046, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28078, 28078, 3359, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2532, 2527,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51046,
	1671, -1000, 1857, 2179, 2525, 2302, 31268, 1856, 1818, 2518,
	2517, 650, -1000, 2512, 2510, 2087, 1855, 951, 51046, -1000,
	1270, 51046, 51046, -1000, 1387, -1000, 1854, 3175, 3184, 3175,
	-1000, 3175, -1000, -1000, -1000, -1000, 3205, 2509, -1000, 3204,
	-1000, 2842, -1000, -1000, -1000, -1000, 1387, -1000, -1000, -1000,
	-1000, -1000, 1123, -1000, 3393, 1089, 1089, 1089, 2714, -1000,
	-1000, -1000, -1000, 1351, 2709, -1000, -1000, -1000, 3472, -1000,
	-1000, -1000, -1000, -1000, -1000, 18496, 3286, 3437, 3432, 40200,
	-1000, -327, 1811, -1000, 2130, 196, 2021, 51046, -1000, -1000,
	-1000, 2708, 2705, -225, 222, 3431, 3430, 1139, -1000, 2699,
	1344, -216, -1000, -1000, 1293, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -354, -216, -1000, 1293, -1000, 228, -1000, -1000,
	3278, -1000, -1000, 2304, -1000, 265, -1000, -1000, -1000, -1000,
	-1000, -1000, 292, -1000, 51046, -1000, 1333, 140, -1000, 2552,
	-1000, -1000, -1000, -1000, -1000, 5088, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2501, -1000, -1000, 12069,
	-1000, -1000, -1000, 2547, -1000, -1000, 12069, 2697, 2500, 2696,
	2497, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3478, -1000,
	3427, 1666, 2695, 2693, 1665, 2691, 2689, -1000, 12069, 2688,
	3831, 1052, 2493, 1052, -1000, -1000, 469, 30630, 51046, 3445,
	-1000, 51046, 2488, -1000, -1000, 51046, 2123, 714, 2123, 762,
	51046, -1000, -1000, -1000, -1000, -1000, 933, 434, 2687, 1324,
	-1000, -1000, -1000, -1000, 434, -1000, 2487, 304, -1000, -1000,
	-1000, -1000, 2160, -1000, -1000, 2113, 1511, 319, -1000, -1000,
	-1000, -1000, -1000, -1000, 2202, 51046, 39562, 2207, 1830, -342,
	-1000, 2952, -1000, 1782, 1782, 1782, 51046, 1653, -1000, 1782,
	1782, 2685, -1000, -1000, 2679, 2677, -122, 843, 1810, 1802,
	-1000, 2152, 29992, 38924, 38286, 1345, -1000, 1579, -1000, 845,
	-1000, -1000, -1000, -1000, -1000, 3443, 843, -1000, 634, 2148,
	14633, 2951, 14633, 2946, 691, 2945, 1646, -1000, 51046, -1000,
	-1000, 51046, 3998, 2944, -1000, 2938, 3176, 615, 2936, 2935,
	51046, 2524, -1000, 3273, 51046, 829, 3285, -1000, -1000, -1000,
	483, -1000, -1000, -1000, 738, -1000, 51046, -1000, 51046, -1000,
	1669, -1000, 28078, -1000, -1000, 1638, -1000, 2486, 2473, 3831,
	-1000, -1000, 304, 2459, 6926, -1000, -1000, -1000, -1000, -1000,
	3264, 2458, 2202, 51046, -1000, 51046, 1270, 1270, 3478, 51046,
	9499, -1000, -1000, 12069, 2922, -1000, 12069, -1000, -1000, -1000,
	2676, -1000, -1000, -1000, -1000, -1000, 2913, 3291, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1735, -1000, 12069, 12710, -1000,
	878, 15924, -245, 416, -1000, -1000, -1000, -228, 2457, -1000,
	-1000, 3426, 2455, 2338, 51046, -1000, -1000, 1293, -1000, 1293,
	-225, -1000, -1000, 1287, -1000, -1000, 1178, 792, -1000, 2674,
	286, -1000, 2516, -1000, 2499, 149, -1000, 149, -1000, 259,
	12069, -1000, 2453, -1000, -1000, -1000, 2451, -1000, -1000, 2375,
	-1000, 2673, -1000, 2450, -1000, -1000, 51046, -1000, -1000, 1124,
	2446, -343, -1000, 2425, 2123, 2424, 2123, 51046, 713, 5224,
	-124, -122, 19134, -124, -1000, -1000, 408, 458, -1000, -1000,
	2107, 721, -1000, -1000, 2423, 671, -1000, 1270, -1000, 1827,
	2020, 2380, 35734, 28078, 29354, 2416, -1000, -1000, 37648, 1735,
	1735, 5458, 398, 5751, -1000, 2895, 1140, 1799, -1000, 2147,
	-1000, 2140, -1000, 3443, 1345, 148, -1000, -1000, 1720, 29992,
	-1000, 1140, 2724, 3425, -1000, 4282, 51046, 4119, 51046, 2893,
	1821, 14633, -1000, 844, 3232, -1000, -1000, 3998, -1000, -1000,
	2024, 14633, -1000, -1000, 2414, 29354, 1103, 1819, 1815, 1116,
	2892, -1000, 741, 3470, -1000, -1000, -1000, 1017, 2890, -1000,
	1998, 1997, -1000, 51046, -1000, 35734, 35734, 842, 842, 35734,
	35734, 2887, 903, -1000, -1000, 14633, -1000, -1000, 1782, -1000,
	-1000, -1000, 1782, 1592, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2207, -1000, -1000, 1252, -1000, 3408, -1000, -1000, 2552,
	51046, 2552, -1000, 37010, -1000, 3424, 3423, -1000, 2552, 263,
	262, 2878, 2873, -1000, -327, 51046, 51046, -230, 2139, -1000,
	2411, 237, -1000, -1000, 1180, -228, -232, 126, 28078, 1814,
	-1000, 2671, 378, -138, -1000, -1000, -1000, -1000, 2664, -1000,
	927, -1000, -1000, -1000, 1164, 2661, 2659, -1000, -1000, -1000,
	-1000, 51046, -1000, 2372, -1000, 2410, -1000, 2406, 708, 2123,
	-110, -1000, -1000, 478, -1000, -1000, -1000, 662, 2334, -1000,
	-1000, 450, -1000, -1000, -1000, 2202, 2404, -1000, -1000, 139,
	-1000, 1800, 1625, -1000, -1000, -1000, -1000, -1000, -1000, 839,
	-1000, 434, 56116, -1000, 1304, 28716, -1000, 1178, 839, 562,
	34458, 719, 317, -1000, 2137, -1000, -1000, 3478, -1000, 3443,
	707, -1000, 686, -1000, 1595, -1000, 1588, 36372, 2134, 4087,
	-1000, 5713, 969, -1000, -1000, 4331, -1000, -1000, -1000, -1000,
	-1000, -1000, 2403, 2394, -1000, -1000, -1000, -1000, -1000, 2125,
	2860, 131, 3357, 2393, -1000, -1000, 2858, 1584, 1575, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1551,
	1516, 35734, -1000, -1000, 4331, 2124, 28078, 1782, -1000, -1000,
	1510, 1487, -1000, -1000, -1000, -1000, -1000, -307, 2857, 12069,
	12069, -1000, -1000, -1000, 2841, -1000, -1000, 3420, -230, -234,
	2390, 227, 260, -1000, 2388, -1000, -111, 3237, -141, -1000,
	-1000, 970, -217, 198, 197, 156, -1000, -1000, -1000, 12069,
	-1000, -1000, -1000, 137, -1000, 1788, -1000, -1000, 2123, 2386,
	51046, 740, -1000, -1000, -1000, -1000, 283, -1000, -1000, -1000,
	-1000, -1000, -1000, 2380, 2378, -1000, 618, 3419, -1000, 5751,
	-1000, 1782, -1000, 618, 1486, -1000, 1782, 1782, -1000, 561,
	-1000, 1787, -1000, 2112, -1000, 3408, 3478, -1000, 552, -1000,
	625, -1000, -1000, -1000, 1475, -1000, -1000, -1000, 5713, 672,
	-1000, 832, 2832, -1000, -1000, 2658, 12069, 2831, 1782, 2657,
	-100, 35734, 3162, 2903, 2899, 2837, 1457, -1000, -1000, 28078,
	-1000, -1000, 35096, -1000, 2828, 1456, 1450, 51046, 2338, -1000,
	-1000, 2374, -1000, 898, 211, 260, -1000, 3418, 232, 3415,
	3414, 1161, 3226, -1000, -1000, 1980, -1000, 192, 189, 166,
	-1000, -1000, -1000, -1000, -1000, 2372, 2371, 2367, -1000, 630,
	-1000, 381, -1000, -1000, -1000, 338, -1000, 3413, 729, -1000,
	28078, -1000, -1000, 34458, 1735, 1735, -1000, -1000, 2110, -1000,
	-1000, 3408, -1000, -1000, 2104, -1000, -1000, -1000, 1435, -1000,
	51046, 1024, 8858, -1000, 2360, -1000, 51046, -1000, 3183, -1000,
	336, 1410, 338, 842, 338, 842, 338, 842, 338, 842,
	376, -1000, -1000, -1000, 1403, 12069, -1000, -1000, 1381, -1000,
	-1000, -1000, 2827, 2099, 222, 220, 3412, -1000, 2338, 3411,
	2338, 2338, -1000, 146, -128, 970, -1000, -1000, -1000, -1000,
	-1000, -1000, 2362, -1000, -1000, -1000, -1000, 1782, 1782, 2343,
	2342, 525, -1000, -1000, 1782, 1782, 1782, 1782, 33820, 679,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 672, 5751,
	-1000, 8858, 1373, -1000, 2552, -1000, 903, -1000, -1000, 3182,
	2964, 3451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2824, 2649, -1000, 51046, 3348, 27440, 215, -1000,
	-1000, -1000, 2339, -1000, 2338, -1000, -1000, 1772, -139, -1000,
	-263, 2096, 2095, -1000, -1000, 51046, 2066, 2046, 2037, 2332,
	-1000, 51046, 634, -1000, 5751, 1336, -1000, 8858, -1000, -1000,
	3469, -1000, 3464, 1039, 1039, 338, 338, 338, 338, 12069,
	-1000, -1000, -1000, 51046, -1000, 1258, -1000, -1000, -1000, 1559,
	-1000, -1000, -1000, -1000, 2311, -142, -1000, -1000, 2307, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1229, 2724, -1000, -1000,
	-1000, -1000, -1000, 2101, 749, -1000, 2521, 1158, -1000, 1759,
	-1000, 33182, 51046, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 51046, 8217, -1000, 1350, -1000, -1000, 2552, 51046,
	-1000,
}

var yyPgo = [...]int{
	0, 185, 3501, 256, 189, 4133, 78, 267, 272, 246,
	261, 255, 4132, 4131, 4128, 3304, 3301, 4127, 4124, 4121,
	4120, 4119, 4118, 4117, 4114, 4109, 4108, 4107, 4106, 4104,
	4103, 4102, 4101, 4100, 4099, 4098, 4097, 4096, 4095, 4093,
	4092, 4091, 4090, 4089, 4087, 4086, 4084, 254, 4082, 4079,
	4077, 4076, 4072, 4071, 4070, 4069, 4061, 4057, 4055, 4054,
	4053, 4052, 4051, 4050, 4049, 4047, 4046, 4044, 4043, 4042,
	4039, 4034, 4033, 4031, 4030, 4026, 4024, 4023, 4022, 4021,
	4018, 4017, 4016, 4015, 4011, 226, 4005, 3290, 4004, 4003,
	4001, 4000, 3996, 3994, 3993, 3992, 3988, 3987, 3983, 253,
	3981, 3977, 3976, 3974, 3972, 3968, 3967, 3966, 3965, 3963,
	3962, 3961, 3960, 292, 3957, 3956, 3955, 3954, 214, 3952,
	278, 3949, 179, 144, 3948, 3947, 3946, 3944, 3943, 3938,
	3936, 3935, 3934, 3933, 3932, 3930, 3929, 3927, 251, 196,
	62, 3925, 50, 3924, 3923, 221, 3922, 155, 3921, 152,
	3920, 3919, 3918, 3917, 3916, 3915, 3913, 3912, 3909, 3908,
	3906, 3905, 3904, 3903, 3902, 3901, 3900, 3898, 3893, 3888,
	3887, 3886, 3885, 3884, 54, 3883, 266, 3881, 79, 3878,
	175, 3873, 75, 3872, 88, 122, 271, 3073, 263, 3871,
	194, 3870, 3869, 265, 177, 3867, 3866, 276, 3865, 188,
	231, 167, 113, 112, 3864, 140, 3861, 273, 47, 29,
	250, 150, 3859, 3858, 55, 206, 119, 3857, 220, 104,
	109, 3856, 3853, 148, 3851, 235, 178, 3850, 107, 3849,
	3847, 3846, 3845, 3844, 202, 197, 3843, 3841, 130, 3839,
	3838, 67, 128, 3836, 77, 125, 171, 120, 3835, 636,
	121, 97, 3834, 123, 105, 3833, 81, 3832, 3831, 3829,
	3828, 182, 3827, 3826, 134, 60, 3825, 3824, 3823, 70,
	3821, 82, 3820, 34, 3817, 57, 3816, 3815, 3814, 3796,
	3795, 3794, 3792, 3790, 3788, 3786, 3785, 3784, 49, 3783,
	3782, 3780, 3778, 5, 14, 17, 3777, 28, 3774, 174,
	3773, 3772, 169, 3770, 200, 3769, 3768, 94, 95, 3767,
	100, 166, 3766, 9, 27, 74, 3765, 3760, 3759, 64,
	3758, 3757, 3756, 277, 3755, 3753, 3752, 164, 3751, 3749,
	3748, 633, 3747, 3746, 3745, 3743, 3742, 3740, 142, 3739,
	1, 219, 41, 3738, 124, 138, 3736, 38, 30, 3735,
	45, 114, 224, 129, 101, 3734, 3733, 3731, 141, 201,
	80, 39, 0, 99, 233, 161, 3730, 3729, 3728, 247,
	3726, 239, 252, 243, 346, 268, 213, 3724, 3723, 58,
	3722, 165, 24, 53, 132, 98, 21, 207, 3721, 1788,
	10, 183, 3720, 210, 3719, 8, 16, 262, 151, 3716,
	3715, 32, 269, 3711, 3698, 3697, 136, 3696, 3695, 186,
	83, 3693, 3692, 3691, 3689, 43, 3687, 181, 36, 3686,
	154, 3685, 257, 3684, 259, 137, 184, 176, 159, 222,
	232, 89, 87, 193, 1880, 158, 102, 15, 3683, 230,
	3682, 192, 162, 3680, 143, 3679, 236, 274, 211, 3678,
	187, 11, 48, 40, 33, 44, 12, 381, 205, 3677,
	3676, 22, 52, 3675, 69, 3674, 20, 3670, 3669, 51,
	3668, 61, 7, 3662, 3651, 19, 18, 3650, 37, 212,
	173, 126, 96, 59, 3646, 3643, 145, 135, 3640, 133,
	157, 163, 3637, 84, 3636, 3635, 3634, 3630, 1010, 241,
	3629, 3627, 3625, 3624, 3623, 3621, 3619, 3617, 218, 215,
	108, 42, 3616, 3615, 3614, 3613, 85, 149, 3611, 3609,
	3608, 3607, 31, 146, 3605, 13, 3604, 26, 23, 35,
	3603, 106, 3602, 3, 191, 3601, 3598, 4, 3597, 3595,
	2, 3594, 3593, 117, 3592, 103, 25, 172, 131, 3590,
	3589, 93, 217, 147, 3588, 3582, 92, 248, 204, 3581,
	156, 249, 260, 3578, 216, 3577, 3576, 3572, 3569, 3562,
	258, 3561, 244, 208, 68, 86, 3559, 229, 111, 3557,
	3556, 91, 168, 115, 110, 56, 90, 3552, 118, 209,
	3550, 203, 3547, 264, 3546, 3545, 116, 3542, 3539, 3538,
	3533, 195, 3532, 3530, 198, 237, 3529, 3528, 275, 3526,
	3525, 3519, 3518, 3511, 3509, 3507, 3505, 3496, 3493, 242,
	245, 3491,
}

//line mysql_sql.y:12998
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 614, 617, 617, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 353, 353, 354, 354, 130, 349, 349, 348, 348,
	131, 132, 133, 593, 593, 134, 135, 165, 592, 592,
	592, 592, 592, 167, 167, 167, 167, 167, 167, 167,
	469, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 599, 599, 599, 600, 600, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 542, 542, 541, 541, 540, 540, 494, 494, 495,
	495, 340, 340, 340, 539, 539, 539, 538, 538, 537,
	537, 536, 536, 534, 534, 535, 533, 532, 532, 532,
	530, 530, 530, 526, 526, 528, 527, 527, 529, 521,
	521, 524, 524, 522, 522, 522, 522, 525, 520, 520,
	520, 519, 519, 112, 112, 112, 436, 436, 111, 111,
	450, 450, 450, 450, 450, 448, 448, 448, 448, 448,
	448, 447, 447, 446, 446, 451, 451, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	605, 605, 604, 604, 606, 606, 606, 606, 607, 607,
	103, 103, 103, 104, 445, 445, 445, 101, 102, 102,
	435, 435, 440, 440, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 444, 444, 444,
	442, 442, 441, 441, 443, 443, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 432, 432, 431, 108, 108, 109,
	602, 602, 601, 603, 603, 603, 603, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 567, 567, 567, 567, 568, 568,
	367, 368, 618, 370, 366, 366, 366, 563, 563, 564,
	565, 566, 566, 566, 114, 14, 224, 224, 468, 468,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 303, 303, 304, 298, 298,
	305, 305, 170, 306, 306, 306, 311, 311, 312, 312,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 283, 283, 283, 278, 278, 278, 278, 279,
	279, 280, 280, 281, 281, 281, 281, 282, 282, 359,
	359, 307, 307, 307, 309, 309, 308, 302, 300, 300,
	300, 300, 300, 300, 300, 301, 301, 301, 301, 301,
	310, 310, 82, 88, 88, 88, 88, 580, 580, 83,
	83, 591, 591, 498, 498, 381, 381, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 503, 504, 377, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 79, 80, 81, 54, 57, 58,
	169, 172, 172, 172, 172, 53, 53, 53, 421, 421,
	52, 619, 619, 352, 352, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 515, 515, 621, 621, 621, 74,
	75, 497, 497, 497, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 160, 59, 161, 161, 374,
	374, 374, 376, 376, 372, 620, 620, 464, 464, 375,
	375, 48, 48, 48, 48, 77, 373, 373, 351, 371,
	371, 371, 12, 12, 10, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 429, 429, 426, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 15, 16, 194, 194,
	250, 250, 574, 574, 570, 570, 571, 571, 571, 572,
	572, 573, 573, 120, 120, 509, 509, 509, 509, 509,
	509, 8, 8, 8, 219, 219, 508, 508, 508, 508,
	508, 508, 433, 433, 433, 552, 552, 552, 553, 218,
	218, 211, 211, 510, 510, 398, 554, 554, 518, 518,
	517, 517, 516, 516, 216, 216, 217, 217, 197, 197,
	139, 139, 523, 523, 523, 523, 531, 531, 493, 493,
	288, 288, 342, 342, 343, 343, 184, 184, 185, 185,
	185, 185, 185, 185, 608, 608, 609, 610, 611, 611,
	612, 612, 612, 613, 613, 613, 613, 613, 560, 560,
	562, 562, 561, 215, 215, 209, 209, 210, 210, 210,
	208, 208, 207, 206, 206, 205, 203, 203, 203, 204,
	204, 204, 223, 223, 187, 187, 187, 186, 186, 186,
	186, 186, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 188, 191, 191, 192, 192, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 320,
	320, 321, 321, 321, 321, 321, 137, 137, 502, 502,
	319, 319, 189, 189, 190, 190, 190, 190, 318, 318,
	317, 202, 202, 201, 200, 200, 200, 195, 195, 195,
	195, 195, 196, 329, 329, 328, 328, 327, 327, 327,
	327, 330, 123, 136, 136, 138, 222, 222, 213, 212,
	326, 325, 325, 325, 325, 221, 221, 220, 220, 214,
	214, 199, 199, 199, 199, 324, 198, 322, 598, 598,
	597, 597, 596, 594, 594, 594, 595, 595, 595, 595,
	544, 544, 544, 544, 544, 360, 360, 360, 365, 365,
	363, 363, 363, 363, 363, 369, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 39, 233,
	234, 40, 235, 235, 236, 236, 237, 237, 238, 239,
	240, 240, 240, 240, 38, 225, 225, 226, 226, 227,
	227, 228, 229, 229, 229, 232, 230, 231, 231, 616,
	616, 615, 37, 37, 30, 175, 175, 176, 176, 176,
	178, 178, 284, 284, 284, 177, 177, 179, 179, 179,
	575, 577, 577, 579, 578, 578, 578, 581, 581, 581,
	581, 581, 582, 582, 582, 582, 583, 583, 31, 157,
	157, 182, 182, 162, 586, 586, 586, 585, 585, 587,
	587, 588, 588, 346, 346, 347, 347, 173, 174, 174,
	164, 159, 181, 181, 181, 181, 181, 183, 183, 252,
	252, 158, 163, 166, 168, 576, 584, 584, 584, 430,
	430, 427, 428, 428, 425, 424, 424, 424, 590, 590,
	589, 589, 589, 361, 361, 32, 420, 420, 422, 423,
	423, 423, 414, 414, 414, 414, 36, 418, 418, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	415, 415, 417, 417, 413, 413, 413, 413, 413, 413,
	413, 413, 35, 180, 180, 412, 412, 409, 409, 407,
	407, 408, 408, 406, 406, 406, 410, 410, 43, 78,
	44, 45, 46, 42, 411, 411, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 141, 140, 140, 140,
	140, 140, 143, 143, 345, 345, 344, 344, 142, 285,
	285, 41, 263, 263, 485, 485, 480, 480, 480, 480,
	480, 500, 500, 500, 481, 481, 481, 482, 482, 482,
	484, 484, 484, 483, 483, 483, 483, 483, 499, 499,
	501, 501, 501, 452, 452, 453, 453, 453, 456, 456,
	472, 472, 473, 473, 471, 471, 478, 478, 477, 477,
	476, 476, 475, 475, 474, 474, 474, 474, 467, 467,
	466, 466, 454, 454, 454, 454, 454, 455, 455, 455,
	465, 465, 470, 470, 316, 316, 315, 315, 271, 271,
	272, 272, 314, 314, 269, 269, 270, 270, 270, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 550, 550, 551, 274, 274,
	286, 286, 286, 286, 286, 286, 273, 273, 275, 275,
	251, 251, 249, 249, 241, 241, 241, 241, 241, 241,
	242, 242, 243, 243, 244, 244, 244, 248, 248, 247,
	247, 247, 247, 245, 245, 246, 246, 246, 246, 246,
	246, 438, 438, 547, 547, 548, 548, 543, 543, 543,
	546, 546, 546, 546, 546, 546, 546, 546, 549, 549,
	549, 545, 545, 253, 339, 339, 339, 362, 362, 362,
	362, 364, 338, 338, 338, 268, 268, 267, 267, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 437, 437, 378, 378, 379, 379, 297, 296, 296,
	296, 296, 296, 294, 295, 293, 293, 293, 293, 293,
	290, 290, 289, 289, 289, 291, 291, 291, 291, 291,
	416, 416, 287, 287, 277, 277, 277, 276, 276, 276,
	479, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 292, 336, 336, 336, 337, 337, 337, 337, 337,
	337, 337, 337, 388, 388, 394, 394, 559, 559, 558,
	254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 264, 264, 264, 461, 461, 461, 461, 462,
	462, 462, 462, 463, 463, 463, 459, 459, 460, 460,
	399, 400, 400, 506, 506, 507, 507, 457, 457, 458,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 514, 514, 514, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 569, 569, 569, 555, 555, 555, 556, 556,
	556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
	557, 557, 557, 557, 557, 557, 557, 557, 557, 557,
	557, 557, 557, 557, 557, 557, 557, 334, 334, 334,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 401, 401,
	402, 402, 511, 511, 511, 511, 511, 511, 512, 512,
	513, 513, 513, 513, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 386, 331, 331, 331, 403, 395,
	395, 396, 396, 397, 397, 389, 389, 389, 389, 389,
	389, 390, 390, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 391, 391, 393, 393, 405,
	405, 405, 404, 404, 404, 404, 404, 404, 404, 266,
	266, 266, 266, 383, 383, 383, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 256, 256,
	256, 256, 260, 260, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 261, 261,
	261, 261, 261, 259, 259, 259, 259, 259, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 121, 122, 122,
	258, 341, 341, 486, 486, 489, 489, 487, 487, 488,
	490, 490, 490, 491, 491, 491, 492, 492, 492, 496,
	496, 350, 350, 350, 358, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 3,
	1, 1, 7, 7, 7, 8, 8, 0, 4, 7,
	6, 0, 3, 0, 2, 0, 1, 1, 1, 1,
	4, 2, 2, 3, 3, 4, 5, 3, 4, 4,
	2, 2, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 4, 3, 3,
	3, 4, 5, 6, 5, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 5, 5, 6, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 12, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 5, 2, 1, 5, 4, 4,
	2, 5, 5, 6, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 4, 7, 6, 6, 3, 5, 0, 2,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 1, 4, 4, 4,
	3, 4, 3, 2, 2, 2, 2, 2, 3, 2,
	3, 2, 4, 1, 3, 4, 0, 2, 1, 3,
	1, 1, 2, 2, 3, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	1, 7, 1, 3, 0, 1, 1, 3, 1, 3,
	0, 1, 1, 1, 14, 1, 3, 0, 1, 1,
	3, 1, 1, 2, 4, 1, 1, 1, 1, 0,
	1, 2, 9, 9, 7, 1, 2, 3, 3, 3,
	0, 4, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 3, 3, 4,
	3, 3, 0, 1, 1, 1, 0, 2, 7, 8,
	10, 2, 2, 8, 0, 3, 3, 0, 3, 0,
	3, 0, 5, 1, 3, 0, 3, 3, 0, 2,
	9, 8, 0, 2, 2, 3, 3, 0, 2, 0,
	2, 4, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 3, 3, 3, 3,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 7, 6, 2, 2, 9, 4,
	5, 3, 0, 4, 1, 3, 0, 3, 6, 0,
	2, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 5, 1, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 0, 5, 5, 5, 5, 6,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 4, 7, 3, 3,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	9, 1, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -614, -617, -2, -5, 637, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 627, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 560, 633, 463, 14, 512, -15, -16, -560, -17,
	267, -366, -367, -368, -370, -618, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 387, 393, 450, 626,
	62, -185, -187, 655, 656, 659, 547, 550, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 555,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 391, 260, 238, 240, 15, 32, 43,
	366, -186, 86, 548, 239, -188, 13, 661, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 628, -362, 383, 629, 631, 630, 89, 97,
	-355, -357, 463, 267, 387, 393, 626, 656, 659, 547,
	550, 562, 563, 564, 565, 566, 567, 568, 569, 571,
	572, 573, 574, 575, 576, 577, 587, 588, 578, 579,
	580, 581, 582, 583, 584, 585, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	515, 612, 613, 614, 615, 543, 570, 606, 607, 608,
	609, 364, 365, 552, 279, 303, 418, 309, 316, 163,
	183, 177, 206, 197, 548, 172, 283, 321, 284, 96,
	166, 498, 111, 475, 447, 169, 298, 300, 302, 544,
	545, 377, 305, 542, 304, 306, 308, 546, 285, 367,
	193, 188, 297, 281, 186, 286, 41, 287, 360, 359,
	211, 288, 289, 557, 471, 363, 477, 313, 53, 445,
	187, 472, 301, 474, 215, 219, 489, 350, 490, 181,
	182, 479, 492, 210, 213, 214, 259, 356, 357, 44,
	554, 271, 493, 217, 651, 209, 204, 501, 317, 315,
	361, 208, 180, 203, 282, 66, 221, 220, 222, 441,
	442, 443, 444, 290, 291, 381, 488, 200, 189, 368,
	173, 23, 496, 266, 476, 394, 292, 310, 318, 216,
	218, 273, 278, 333, 556, 449, 362, 277, 314, 494,
	185, 270, 299, 265, 497, 652, 174, 396, 293, 167,
	307, 491, 654, 500, 65, 409, 179, 170, 644, 645,
	256, 164, 275, 280, 653, 294, 295, 296, 541, 320,
	319, 311, 171, 549, 201, 272, 207, 191, 178, 202,
	165, 274, 499, 410, 624, 366, 428, 199, 196, 276,
	249, 495, 478, 168, 432, 411, 194, 322, 619, 620,
	621, 382, 355, 323, 324, 192, 263, 469, 470, 327,
	438, 345, 412, 448, 419, 413, 228, 229, 331, 481,
	483, 212, 622, 334, 335, 336, 473, 337, 338, 339,
	340, 386, 57, 59, 98, 101, 100, 657, 658, 64,
	30, 372, 375, 407, 414, 347, 625, 553, 344, 348,
	349, 376, 26, 430, 398, 434, 433, 49, 50, 51,
	54, 55, 56, 58, 60, 61, 52, 540, 391, 404,
	502, 46, 48, 401, 28, 378, 429, 451, 343, 431,
	462, 47, 460, 461, 482, 27, 380, 379, 63, 45,
	437, 439, 440, 325, 341, 389, 634, 503, 384, 400,
	403, 385, 346, 374, 405, 68, 67, 397, 635, 392,
	390, 342, 558, 559, 351, 586, 369, 446, 537, 536,
	535, 534, 533, 532, 531, 530, 328, 329, 330, 415,
	416, 417, 427, 420, 421, 422, 423, 424, 425, 426,
	465, 466, 636, 484, 486, 487, 485, 244, 660, 370,
	371, 247, 638, 639, 99, 640, 642, 641, 29, 643,
	650, 647, 648, 649, 561, 232, -443, -441, -362, 548,
	626, 393, 547, 550, 387, 366, 656, 659, 391, 267,
	328, 329, 330, 463, 364, -235, -362, 660, -197, 251,
	646, 40, -249, -362, -197, 646, -87, -16, -15, -186,
	-187, -249, 246, -371, 24, 445, -99, 446, 241, 242,
	86, 78, -362, -9, -113, -8, -120, -85, -184, 450,
	-369, -362, 328, 328, -369, 246, -364, 277, 426, -362,
	-498, 252, -447, -420, 278, -446, -422, -449, -423, 33,
	237, 239, 238, 560, 274, 16, 391, 248, 14, 13,
	392, 260, 26, 27, 29, 15, 393, 395, 30, 396,
	399, 400, 401, 43, 404, 405, 267, 89, 97, 92,
	285, -234, -362, -397, -389, 118, -392, -384, -385, -387,
	-340, -534, -382, 86, 145, 146, 153, 119, 662, -386,
	-479, 37, 121, 566, 570, 606, 513, -332, -333, -334,
	-335, -336, -337, 551, -362, -535, -533, 92, 102, 104,
	108, 109, 107, 105, 157, 190, 106, 93, 158, -187,
	89, -555, 576, -356, 599, 612, 613, 614, 615, 598,
	62, -505, -513, 245, -511, 156, 195, 263, 191, 14,
	151, 438, 192, 607, 608, 609, 573, 595, 515, 577,
	587, 602, 568, 569, 571, 563, 564, 565, 567, 578,
	580, 594, -514, 590, 600, 601, 586, 610, 611, 647,
	603, 604, 605, 642, 91, 90, 593, 592, 579, 574,
	575, 581, 562, 572, 582, 583, 591, 596, 597, 375,
	111, 376, 377, 505, 367, 81, 378, 252, 445, 71,
	379, 380, 381, 382, 383, 512, 384, 72, 385, 374,
	267, 428, 386, 194, 212, 517, 516, 518, 509, 506,
	504, 507, 508, 510, 511, 584, 585, 589, -136, -138,
	617, -608, -323, -609, 6, 7, 8, 9, -610, 158,
	-599, 447, 556, 92, 321, 364, 17, 505, 646, 546,
	646, 546, 168, 165, -434, 168, 117, 174, 173, 250,
	168, -434, -362, 171, 646, 170, 644, 331, 273, -411,
	-175, 364, 428, 337, 98, 277, -414, -412, 544, -499,
	325, 321, 297, 247, 114, -176, 257, 256, 112, 505,
	245, 402, 316, 57, 59, -570, 646, -571, 234, 235,
	236, -562, 538, -561, -362, 646, 651, 377, 100, 101,
	644, 645, 28, 246, 388, 273, 483, 481, 482, 484,
	485, 486, 487, -65, -515, -497, 478, 477, -375, 470,
	476, 468, 480, 471, 365, 339, 560, 338, 237, 638,
	545, 539, -350, 412, 448, 502, 503, 389, 449, 489,
	491, 472, 111, 198, 195, 247, 249, 246, 644, 364,
	505, 428, 98, 337, 246, -570, 651, 165, 489, 491,
	447, 277, 426, 42, -440, 438, -439, -441, 490, 501,
	90, 91, 488, -350, 111, 469, 469, -608, -323, -185,
	-187, -123, -560, 546, 646, 247, 364, 428, 277, 248,
	246, 541, 544, 249, 505, 245, 328, 388, 273, 337,
	98, 170, 644, -191, -192, -193, 230, 231, 232, 70,
	235, 233, 67, 33, 34, 35, -1, 125, 661, -389,
	-389, -6, 664, -6, -389, -362, -362, 160, -256, -260,
	-257, -259, -258, -262, -261, 195, 196, 156, 199, 205,
	201, 202, 203, 204, 206, 207, 208, 209, 210, 213,
	214, 211, 32, 212, 263, 191, 192, 193, 194, 215,
	177, 197, 553, 223, 178, 224, 179, 225, 180, 226,
	181, 182, 227, 183, 186, 187, 188, 189, 185, 159,
	-224, 92, 33, 86, 159, 92, -216, 269, -197, -197,
	-249, -241, 159, 662, -216, -197, -608, -207, -208, 11,
	-249, -338, -362, 447, 128, -99, 78, -99, 446, 78,
	-99, 446, 241, -563, -564, -565, -567, 241, 446, 445,
	242, -118, 159, 285, 17, -369, -369, 84, -249, -422,
	277, -447, -420, 37, 83, 160, 250, 160, 83, 86,
	389, 364, 428, 390, 505, 246, 402, 249, 277, 403,
	364, 428, 246, 249, 505, 277, 364, 246, 249, 428,
	277, 403, 364, 468, 469, 249, 28, 394, 397, 398,
	469, -519, 501, 160, 117, 114, 115, 116, -389, 135,
	-404, 128, 129, 130, 131, 132, 133, 134, 142, 141,
	152, 145, 146, 147, 148, 149, 150, 151, 143, 144,
	138, 118, 136, 140, 137, 120, 155, -187, -389, -397,
	62, -387, -387, -387, -387, -362, -479, -394, -389, 86,
	86, 86, 86, 86, 159, 105, 92, -389, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	-512, 86, 86, -401, -402, 86, 86, -382, -338, 86,
	92, 92, 86, 86, 86, 92, 86, 86, 86, -402,
	-402, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, -208, 160, -207,
	86, -207, -208, -188, -187, 33, 34, 33, 34, 33,
	34, 33, 34, -611, 635, 86, 102, 657, 228, 17,
	-362, 644, -362, -593, 33, 549, 549, 549, 549, 494,
	555, 172, 173, 174, -362, 171, 250, -362, -409, 252,
	-409, -409, -233, -362, -235, 388, 249, 541, 249, -176,
	-409, -409, -409, -409, -409, 248, -409, 24, 246, 246,
	246, 246, -409, 512, 128, 128, 60, -572, 176, -570,
	160, -562, -215, 86, -593, 652, 653, 654, -374, 136,
	140, -374, -319, 18, -319, 24, 24, 275, 275, 275,
	-374, 315, -619, -620, 17, 138, -372, -620, -372, -372,
	-374, -621, 248, 479, 44, 276, 275, -209, -210, 22,
	-209, 473, 469, -464, 474, 475, -376, -620, -375, -374,
	-374, -375, -374, -374, -374, 33, 246, 249, 505, 337,
	639, -619, -619, 32, 32, -498, -498, -249, -498, -498,
	539, -351, -362, -498, -498, -498, -303, -304, -249, -573,
	251, 654, -605, -604, 492, -607, 494, 165, -441, 165,
	-441, 89, -422, 277, 277, 160, 128, 24, -442, 128,
	139, -441, -441, -442, -442, -273, 42, -361, 156, -362,
	92, -273, 42, -602, -601, -249, -208, -188, -187, 87,
	87, 87, 549, -593, -498, -498, -498, -498, -498, -499,
	-498, -498, -498, -498, -498, -369, -225, -362, -235, 252,
	-498, -498, -498, -498, -189, -190, 147, -389, -362, -193,
	-3, -146, -145, 122, 123, 125, 629, 383, 628, 632,
	626, -441, 42, -492, 410, 409, -486, -488, 86, -487,
	86, -487, -487, -487, -487, -487, 86, 86, -489, 86,
	-489, -489, -486, -490, 86, -490, -491, 86, -491, -490,
	-362, -468, 555, -395, -397, -362, 40, -508, 62, -184,
	86, 32, 86, -216, -216, -362, 192, 170, 643, 36,
	-509, 62, -184, 86, 32, -216, -208, -139, 40, -210,
	21, 159, 102, 92, -118, -99, 78, -118, -99, -99,
	87, 160, -566, 108, 109, -568, 210, 201, -362, -116,
	92, -7, -11, -8, -9, -10, -47, -85, -184, 547,
	550, -536, -534, 86, 33, 437, 83, 17, -448, 246,
	505, 388, 273, 249, 364, -446, -429, -426, -424, -361,
	-422, -425, -424, -451, -338, 469, -140, 452, 451, 327,
	-389, -389, -389, -389, -389, 107, 118, 355, 108, 109,
	-384, -405, 33, 323, 324, -385, -385, -385, -385, -385,
	-385, -385, -385, -385, -385, -385, -385, -393, -403, -479,
	86, 138, 136, 140, 137, 120, -387, -387, -385, -385,
	-275, -361, 156, 87, 160, -389, -559, -558, 122, -389,
	-389, -389, -389, -415, -417, -338, 86, -362, -556, -557,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 379, 374, 380, 378, 367, 386, 381, 382, 194,
	536, 537, 530, 531, 532, 533, 534, 535, -395, -395,
	-389, -556, -395, -331, 34, 33, -397, -397, -397, 87,
	-389, -569, 353, 352, 354, -211, -362, -395, 87, 87,
	87, 102, -397, -397, -395, -385, -395, -395, -395, -395,
	-557, -331, -331, -331, -331, 147, -397, -397, -331, -331,
	-331, -331, 147, -331, -331, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, 87, 87, 87, 147, -397, -209,
	-138, -517, -516, -389, 42, -139, -210, -612, 636, 86,
	-338, -600, 92, 92, 662, 170, 644, 17, 505, -362,
	17, 246, -362, 102, -362, 102, 495, 496, 169, 173,
	172, -362, 171, -362, -362, 118, -362, -362, 36, 86,
	-225, -409, -409, -409, -577, -362, 93, -430, -427, -424,
	-362, -362, -420, -362, -351, -249, -409, -409, -409, -409,
	-249, -284, 54, 55, 56, -424, -177, 57, 58, -573,
	-572, -561, 36, -214, -362, -319, -387, -387, -389, 364,
	505, 246, -424, 277, -619, -374, -374, -352, -351, -376,
	-371, -376, -376, -319, -372, -374, -374, -389, -376, -372,
	-319, -362, 469, -319, -319, -464, -374, -373, -362, -373,
	-409, -351, -352, -352, -249, -249, -298, -305, -299, -306,
	269, 243, 372, 373, 240, 238, 11, 239, -313, 316,
	-410, 513, -279, -280, 78, 43, -282, 267, 414, 407,
	279, 283, 96, 284, 447, 285, 248, 287, 288, 289,
	304, 306, 259, 290, 291, 292, 438, 293, 164, 305,
	294, 295, 296, 390, -274, 6, 340, 555, 42, 52,
	53, 461, 460, 558, 280, -362, -577, -575, 32, -362,
	32, -430, -424, -362, -362, 160, 250, -200, -202, -199,
	-195, -196, -201, -322, -324, -198, 86, -249, -187, -362,
	-441, 160, 493, 495, 496, -605, -442, -605, -442, 250,
	33, 437, -445, 437, 33, -420, -439, 489, 491, -435,
	92, 438, -425, -444, 83, 156, -516, -442, -442, -444,
	-444, 155, 160, -603, 494, 495, 234, -209, 102, -251,
	-249, -577, -429, -420, -362, -498, -251, -251, -251, -364,
	-364, 86, 159, 37, -362, -362, -362, -362, -318, 160,
	-317, 17, -363, -362, 36, 92, 159, -147, -145, 124,
	-389, -6, 628, -389, -6, -6, -389, -6, -389, -496,
	411, 102, 102, -341, 92, -341, 102, 102, 102, 561,
	87, 92, -433, 83, -510, -398, -554, 617, -218, 87,
	-211, -552, -553, -211, -217, -362, -508, -508, -241, 128,
	128, 128, 25, -510, -218, 87, -552, -509, -209, 618,
	-139, -206, -205, -389, -362, 24, -118, -99, -564, 159,
	160, -214, -448, -428, -425, -450, 147, -362, -436, 160,
	555, 665, 90, 250, -590, -589, 429, 87, 160, -520,
	251, 512, 92, 662, 445, 228, 229, 107, 355, 108,
	109, -479, -397, -393, -387, -387, -385, -385, -391, 264,
	-391, 117, -389, 663, -388, -558, 124, -389, 36, 160,
	36, 160, 84, 160, 87, -486, -389, 159, 87, 87,
	17, 17, 87, -389, 87, 87, 87, 87, 17, 17,
	-389, 87, 159, 87, 87, 87, 87, 84, 87, 160,
	87, 87, 87, 87, 160, -397, -397, -389, -397, 87,
	87, 87, -389, -389, -389, -397, 87, -389, -389, -389,
	-389, -389, -389, -389, -389, -389, -389, -214, -458, 464,
	-458, -458, 160, 160, 160, 87, -139, 86, 102, 160,
	658, -345, -344, 92, -362, -362, 170, 644, -362, 92,
	644, -362, 92, 170, 174, 174, 173, -362, 92, 37,
	24, 24, 314, -234, -236, -237, -238, -239, -240, 138,
	161, 162, 86, -249, -249, -249, -579, 415, -591, 160,
	42, -589, 505, -173, 327, -413, 84, -180, 17, 555,
	-249, -249, -249, -249, -263, 36, 17, -194, -250, -362,
	-573, 86, 87, 160, -362, -362, -362, -421, 84, -362,
	-352, -319, -319, -376, -319, -319, 160, 23, -374, -376,
	-376, -241, -372, -241, 159, -241, -351, -485, 36, -215,
	160, 21, 269, -248, -359, -245, -247, 254, -379, -246,
	257, -548, 255, 253, 112, 258, 312, 113, 248, -359,
	-359, 254, -283, 250, 36, -359, -301, 248, 358, 312,
	255, 21, 269, -300, 248, 113, -362, 254, 258, 255,
	253, -358, 128, -350, 155, 250, 44, 390, -358, 559,
	269, -358, -358, -358, -358, -358, -358, -358, 286, 286,
	-358, -358, -358, -358, -358, -358, -358, -358, -358, -358,
	-358, 165, -358, -358, -358, -358, -358, -358, 86, 332,
	281, 282, 314, -580, 415, 32, 370, 370, 371, -591,
	366, 32, -181, 364, -304, -302, -373, 32, -325, -326,
	-327, -328, -330, -329, 69, 73, 75, 79, 70, 71,
	72, 76, 81, 74, 32, 160, -360, -365, 36, -362,
	92, -360, -187, -202, -200, -360, 86, -442, -604, -606,
	497, 494, 500, -444, -444, 102, 250, 86, 128, -444,
	-444, 42, -361, -601, 501, 495, -139, 160, 83, -251,
	-226, -227, -228, -229, -256, -338, 196, 199, 201, 202,
	203, 204, 206, 207, 208, 209, 210, 213, 214, 211,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 553,
	178, 179, 180, 181, 182, 183, 186, 187, 188, 189,
	185, -362, -235, -319, -190, -202, -362, 92, -362, 147,
	125, -6, 123, -151, -150, -149, 126, 626, 632, 125,
	125, 125, 87, 87, 87, 160, 87, 87, 87, 160,
	87, 160, 102, -523, 474, 41, 160, 86, 87, 160,
	62, 160, 128, 87, 160, -433, -389, -362, 92, -389,
	192, 87, 62, -139, 92, 160, -203, 38, 39, 159,
	447, -362, -534, 87, -450, 160, 250, 159, 159, -426,
	393, -361, -428, 21, 555, -338, 40, -345, 128, 662,
	-362, 87, -391, -391, 117, -387, -384, 87, 125, -389,
	123, -254, -256, 409, 410, -389, -254, -255, -261, 156,
	195, 263, 194, 193, 191, 409, 410, -273, -417, 552,
	-203, 87, -362, -389, -389, 87, -389, -389, 17, -362,
	-273, -385, -389, -208, -208, 87, 87, -457, -458, -457,
	-457, 87, 87, 87, 87, -457, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 86, 102, 104,
	102, 104, -516, -613, 64, 634, 63, 437, 107, 317,
	160, 102, 92, 663, 160, 128, 92, -362, -362, 17,
	246, -362, 17, 174, 92, -592, 321, 364, 505, 246,
	364, 321, 505, 246, -469, 102, 401, 87, 160, -338,
	-226, -215, 86, -215, -582, 476, 417, 427, -358, -381,
	-380, 366, 43, -503, 438, 423, 424, -427, 277, -351,
	-588, 99, 128, 83, 344, 348, 350, 349, 345, 346,
	347, -407, -408, -406, -410, -575, 86, 86, -184, 36,
	136, -180, 86, 86, 36, -480, 334, -256, -249, -194,
	-362, 17, 160, -574, 159, 17, -1, -362, -362, -420,
	-374, -319, -389, -389, -319, -374, -374, -376, -362, -241,
	-480, -256, 36, -299, 243, 239, -454, 314, 315, -455,
	-470, 317, -472, 86, -253, -338, -246, -547, -548, -409,
	-362, 113, -547, 113, 86, -253, -338, -338, -302, -338,
	-362, -362, -362, -362, -309, -308, -338, -311, 33, -312,
	-362, -362, -362, -362, 113, -362, 113, -278, 42, 49,
	50, 51, -358, -358, 198, -281, 42, 437, 439, 440,
	-311, 102, 102, 102, 102, 92, 92, 92, -358, -358,
	102, 92, -365, 92, -549, 173, 46, 47, 102, 102,
	102, 102, 42, 92, -286, 42, 297, 301, 298, 299,
	300, 92, 102, 42, 102, 42, 102, 42, -362, 86,
	-550, -551, 92, 333, -469, -582, -358, 370, -441, 128,
	128, -381, -584, 96, 418, -587, 327, -183, 505, 33,
	-219, 243, 239, -575, -432, -431, -338, -199, -199, -199,
	-199, -199, -199, 69, 80, 69, -212, 86, 69, 74,
	69, 74, 69, -327, 69, 80, -432, -201, -215, -365,
	87, -598, -597, -596, -594, 77, 251, 78, -395, -444,
	494, 498, 499, -428, -377, 92, -435, -223, 24, -249,
	-249, -501, 307, 308, 87, 160, -256, -321, 19, 159,
	121, -6, -147, -149, -389, -6, -389, 628, 383, 629,
	92, 102, 102, -531, 458, 453, 455, 113, -398, -518,
	-517, 62, -184, -211, -510, -553, -516, -362, 663, 663,
	663, 663, 92, 62, -184, -510, -223, -523, -205, -204,
	45, -362, 102, 17, -425, -420, 147, 147, -362, 394,
	-436, 92, 416, 92, 246, 663, 92, -345, -384, -389,
	87, -264, 182, 181, -264, 36, 87, 87, -487, -487,
	-486, -489, -486, -264, -264, 87, 86, -203, 87, 24,
	87, 87, 87, -389, 87, 87, 160, -506, 514, -507,
	588, -457, -457, -457, -457, -457, -457, -457, -457, -457,
	-457, -457, -457, -457, -457, -457, -457, -457, -400, -399,
	269, 459, 641, 641, 459, 641, 641, 87, 160, -556,
	160, -353, 322, -353, -344, 92, 250, 92, 170, -362,
	92, 644, 92, -362, -362, -362, 314, -362, 314, -362,
	-362, 92, 92, 92, -238, -256, 87, 36, -242, -243,
	-244, -253, -245, -247, 36, -583, 96, -578, 92, -362,
	93, -584, 158, 368, 42, 419, 420, 435, 363, 102,
	102, 425, -576, -362, -182, 246, 364, -586, 53, 128,
	92, -249, -406, -350, 155, 288, 337, -316, -315, -362,
	92, -242, -184, -249, -242, -242, -184, -481, 336, 21,
	102, 146, -216, 84, 159, -202, -250, -362, 147, -249,
	87, -319, -241, -319, -319, -374, -481, -184, -466, 318,
	86, -464, 86, -464, 113, 345, -473, -471, 269, -307,
	46, 48, -256, -545, -362, -543, -545, -362, -543, -543,
	-409, -389, -307, -253, 250, 32, 239, -310, 342, 343,
	348, 350, -437, 313, 118, -437, 160, -203, 160, -362,
	-273, -273, 32, 92, 92, -251, 87, 160, 128, 102,
	92, -583, -578, 128, -442, 92, 92, -584, 92, 92,
	-588, 128, -252, 246, -351, 160, -219, -219, -319, 160,
	128, -221, -220, 83, 84, -222, 83, -220, -220, 69,
	-213, 92, 69, 69, -319, -596, -595, 24, -548, -548,
	-548, 87, 87, 15, -228, 42, -320, 20, 21, 147,
	125, 123, 125, 125, -362, 87, 87, -493, 619, -527,
	-529, 453, 21, 21, 15, 251, 87, -510, 663, -510,
	-531, 46, 47, -420, -436, 438, -249, 160, 663, -254,
	-292, 92, -389, 87, -389, 87, 92, 87, 92, -208,
	21, 87, 160, 87, 87, 87, 160, 87, 87, -389,
	87, -556, -354, 192, 92, -354, 364, -363, -362, 17,
	-362, 92, -362, -469, 314, -469, 314, 246, -362, 244,
	-184, 87, 160, -184, 92, -581, 429, 102, 42, 102,
	158, 421, -504, -174, 96, -251, 33, -219, -585, 96,
	128, 662, 86, -358, -358, -358, -362, 87, 160, -358,
	-358, 87, 87, 87, -271, 555, -482, 268, 102, 146,
	102, 146, 102, -360, -202, -362, -319, -574, 159, -216,
	-319, -482, -456, 319, 102, -385, 86, -385, 86, -465,
	316, 86, 87, 160, -362, -338, -268, -267, -265, 107,
	118, 42, 407, -266, 96, 155, 302, 305, 304, 280,
	303, -297, -378, 83, 413, 342, 343, -410, 619, 543,
	253, 112, 113, 395, -379, 86, 86, 84, 322, 86,
	86, -545, 87, -307, -338, 42, -310, 42, 356, 313,
	-308, -362, 155, -273, 87, -551, 92, -556, -581, 92,
	-444, -586, 92, -174, -251, -575, -208, -431, -516, -389,
	86, -389, 87, 86, 69, 11, 19, -382, -389, -397,
	647, 649, 650, 252, -6, 629, 383, -288, 620, 92,
	21, 92, -525, 92, -432, -493, -142, -285, -350, 285,
	87, -291, 138, 555, 87, 87, -457, -457, -460, -459,
	-463, 459, 314, 467, -397, 92, 92, 87, 87, 92,
	-362, 170, 92, 662, 92, -469, 92, -469, -362, 314,
	-230, -256, -178, 555, -271, -244, -178, 21, 555, 367,
	42, 102, 42, 422, 92, -182, 128, 108, 109, -346,
	-347, 92, -415, -273, -275, 92, -315, -382, -382, -269,
	-184, 36, -270, -313, -410, 555, -141, -140, -269, 555,
	86, -483, 164, 102, 146, 102, 102, -319, -319, -360,
	-483, -472, 21, 87, -451, 87, -451, 86, 128, -385,
	-471, -474, 62, -265, 107, -385, 92, -275, -276, 42,
	301, 297, 128, 128, -277, 42, 281, 282, -287, 86,
	312, 15, 198, 86, 113, 113, -249, -415, -415, -546,
	344, 345, 346, 351, 348, 349, 347, 350, -546, -415,
	-415, 86, -438, -437, -385, -358, -358, 155, -585, -209,
	-214, -544, -362, 253, 21, 21, -502, 555, 648, 86,
	86, -362, -362, -342, 621, 102, 92, 455, -288, -494,
	622, -521, -464, -273, 128, 87, 76, 553, 556, 87,
	-462, 120, 421, 425, -383, -386, 102, 104, 190, 158,
	87, 87, -362, -349, -348, 92, 92, 92, 314, -469,
	554, -179, 61, 501, 92, 93, 416, 92, 93, 367,
	-174, 92, 663, 160, 128, 87, -452, 269, -184, 160,
	-313, -350, -142, -452, -272, -314, -362, 92, -500, 173,
	335, 555, 102, 146, 102, -208, -319, -484, 173, 335,
	-455, 87, 87, 87, -451, 102, 87, -478, -475, 86,
	-313, 271, 138, 92, 92, 102, 86, -511, 32, 92,
	-416, 86, 87, 87, 87, 87, -415, 102, -273, -358,
	87, 87, 160, 650, 86, -397, -397, 86, 21, -342,
	-495, 623, 92, -530, 458, -524, -522, 453, 454, 455,
	456, 92, 554, 66, 557, -461, -462, 425, -383, -386,
	617, 465, 465, 465, 663, 160, 128, -469, 92, -232,
	-362, 312, 438, -347, 92, -418, -453, 321, 21, -313,
	-358, -453, 87, 160, -358, -358, 335, 102, 146, 102,
	-209, -208, 335, -467, 320, 87, -478, -313, -477, -476,
	319, 272, 86, 87, -389, -401, -358, 87, -290, -289,
	551, -415, -418, 84, -418, 84, -418, 84, -418, 84,
	87, -273, -362, 253, -137, 86, 87, 87, -343, -362,
	-525, 92, -532, 251, -528, -529, 457, -522, 21, 455,
	21, 21, -143, 160, 66, 117, 466, 466, 466, -348,
	92, 92, -231, 36, 460, 394, -419, 259, 356, 357,
	96, 555, 342, 343, 361, 360, 359, 362, 21, -454,
	-273, -314, -382, -382, 102, -209, 102, 87, 160, -362,
	268, 86, -396, -390, -389, 268, 87, -362, -296, -294,
	-295, 83, 472, 310, 311, 87, -546, -546, -546, -546,
	-297, 87, 160, -395, 87, 160, -539, 86, 102, -527,
	-526, -528, 21, -525, 21, -525, -525, 462, 555, -461,
	92, -358, -358, 92, 92, 341, -358, -358, -358, -358,
	-338, 86, -466, -476, -475, -396, 87, 160, -437, -295,
	83, -294, 83, 16, 15, -418, -418, -418, -418, 86,
	87, -362, -542, 32, 87, -538, -537, -339, -533, -362,
	458, 459, 92, -525, 128, 556, -616, -615, 640, 102,
	102, -362, 102, 102, 102, 92, -451, -456, 87, -390,
	-293, 307, 308, 32, 173, -293, -395, -541, -540, -340,
	87, 160, 159, 92, 557, 92, 87, -472, 107, 42,
	309, 87, 160, 128, -537, -362, -540, 42, -389, 159,
	-362,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 0, 0, 0, 0, 0, 720, 721, 0, 684,
	0, 0, 0, 0, 0, 0, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 533, 0, 0, 0,
	0, 806, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, -2, 734, 0,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 734, 0, 0,
	0, 814, 0, 0, 0, 857, 875, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1417, 1418,
	1419, 1420, 2223, 2193, -2, 1955, 1929, 2117, 2118, 2012,
	2025, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
	2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278,
	2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288,
	2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
	2309, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, -2, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, -2, -2, -2, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
	2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
	2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,
	2244, 2245, 2246, 2247, 2248, 2249, 0, 314, 312, 1899,
	1929, 1955, 2012, 2025, 2026, 2065, 2117, 2118, 2150, 2193,
	2209, 2210, 2211, 2223, 0, 0, 1012, 0, 784, 0,
	0, 0, 789, 1364, 784, 0, 351, 722, 723, 814,
	840, 682, 0, 388, 0, 1945, 392, 2200, 0, 0,
	0, 0, 679, 382, 383, 384, 385, 386, 387, 0,
	0, 985, 0, 0, 378, 0, 345, 2015, 2222, 1421,
	0, 0, 0, 0, 0, 201, 1136, 203, 1138, 207,
	215, 0, 0, 0, 220, 221, 224, 225, 226, 227,
	228, 0, 232, 0, 234, 237, 0, 239, 240, 0,
	243, 244, 245, 0, 255, 256, 257, 1139, 1140, 1141,
	-2, 130, 1010, 1857, 1743, 0, 1750, 1763, 1774, 1503,
	1504, 1505, 1506, 0, 0, 0, 0, 0, 0, 1514,
	1515, 0, 1545, 2264, 2305, 2306, 0, 1523, 1524, 1525,
	1526, 1527, 1528, 0, 141, 153, 154, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 0, 1804, 1805, 1806, 1714, 1490,
	1417, 0, 2273, 0, 2295, 2300, 2301, 2302, 2303, 2294,
	0, 0, 1698, 0, 1688, 0, 0, -2, -2, 0,
	0, 2090, -2, 2307, 2308, 2309, 2270, 2291, 2299, 2274,
	2275, 2298, 2266, 2267, 2268, 2261, 2262, 2263, 2265, 2277,
	2279, 2290, 0, 2286, 2296, 2297, 2198, 0, 0, 2245,
	0, 0, 0, 2240, 155, 156, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1709, -2, 1711, -2, 1713, -2, 1716,
	-2, -2, -2, -2, 1721, 1722, -2, 1724, -2, -2,
	-2, -2, -2, -2, -2, 1700, 1701, 1702, 1703, 1692,
	1693, 1694, 1695, 1696, 1697, -2, -2, -2, 840, 933,
	0, 840, 0, 815, 862, 865, 868, 871, 818, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 329, 331, 0, 335, 0, 0,
	331, 328, 322, 0, 1177, 1177, 1177, 0, 0, 0,
	0, 1177, 1177, 1177, 1177, 1177, 0, 1177, 0, 0,
	0, 0, 0, 1177, 0, 1045, 1143, 1144, 1145, 1175,
	1176, 1249, 0, 0, 0, 739, 734, 735, 736, 737,
	738, 828, 0, 830, 833, 0, 0, 659, 659, 900,
	900, 0, 605, 0, 0, 0, 659, 0, 619, 611,
	0, 0, 0, 659, 0, 0, 835, 835, 0, 662,
	669, 659, 659, -2, 659, 659, 656, 659, 0, 0,
	1189, 625, 626, 627, 611, 611, 630, 631, 632, 642,
	643, 670, 1881, 0, 0, 533, 533, 0, 533, 533,
	0, 533, 533, 533, 0, 741, 1971, 2060, 1952, 2031,
	1909, 2015, 2222, 0, 287, 2090, 292, 0, 1954, 1974,
	0, 0, 1993, 0, -2, 0, 367, 840, 0, 0,
	814, 0, 0, 0, 0, 533, 533, 533, 533, 533,
	1248, 533, 533, 533, 533, 533, 0, 0, 0, 533,
	533, 533, 533, 0, 876, 877, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 109, 108, 0, 1858, 1876,
	1809, 1810, 1811, 1863, 1813, 1867, 1867, 1867, 1867, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1867,
	1867, 0, 0, 1856, 1833, 1865, 1865, 1865, 1863, 1860,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1870, 1870, 1873, 1873, 1870, 0,
	428, 426, 427, 1739, 0, 0, 0, 0, 784, 784,
	788, 1362, 0, 0, 0, 784, 840, -2, 0, 0,
	683, 389, 1422, 0, 0, 393, 0, 394, 0, 0,
	396, 0, 0, 0, 417, 0, 420, 404, 405, 406,
	407, 400, 0, 181, 0, 380, 381, 0, 0, 347,
	0, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	212, 208, 216, 219, 229, 236, 0, 248, 250, 253,
	209, 217, 222, 223, 230, 251, 210, 213, 214, 218,
	252, 254, 211, 231, 235, 249, 233, 238, 241, 242,
	247, 0, 182, 0, 0, 0, 0, 0, 1749, 0,
	0, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1743, 0,
	0, 1509, 1510, 1511, 1512, 0, 1516, 0, 1546, 0,
	0, 0, 0, 0, 0, 1803, 1807, 0, 1739, 1739,
	0, 1739, 1735, 0, 0, 0, 0, 0, 0, 1739,
	1671, 0, 0, 1673, 1689, 0, 0, 1675, 1676, 0,
	1679, 1680, 1739, 0, 1739, 1684, 1739, 1739, 1739, 1667,
	1668, 0, 1735, 1735, 1735, 1735, 0, 0, 1735, 1735,
	1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
	1735, 1735, 1735, 0, 0, 0, 0, 835, 0, 841,
	0, -2, 0, 859, 861, 863, 864, 866, 867, 869,
	870, 872, 873, 820, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 333, 0, 338, 324, 2052, 0, 323, 0, 0,
	0, 0, 0, 1009, 0, 0, 1177, 1177, 1177, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 1177, 1177,
	1177, 1177, 0, 1195, 0, 0, 0, 741, 740, 739,
	0, 829, 0, 0, 70, 594, 595, 596, 900, 0,
	0, 598, 599, 0, 600, 0, 0, 611, 659, 659,
	617, 618, 613, 612, 665, 666, 662, 0, 662, 662,
	900, 0, 636, 637, 638, 659, 659, 644, 836, 0,
	645, 646, 662, 0, 667, 668, 900, 0, 0, 900,
	900, 0, 654, 655, 657, 659, 0, 0, 1177, 0,
	675, 613, 613, 1882, 1883, 0, 0, 1186, 0, 0,
	0, 0, 678, 0, 0, 0, 444, 445, 0, 0,
	742, 0, 266, 270, 0, 273, 0, 2060, 0, 2060,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 310,
	311, 0, 0, 0, 0, 301, 304, 1356, 1357, 1133,
	1134, 305, 306, 359, 360, 0, 835, 858, 860, 854,
	855, 856, 0, 72, 0, 0, 0, 0, 0, 533,
	0, 0, 0, 0, 0, 716, 0, 1025, 718, 0,
	0, 0, 0, 0, 908, 902, 904, 980, 141, 878,
	8, 126, 123, 0, 19, 0, 0, 19, 19, 0,
	19, 315, 0, 1879, 1877, 1878, 1812, 1864, 0, 1838,
	0, 1839, 1840, 1841, 1852, 1853, 0, 0, 1834, 0,
	1835, 1836, 1837, 1828, 0, 1829, 1830, 0, 1831, 1832,
	313, 425, 0, 0, 1740, 1013, 0, 762, 776, 757,
	0, 765, 0, 0, 0, 1364, 0, 0, 0, 0,
	743, 776, 746, 0, 765, 0, 835, 812, 0, 790,
	0, 0, 390, 0, 401, 395, 0, 402, 397, 398,
	0, 0, 419, 421, 422, 423, 408, 409, 680, 376,
	377, 368, 369, 370, 371, 372, 373, 374, 375, 0,
	0, 379, 151, 0, 348, 349, 0, 0, 0, 195,
	196, 197, 198, 199, 200, 202, 186, 705, 707, 1125,
	1137, 0, 1128, 0, 205, 246, 178, 0, 0, 0,
	1744, 1745, 1746, 1747, 1748, 1753, 0, 1755, 1757, 1759,
	1761, 0, 1779, -2, -2, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1764, 1777, 1778,
	0, 0, 0, 0, 0, 0, 1775, 1775, 1770, 0,
	1529, 1358, 1359, 1507, 0, 0, 1543, 1547, 0, 0,
	0, 0, 0, 0, 1160, 1863, 0, 142, 1734, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 0, 0,
	1743, 0, 0, 0, 1736, 1737, 0, 0, 0, 1626,
	0, 0, 1632, 1633, 1634, 0, 771, 0, 1699, 1672,
	1690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	934, 0, 780, 782, 783, 809, 790, 816, 0, 0,
	0, 101, 106, 0, 1216, 0, 0, 0, 0, 0,
	0, 0, 74, 1190, 75, 1192, 342, 343, 0, 0,
	337, 325, 2052, 327, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 1061, 1062, 531, 1119, 0,
	0, 0, 1135, 1164, 1173, 0, 0, 0, 0, 0,
	1222, 1047, 1052, 1053, 1054, 1048, 1049, 1055, 1056, 0,
	741, 831, 0, 0, 949, 597, 660, 661, 901, 601,
	0, 0, 608, 2015, 613, 900, 900, 620, 614, 621,
	664, 622, 623, 624, 662, 900, 900, 837, 659, 662,
	647, 663, 662, 1364, 651, 0, 658, 1364, 676, 1364,
	0, 674, 628, 629, 1224, 833, 442, 443, 448, 450,
	0, 499, 499, 499, 482, 499, 0, 0, 470, 1884,
	0, 0, 0, 0, 479, 1884, 0, 0, 1884, 1884,
	1884, 1884, 1884, 1884, 1884, 0, 0, 1884, 1884, 1884,
	1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 0, 1884,
	1884, 1884, 1884, 1884, 1341, 1884, 0, 498, 1187, 489,
	490, 491, 492, 497, 0, 0, 527, 0, 0, 1060,
	0, 531, 0, 0, 1102, 0, 0, 913, 0, 914,
	915, 916, 911, 951, 975, 975, 0, 975, 955, 1364,
	0, 0, 0, 278, 279, 267, 0, 268, 0, 0,
	281, 282, 0, 284, 285, 286, 293, 1952, 2031, 288,
	290, 0, 0, 294, 307, 308, 309, 0, 0, 299,
	300, 0, 0, 362, 363, 365, 0, 790, 1191, 702,
	1360, 703, 704, 708, 0, 0, 711, 712, 713, 714,
	715, 1027, 0, 0, 1111, 1112, 1113, 1114, 900, 0,
	909, 0, 905, 981, 0, 983, 0, 0, 124, 19,
	0, 117, 114, 0, 0, 0, 0, 0, 1859, 1808,
	1880, 0, 0, 0, 1861, 0, 0, 0, 0, 0,
	107, 792, 751, 0, 756, 773, 0, 777, 0, 0,
	769, 761, 766, 0, 0, 786, 752, 762, 1363, 0,
	0, 0, 0, 745, 0, 0, 750, 744, 790, 0,
	813, 842, 843, 846, 1423, 0, 403, 399, 418, 0,
	0, 0, 0, 189, 1122, 0, 190, 194, 184, 0,
	0, 0, 1127, 0, 1124, 1129, 0, 204, 0, 0,
	179, 180, 1207, 1216, 0, 0, 0, 1754, 1756, 1758,
	1760, 1762, 0, 1765, 1775, 1775, 1771, 0, 1766, 0,
	1768, 0, 1744, 1513, 0, 1548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 1616, 1617,
	0, 0, 1621, 0, 1623, 1624, 1625, 1627, 0, 0,
	0, 1631, 0, 1670, 1691, 1674, 1677, 0, 1681, 0,
	1683, 1685, 1686, 1687, 0, 840, 840, 0, 0, 1587,
	1587, 1587, 0, 0, 0, 0, 1587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1532, 0,
	1533, 1534, 0, 0, 0, 935, 810, 0, 0, 0,
	0, 0, 1214, 0, 91, 0, 0, 0, 0, 96,
	0, 0, 76, 344, 332, 334, 0, 326, 0, 1178,
	0, 0, 0, 0, 0, 1015, 1016, 1018, 0, 1021,
	1022, 1023, 1027, 833, 0, 833, 1072, 1884, 535, 0,
	0, 1121, 0, 1091, 0, 0, 0, -2, 0, 0,
	1173, 0, 0, 0, 1226, 0, 0, 0, 728, 732,
	0, 23, 834, 0, 604, 602, 0, 606, 0, 607,
	659, 615, 616, 900, 639, 640, 0, 0, 900, 659,
	659, 650, 662, 671, 0, 672, 1364, 1226, 0, 0,
	1186, 1292, 1260, 460, 0, 1377, 1378, 500, 0, 1384,
	1393, 1177, 1455, 0, 1393, 0, 0, 1395, 1396, 0,
	0, 0, 0, 483, 484, 0, 469, 0, 0, 0,
	0, 0, 0, 468, 0, 0, 510, 0, 0, 0,
	0, 0, 1885, 1884, 1884, 0, 477, 478, 0, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 1884, 1884,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1349, 0, 1072, 1884, 0, 0, 0, 0, 535,
	1116, 1089, 1107, 0, 446, 447, 507, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 833, 976, 0, 978,
	979, 953, -2, 0, 913, 958, 1739, 0, 271, 272,
	0, 0, 277, 295, 297, 269, 0, 0, 0, 296,
	298, 302, 303, 361, 364, 366, 852, 0, 0, 1250,
	0, 1028, 1029, 1031, 1032, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1936,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1026, 719, 891, 903, 910, 982, 984, 142, 906,
	0, 127, 19, 126, 118, 119, 0, 19, 0, 0,
	0, 0, 1869, 1868, 1854, 0, 1855, 1866, 1871, 0,
	1874, 0, 429, 796, 0, 0, 776, 778, 0, 0,
	776, 0, 0, 785, 0, 753, 0, 0, 0, 0,
	0, 0, 776, 852, 792, 0, 849, 847, 848, 0,
	0, 681, 152, 424, 0, 0, 0, 0, 0, 706,
	0, 1126, 186, 0, 0, 206, 0, 0, 0, 1216,
	1211, 1738, 1767, 1769, 0, 1776, 1772, 1508, 1517, 1544,
	0, 0, 1550, 1562, 1562, 0, 0, 0, 1553, 1867,
	1867, 1556, 1863, 1865, 1863, 1562, 1562, 0, 1161, 0,
	1162, 846, 143, 0, 0, 1622, 0, 0, 0, 772,
	0, 0, 0, 1583, 1585, 1587, 1587, 1594, 1588, 1595,
	1596, 1587, 1587, 1587, 1587, 1601, 1587, 1587, 1587, 1587,
	1587, 1587, 1587, 1587, 1587, 1587, 1587, 1581, 0, 0,
	1797, 1798, 781, 0, 0, 823, 824, 825, 826, 827,
	0, 0, 61, 61, 1216, 0, 100, 92, 0, 0,
	0, 0, 0, 336, 0, 77, 78, 80, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 1020, 0,
	0, 0, 1370, 0, 1076, 1073, 1074, 1075, 0, 1116,
	536, 537, 538, 539, 0, 0, 0, 1120, 0, 0,
	1084, 0, 0, 0, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, -2, 1181, 0, 0, 0, 1370, 1200, 0,
	0, 1205, 1370, 1370, 0, 1234, 0, 1223, 784, 0,
	-2, 0, 0, 730, 0, 0, 0, 950, 603, 609,
	900, 633, 838, 839, 1364, 900, 900, 659, 677, 673,
	1234, 1225, 0, 449, 499, 0, 1280, 0, 0, 1286,
	0, 1293, 453, 0, 501, 0, 1383, 1411, 1394, 1411,
	1456, 1411, 1411, 1177, 0, 501, 0, 0, 471, 0,
	0, 0, 0, 0, 467, 504, 846, 454, 456, 457,
	458, 508, 509, 511, 0, 513, 514, 473, 485, 486,
	487, 488, 0, 0, 0, 480, 493, 494, 495, 496,
	455, 1309, 1310, 1311, 1314, 1315, 1316, 1317, 0, 0,
	1320, 1321, 1322, 1323, 1324, 1408, 1409, 1410, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1350, 1351, 1352, 1353, 1354,
	1355, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 0,
	0, 1345, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 1116, 530, 0, 0, 1091, 0, 1109, 0, 1103,
	1104, 0, 0, 754, 900, 354, 0, 945, 936, 0,
	920, 0, 922, 942, 923, 943, 0, 0, 927, 0,
	929, 0, 925, 926, 931, 924, 900, 912, 952, 977,
	954, 957, 959, 960, 966, 0, 0, 0, 0, 265,
	274, 275, 276, 283, 0, 555, 289, 808, 0, 1361,
	709, 710, 1251, 1252, 717, 0, 1033, 889, 0, 0,
	122, 125, 0, 120, 0, 0, 0, 0, 112, 110,
	1862, 0, 0, 798, 166, 0, 0, 0, 774, 0,
	779, 776, 760, 770, 759, 767, 768, 787, 1365, 1366,
	1367, 1368, 0, 776, 749, 748, 811, 796, 844, 845,
	0, 1424, 391, 0, 1123, 186, 191, 192, 193, 187,
	185, 1130, 0, 1132, 0, 1209, 0, 0, 1773, 1549,
	1518, 1551, 1563, 1564, 1552, 0, 1520, 1521, 1554, 1555,
	1557, 1558, 1559, 1560, 1561, 1522, 0, 1163, 1618, 0,
	1620, 1628, 1629, 0, 1678, 1682, 0, 0, 0, 0,
	0, 1592, 1593, 1597, 1598, 1599, 1600, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 840, 1582,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 63, 0, 63, 1215, 1217, 0, 980, 0, 0,
	97, 0, 0, 79, 81, 0, 2016, 0, 0, 0,
	0, 88, 1008, 1011, 1017, 1019, 0, 0, 0, 1371,
	1372, 1374, 1375, 1376, 0, 1044, 0, 0, 1064, 1065,
	1066, 1078, 0, 541, 542, 0, 0, 0, 554, 550,
	551, 552, 532, 1115, 1098, 0, 0, 1087, 0, 0,
	1097, 0, 1182, 1884, 1884, 1884, 0, 0, 1294, 1884,
	1884, 0, 1202, 1204, 0, 0, 1298, 1237, 0, 0,
	1228, 0, 975, 0, 0, 900, 729, 732, 733, 784,
	832, 610, 648, 652, 649, 900, 1237, 441, 1258, 0,
	0, 0, 0, 0, 1290, 0, 0, 1262, 0, 472,
	502, 0, -2, 0, 1412, 0, 1397, 1412, 0, 0,
	1411, 0, 461, 501, 0, 0, 0, 515, 520, 521,
	0, 517, 518, 1451, 0, 519, 0, 506, 0, 512,
	1312, 1313, 0, 1318, 1319, 0, 1343, 0, 0, 0,
	452, 522, 0, 0, 0, 523, 524, 529, 1117, 1118,
	1084, 0, 1098, 0, 1108, 0, 1105, 1106, 840, 0,
	0, 917, 946, 0, 0, 918, 0, 919, 921, 944,
	0, 938, 928, 930, 353, 961, 0, 0, 963, 964,
	965, 956, 291, 853, 1030, 0, 874, 0, 0, 907,
	0, 19, 0, 0, 115, 1872, 1875, 800, 0, 797,
	167, 0, 0, 0, 0, 764, 775, 758, 1369, 747,
	798, 850, 851, 188, 183, 1131, 1219, 0, 1210, 0,
	1475, 1531, 0, 1630, 0, 1587, 1584, 1587, 1586, 1578,
	0, 1535, 0, 1537, 1538, 1539, 0, 1541, 1542, 0,
	819, 0, 59, 0, 62, 60, 0, 99, 93, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	1050, 1298, 0, 1050, 1077, 1063, 0, 0, 543, 544,
	0, 547, 553, 1079, 0, 0, 1081, 1082, 1083, 0,
	0, 1095, 0, 0, 0, 0, 1174, 1188, 0, 0,
	0, -2, 0, -2, 1199, 0, 1243, 0, 1235, 0,
	1227, 0, 1230, 900, 900, -2, 726, 731, 0, 975,
	653, 1243, 1260, 0, 1281, 0, 0, 0, 0, 0,
	0, 0, 1261, 0, 1274, 503, 1413, -2, 1427, 1429,
	0, 1187, 1432, 1433, 0, 0, 0, 0, 0, 0,
	1482, 1441, 0, 0, 1445, 1446, 1447, 0, 0, 1450,
	0, 1791, 1792, 0, 1454, 0, 0, 0, 0, 0,
	0, 0, 1391, 462, 463, 0, 465, 466, 1884, 1452,
	505, 459, 1884, 475, 1342, 1346, 1347, 1344, 528, 525,
	526, 1087, 1090, 1101, 1110, 755, 835, 355, 356, 947,
	0, 937, 939, 970, 967, 0, 0, 1034, 890, 898,
	2245, 2247, 2244, 116, 121, 0, 0, 802, 0, 799,
	0, 793, 795, 177, 763, 800, 137, 169, 0, 0,
	1519, 0, 0, 0, 1619, 1669, 1590, 1591, 0, 1579,
	0, 1573, 1574, 1575, 1580, 0, 0, 822, 817, 64,
	95, 0, 98, 68, 83, 0, 84, 0, 0, 0,
	0, 1036, 1043, 1057, 1193, 1373, 1042, 0, 0, 540,
	545, 0, 548, 549, 1099, 1098, 0, 1085, 1086, 0,
	1093, 0, 0, 1183, 1184, 1185, 1295, 1296, 1297, 1253,
	1201, 0, -2, 1306, 0, 0, 1197, 1219, 1253, 0,
	0, 1231, 0, 1238, 0, 1236, 1229, 840, 727, 900,
	1240, 451, 1292, 1282, 0, 1284, 0, 0, 0, 0,
	1263, -2, 0, 1428, 1430, 1431, 1434, 1435, 1436, 1487,
	1488, 1489, 0, 0, 1439, 1484, 1485, 1486, 1440, 0,
	0, 0, 0, 0, 1789, 1790, 1480, 0, 0, 1398,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1399, 0,
	0, 0, 1390, 1392, 464, 0, 0, 1884, 1100, 352,
	0, 0, 971, 973, 968, 969, 892, 0, 0, 0,
	0, 111, 113, 128, 0, 801, 168, 0, 802, 139,
	0, 160, 0, 1220, 0, 1530, 0, 0, 0, 1589,
	1576, 0, 0, 0, 0, 0, 1793, 1794, 1795, 0,
	1536, 1540, 94, 0, 66, 0, 85, 86, 0, 0,
	0, 0, 1058, 1059, 1067, 1068, 0, 1070, 1071, 546,
	1080, 1088, 1092, 1095, 0, 1147, 1255, 0, 1203, 1186,
	1308, 1884, 1206, 1255, 0, 1300, 1884, 1884, 1221, 0,
	1233, 0, 1245, 0, 1239, 835, 840, 440, 0, 1242,
	1278, 1283, 1285, 1287, 0, 1291, 1289, 1264, -2, 0,
	1272, 0, 0, 1437, 1438, 0, 0, 1688, 1884, 0,
	1470, 0, 1147, 1147, 1147, 1147, 0, 516, 474, 0,
	948, 962, 0, 899, 0, 0, 0, 0, 0, 791,
	129, 0, 138, 157, 0, 170, 171, 0, 0, 0,
	0, 1212, 0, 1478, 1479, 0, 1565, 0, 0, 0,
	1569, 1570, 1571, 1572, 65, 68, 0, 0, 87, 0,
	1035, 0, 1069, 1094, 1096, 1146, 1196, 0, 1292, 1307,
	0, 1198, 1299, 0, 0, 0, 1232, 1244, 0, 1247,
	724, 835, 1241, 1259, 0, 1288, 1265, 1273, 0, 1268,
	0, 0, 0, 1483, 0, 1444, 0, 1449, 1458, 1471,
	0, 0, 1379, 0, 1381, 0, 1385, 0, 1387, 0,
	0, 476, 972, 974, 0, 1739, 894, 895, 0, 804,
	794, 140, 144, 0, 166, 163, 0, 172, 0, 0,
	0, 0, 1208, 0, 1476, 0, 1566, 1567, 1568, 67,
	69, 89, 0, 1037, 1038, 1051, 1148, 1884, 1884, 0,
	0, 0, 1154, 1155, 1884, 1884, 1884, 1884, 0, 1280,
	1312, 1301, 1302, 1303, 1246, 725, 1279, 1267, 0, -2,
	1275, 0, 0, 1741, 1751, 1752, 1442, 1448, 1457, 1459,
	1460, 0, 1472, 1473, 1474, 1481, 1147, 1147, 1147, 1147,
	1389, 893, 0, 0, 803, 0, 131, 0, 0, 161,
	162, 164, 0, 173, 0, 175, 176, 0, 0, 1577,
	1039, 0, 0, 1151, 1152, 0, 0, 0, 0, 0,
	1256, 0, 1258, 1269, -2, 0, 1277, 0, 1443, 1461,
	0, 1462, 0, 0, 0, 1380, 1382, 1386, 1388, 1739,
	896, 805, 1218, 0, 145, 0, 147, 149, 150, 1414,
	158, 159, 165, 174, 0, 0, 1024, 1040, 0, 1149,
	1150, 1153, 1156, 1157, 1158, 1159, 0, 1260, 1276, 1742,
	1463, 1465, 1466, 0, 0, 1464, 0, 132, 133, 0,
	146, 0, 0, 1213, 1477, 1041, 1257, 1254, 1467, 1469,
	1468, 897, 0, 0, 148, 1415, 134, 135, 136, 0,
	1416,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 664, 661,
	129, 128, 130, 3, 665, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 662, 141, 663, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:846
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:853
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:859
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:867
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:907
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:969
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:990
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:994
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1018
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1022
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1026
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1071
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1087
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1097
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1107
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1117
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1127
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1137
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1228
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1261
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1283
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1291
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1310
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1320
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1330
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1350
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1356
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1371
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1377
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1412
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1420
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1484
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1488
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1494
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1513
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1517
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1588
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1598
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1611
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1623
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1635
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1639
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1653
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1657
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1662
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1677
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1683
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1692
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1703
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1707
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1713
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1717
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1723
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1727
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1733
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1753
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1772
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1776
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1780
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1808
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1815
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1820
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1827
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1836
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1864
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1868
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1882
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1902
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1921
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1950
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1954
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1959
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1969
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2006
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2020
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2033
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2046
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2058
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2066
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2076
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2113
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2117
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2139
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2143
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2329
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2337
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2341
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2414
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2418
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2424
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2439
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2443
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2447
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2451
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2544
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2551
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2557
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2632
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2651
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2673
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2704
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2710
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2714
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2720
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2724
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2730
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2734
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2770
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2775
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2787
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2812
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2816
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2820
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2824
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2830
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2838
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2842
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2884
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2897
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2959
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2965
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2981
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2985
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3034
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3048
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3105
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3131
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3141
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3151
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3167
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3179
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3187
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3227
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3231
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3237
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3243
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3250
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3255
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3277
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3285
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3289
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3347
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3354
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3363
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3371
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3375
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3381
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3392
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3396
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3402
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3406
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3430
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3440
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3466
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3488
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3494
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3498
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3518
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3577
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3581
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3585
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3618
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3622
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3630
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3635
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3666
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3670
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3675
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3681
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3687
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3695
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3699
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3705
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3713
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3720
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3726
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3732
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3738
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3744
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3766
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3772
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3784
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3790
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3796
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3815
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3863
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3908
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3920
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3933
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3937
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3945
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3949
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3954
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3958
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3974
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3978
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3982
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3986
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3997
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4001
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4005
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4016
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4031
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4035
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4055
		{
			yyVAL.item = nil
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4060
		{
			yyVAL.item = nil
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4144
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4209
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4213
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4224
		{
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4228
		{
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4291
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4297
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4314
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4349
		{
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4351
		{
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4379
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4383
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4387
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4393
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4399
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4405
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4411
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4451
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4469
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4502
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4515
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4519
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4524
		{
			yyVAL.str = ""
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4528
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4534
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4549
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4553
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4559
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4582
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4588
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4594
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4599
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4607
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4613
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4618
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4624
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4634
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4662
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4670
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4678
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4686
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4690
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4696
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4709
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4717
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4726
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4732
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4740
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4748
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4756
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4762
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4770
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4776
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4784
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4790
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4800
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4805
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4812
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4828
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[7].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[9].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[10].whereUnion(),
				OrderBy: yyDollar[11].orderByUnion(),
				Limit:   yyDollar[12].limitUnion(),
				IsCdc:   true,
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4845
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4858
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4869
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4873
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4879
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4885
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4894
		{
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4896
		{
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4899
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4908
		{
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4912
		{
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4917
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4924
		{
			rep := yyDollar[5].replaceUnion()
			rep.Table = yyDollar[3].tableExprUnion()
			rep.PartitionNames = yyDollar[4].identifierListUnion()
			rep.IsCdc = true
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4934
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4941
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4947
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4955
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4962
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4969
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4989
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4997
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5005
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[6].updateExprsUnion()
			ins.IsCdc = true
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5016
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5020
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5026
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5033
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5039
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5047
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5054
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5061
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5080
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5084
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5088
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5093
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5097
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5101
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5107
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5116
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5120
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5126
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5130
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5136
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5140
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5146
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5151
		{
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5162
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5166
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5173
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5182
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5188
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5192
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5198
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5202
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5211
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5224
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5235
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5246
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5268
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5291
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5308
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5312
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5325
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5329
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5334
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5338
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5345
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5350
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5363
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5375
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5383
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5392
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5398
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5408
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5427
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5441
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5445
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5451
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5464
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5472
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5476
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5489
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5498
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5502
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5508
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5516
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5520
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5529
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5535
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5543
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5552
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5558
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5568
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5574
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5583
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5587
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5592
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5596
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5600
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5605
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5617
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5621
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5625
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5639
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5643
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5653
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5663
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5673
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5685
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5701
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5710
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5718
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5734
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5750
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5758
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5766
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5774
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5784
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5797
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5801
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5807
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5811
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5825
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5841
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5845
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5849
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5853
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5875
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5879
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5884
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5888
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5898
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5907
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5916
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5927
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5931
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5936
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5940
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5949
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5955
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5959
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5965
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5969
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5973
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5977
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5982
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5990
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5996
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6004
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6014
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6024
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6028
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6034
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6054
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6063
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6072
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6080
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6091
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6101
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6105
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6115
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6125
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6129
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6133
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6137
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6143
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 932:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6149
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6160
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6164
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6170
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6176
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6180
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6193
		{
			yyVAL.str = yyDollar[2].str
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6199
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6205
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6209
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6213
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6217
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6223
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6227
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6233
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6237
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6243
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6247
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6253
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6257
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6267
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6280
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6286
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6292
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6306
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6324
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6328
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6334
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6348
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6357
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6361
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6369
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6378
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6382
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6386
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6390
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6395
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6399
		{
			yyVAL.str = yyDollar[1].str
		}
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6403
		{
			yyVAL.str = yyDollar[2].str
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6409
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6413
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6418
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6422
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6426
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6430
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6434
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6440
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6482
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6495
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6501
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6507
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6520
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6525
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6532
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6539
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6543
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6549
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6555
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6560
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6564
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6568
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6572
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6579
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6612
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6617
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6624
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6635
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6641
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6647
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6651
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6655
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6661
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6667
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6673
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6677
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6683
		{
			yyVAL.str = ""
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6690
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1042:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6696
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6711
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6728
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6745
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6749
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6755
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6759
		{
			yyVAL.str = "DEFINER = "
		}
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6763
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6768
		{
			yyVAL.str = ""
		}
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6772
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6786
		{
			yyVAL.str = ""
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6794
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6800
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6805
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6811
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6824
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6829
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6834
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6840
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6847
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6854
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6861
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6868
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6876
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6882
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6889
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6896
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6904
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6910
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6919
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6936
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6952
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6971
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6977
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6986
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7004
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7010
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7017
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7025
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7031
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7039
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7045
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7053
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7059
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7068
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7072
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7077
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7081
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7088
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7093
		{
			yyVAL.str = ""
		}
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7097
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1100:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7103
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7116
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7127
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7131
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7137
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7143
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7149
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7156
		{
			yyVAL.str = ""
		}
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7160
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7165
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7169
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7175
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7183
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7191
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7199
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7207
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7212
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7224
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7235
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7344
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7348
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7354
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7367
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7371
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7377
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7390
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7394
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7398
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7403
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7407
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7413
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7420
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7426
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7435
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7442
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7453
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7457
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7463
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7472
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7476
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7480
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7485
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7489
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7493
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7497
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7503
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7538
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7572
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7578
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7590
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7596
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7602
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7608
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7614
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7620
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7631
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7642
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7653
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7662
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7666
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7672
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7686
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7700
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7704
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7708
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7712
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7716
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7720
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7724
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7728
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7734
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7749
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7753
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7764
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7768
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7777
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7783
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7787
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7793
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7802
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7811
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7817
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7821
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7827
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7844
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7862
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7880
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7898
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7914
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7918
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7927
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7939
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7948
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7960
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7970
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7980
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7991
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8001
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8012
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8020
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8031
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8038
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8048
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8061
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8069
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8078
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8087
		{
			yyVAL.str = ""
		}
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8091
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8097
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8101
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8106
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8110
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8117
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8129
		{
			yyVAL.str = ""
		}
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8133
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1221:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8139
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8160
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8174
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8182
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8188
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8192
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8199
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8206
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8213
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8220
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8224
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8228
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8236
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8243
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8254
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8261
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8272
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8278
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8284
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8288
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8295
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8302
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8309
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8325
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8329
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8333
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8342
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8355
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8359
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8367
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8379
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8395
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8401
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8405
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8411
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8424
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8438
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8442
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8448
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8452
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8458
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8467
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8478
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8482
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8491
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8497
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8502
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8510
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8514
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8524
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8528
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8539
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8547
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8555
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8563
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8574
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8583
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8593
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8603
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8607
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8612
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8616
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8622
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8626
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8632
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8641
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8651
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8655
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8661
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8665
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8671
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8680
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8694
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8700
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8704
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8708
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8726
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8730
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8734
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8738
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8743
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8747
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8751
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8755
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8759
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8767
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8771
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8775
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8779
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8783
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8787
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8791
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8797
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8803
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8807
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8811
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8815
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8819
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8831
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8837
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8843
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8849
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8859
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8863
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8867
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8872
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8883
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8887
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8893
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8904
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8908
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8918
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8922
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8926
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8930
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8934
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8948
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8952
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8961
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8967
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8979
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8986
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8995
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9003
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9010
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9018
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9029
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9035
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9039
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9043
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9049
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9053
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9059
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9072
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9085
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9126
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9168
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9182
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9188
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9201
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9214
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9227
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9240
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9255
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9265
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9271
		{
			yyVAL.str = ""
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9275
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9285
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9291
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9297
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9319
		{
			yyVAL.str = ""
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9323
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9329
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9339
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9344
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9352
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9356
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9360
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9364
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9370
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9376
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9380
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9385
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9396
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9402
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9406
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9416
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9420
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9424
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9428
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9432
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9437
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9445
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9449
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9465
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9469
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9473
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9487
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9491
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9495
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9499
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9503
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9507
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9513
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9517
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9522
		{
			yyVAL.str = ""
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9526
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9532
		{
			yyVAL.str = ""
		}
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9536
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9542
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9559
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9566
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9573
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9580
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9587
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9596
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9602
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9608
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9612
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9616
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9620
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9624
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9629
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9636
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9640
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9644
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9674
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9679
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9683
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9699
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9717
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9721
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9725
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9733
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9741
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9745
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9753
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9759
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9763
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9767
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9771
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9775
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9779
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9783
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9787
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9791
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9795
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9837
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9841
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9845
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9858
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9866
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9870
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9884
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9888
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9892
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9896
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9900
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9904
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9908
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9912
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9925
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9931
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9940
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9949
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9960
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9970
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9980
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9989
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9999
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10009
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10019
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10028
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10042
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10047
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10051
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10057
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10061
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10067
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10076
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10088
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10105
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10148
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10160
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10189
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10204
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10221
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10236
		{
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10243
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10247
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10251
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10257
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10261
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10265
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10269
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10275
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10279
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10283
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10289
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10297
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10311
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10318
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10327
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10332
		{
			yyVAL.str = ","
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10336
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10341
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10345
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10350
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10357
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10383
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10395
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10407
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10418
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10440
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10450
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10460
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10471
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10482
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10493
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10504
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10515
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10526
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10537
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10548
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10559
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10570
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10581
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10592
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10603
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10614
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10625
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10649
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10658
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10667
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10676
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10685
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10696
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10705
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10715
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10724
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10733
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10742
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10751
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10763
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10787
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10799
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10822
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10858
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10871
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10896
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10905
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10913
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10921
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10934
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10943
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10965
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10974
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10986
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10996
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11006
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11015
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11026
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11035
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11045
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11054
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11063
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11077
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11087
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11106
		{
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11108
		{
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11162
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11166
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11170
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11176
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11181
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11185
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11195
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11201
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11205
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11212
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11216
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11220
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11229
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11233
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11237
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11242
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11246
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11252
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11256
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11260
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11264
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11268
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11272
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11276
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11280
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11284
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11288
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11296
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11300
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11304
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11308
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11312
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11316
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11320
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11324
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11328
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11332
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11342
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11348
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11352
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11359
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11363
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11367
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11377
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11381
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11385
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11389
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11393
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11397
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11403
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11407
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11411
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11415
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11421
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11434
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11439
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11445
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11449
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11462
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11467
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11471
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11475
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11479
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11483
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11490
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11494
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11498
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11502
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11509
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11520
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11525
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11606
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11619
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11632
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11645
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11658
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11712
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11739
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11781
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11817
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11853
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11882
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11902
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11922
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11942
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11958
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11971
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11984
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11997
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12010
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12022
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12046
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12058
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12070
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12082
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12094
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12106
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12118
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12130
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12156
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12169
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12182
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12197
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12205
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12214
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12224
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12247
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12252
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12258
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12265
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12269
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12274
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12278
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12284
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12290
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12297
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12304
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12313
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12320
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12327
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12336
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12344
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12350
		{
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12352
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12362
		{
			yyVAL.str = ""
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12366
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
