// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const HNSW = 57675
const ZONEMAP = 57676
const LEADING = 57677
const BOTH = 57678
const TRAILING = 57679
const UNKNOWN = 57680
const LISTS = 57681
const OP_TYPE = 57682
const REINDEX = 57683
const EF_SEARCH = 57684
const EF_CONSTRUCTION = 57685
const M = 57686
const QUANTIZATION = 57687
const ASYNC = 57688
const EXPIRE = 57689
const ACCOUNT = 57690
const ACCOUNTS = 57691
const UNLOCK = 57692
const DAY = 57693
const NEVER = 57694
const PUMP = 57695
const MYSQL_COMPATIBILITY_MODE = 57696
const UNIQUE_CHECK_ON_AUTOINCR = 57697
const MODIFY = 57698
const CHANGE = 57699
const SECOND = 57700
const ASCII = 57701
const COALESCE = 57702
const COLLATION = 57703
const HOUR = 57704
const MICROSECOND = 57705
const MINUTE = 57706
const MONTH = 57707
const QUARTER = 57708
const REPEAT = 57709
const REVERSE = 57710
const ROW_COUNT = 57711
const WEEK = 57712
const REVOKE = 57713
const FUNCTION = 57714
const PRIVILEGES = 57715
const TABLESPACE = 57716
const EXECUTE = 57717
const SUPER = 57718
const GRANT = 57719
const OPTION = 57720
const REFERENCES = 57721
const REPLICATION = 57722
const SLAVE = 57723
const CLIENT = 57724
const USAGE = 57725
const RELOAD = 57726
const FILE = 57727
const TEMPORARY = 57728
const ROUTINE = 57729
const EVENT = 57730
const SHUTDOWN = 57731
const NULLX = 57732
const AUTO_INCREMENT = 57733
const APPROXNUM = 57734
const SIGNED = 57735
const UNSIGNED = 57736
const ZEROFILL = 57737
const ENGINES = 57738
const LOW_CARDINALITY = 57739
const AUTOEXTEND_SIZE = 57740
const ADMIN_NAME = 57741
const RANDOM = 57742
const SUSPEND = 57743
const ATTRIBUTE = 57744
const HISTORY = 57745
const REUSE = 57746
const CURRENT = 57747
const OPTIONAL = 57748
const FAILED_LOGIN_ATTEMPTS = 57749
const PASSWORD_LOCK_TIME = 57750
const UNBOUNDED = 57751
const SECONDARY = 57752
const RESTRICTED = 57753
const USER = 57754
const IDENTIFIED = 57755
const CIPHER = 57756
const ISSUER = 57757
const X509 = 57758
const SUBJECT = 57759
const SAN = 57760
const REQUIRE = 57761
const SSL = 57762
const NONE = 57763
const PASSWORD = 57764
const SHARED = 57765
const EXCLUSIVE = 57766
const MAX_QUERIES_PER_HOUR = 57767
const MAX_UPDATES_PER_HOUR = 57768
const MAX_CONNECTIONS_PER_HOUR = 57769
const MAX_USER_CONNECTIONS = 57770
const FORMAT = 57771
const VERBOSE = 57772
const CONNECTION = 57773
const TRIGGERS = 57774
const PROFILES = 57775
const LOAD = 57776
const INLINE = 57777
const INFILE = 57778
const TERMINATED = 57779
const OPTIONALLY = 57780
const ENCLOSED = 57781
const ESCAPED = 57782
const STARTING = 57783
const LINES = 57784
const ROWS = 57785
const IMPORT = 57786
const DISCARD = 57787
const JSONTYPE = 57788
const MODUMP = 57789
const OVER = 57790
const PRECEDING = 57791
const FOLLOWING = 57792
const GROUPS = 57793
const DATABASES = 57794
const TABLES = 57795
const SEQUENCES = 57796
const EXTENDED = 57797
const FULL = 57798
const PROCESSLIST = 57799
const FIELDS = 57800
const COLUMNS = 57801
const OPEN = 57802
const ERRORS = 57803
const WARNINGS = 57804
const INDEXES = 57805
const SCHEMAS = 57806
const NODE = 57807
const LOCKS = 57808
const ROLES = 57809
const TABLE_NUMBER = 57810
const COLUMN_NUMBER = 57811
const TABLE_VALUES = 57812
const TABLE_SIZE = 57813
const NAMES = 57814
const GLOBAL = 57815
const PERSIST = 57816
const SESSION = 57817
const ISOLATION = 57818
const LEVEL = 57819
const READ = 57820
const WRITE = 57821
const ONLY = 57822
const REPEATABLE = 57823
const COMMITTED = 57824
const UNCOMMITTED = 57825
const SERIALIZABLE = 57826
const LOCAL = 57827
const EVENTS = 57828
const PLUGINS = 57829
const CURRENT_TIMESTAMP = 57830
const DATABASE = 57831
const CURRENT_TIME = 57832
const LOCALTIME = 57833
const LOCALTIMESTAMP = 57834
const UTC_DATE = 57835
const UTC_TIME = 57836
const UTC_TIMESTAMP = 57837
const REPLACE = 57838
const CONVERT = 57839
const SEPARATOR = 57840
const TIMESTAMPDIFF = 57841
const CURRENT_DATE = 57842
const CURRENT_USER = 57843
const CURRENT_ROLE = 57844
const SECOND_MICROSECOND = 57845
const MINUTE_MICROSECOND = 57846
const MINUTE_SECOND = 57847
const HOUR_MICROSECOND = 57848
const HOUR_SECOND = 57849
const HOUR_MINUTE = 57850
const DAY_MICROSECOND = 57851
const DAY_SECOND = 57852
const DAY_MINUTE = 57853
const DAY_HOUR = 57854
const YEAR_MONTH = 57855
const SQL_TSI_HOUR = 57856
const SQL_TSI_DAY = 57857
const SQL_TSI_WEEK = 57858
const SQL_TSI_MONTH = 57859
const SQL_TSI_QUARTER = 57860
const SQL_TSI_YEAR = 57861
const SQL_TSI_SECOND = 57862
const SQL_TSI_MINUTE = 57863
const RECURSIVE = 57864
const CONFIG = 57865
const DRAINER = 57866
const SOURCE = 57867
const STREAM = 57868
const HEADERS = 57869
const CONNECTOR = 57870
const CONNECTORS = 57871
const DAEMON = 57872
const PAUSE = 57873
const CANCEL = 57874
const TASK = 57875
const RESUME = 57876
const MATCH = 57877
const AGAINST = 57878
const BOOLEAN = 57879
const LANGUAGE = 57880
const WITH = 57881
const QUERY = 57882
const EXPANSION = 57883
const WITHOUT = 57884
const VALIDATION = 57885
const UPGRADE = 57886
const RETRY = 57887
const ADDDATE = 57888
const BIT_AND = 57889
const BIT_OR = 57890
const BIT_XOR = 57891
const CAST = 57892
const COUNT = 57893
const APPROX_COUNT = 57894
const APPROX_COUNT_DISTINCT = 57895
const SERIAL_EXTRACT = 57896
const APPROX_PERCENTILE = 57897
const CURDATE = 57898
const CURTIME = 57899
const DATE_ADD = 57900
const DATE_SUB = 57901
const EXTRACT = 57902
const GROUP_CONCAT = 57903
const MAX = 57904
const MID = 57905
const MIN = 57906
const NOW = 57907
const POSITION = 57908
const SESSION_USER = 57909
const STD = 57910
const STDDEV = 57911
const MEDIAN = 57912
const CLUSTER_CENTERS = 57913
const KMEANS = 57914
const STDDEV_POP = 57915
const STDDEV_SAMP = 57916
const SUBDATE = 57917
const SUBSTR = 57918
const SUBSTRING = 57919
const SUM = 57920
const SYSDATE = 57921
const SYSTEM_USER = 57922
const TRANSLATE = 57923
const TRIM = 57924
const VARIANCE = 57925
const VAR_POP = 57926
const VAR_SAMP = 57927
const AVG = 57928
const RANK = 57929
const ROW_NUMBER = 57930
const DENSE_RANK = 57931
const BIT_CAST = 57932
const BITMAP_BIT_POSITION = 57933
const BITMAP_BUCKET_NUMBER = 57934
const BITMAP_COUNT = 57935
const BITMAP_CONSTRUCT_AGG = 57936
const BITMAP_OR_AGG = 57937
const NEXTVAL = 57938
const SETVAL = 57939
const CURRVAL = 57940
const LASTVAL = 57941
const ARROW = 57942
const ROW = 57943
const OUTFILE = 57944
const HEADER = 57945
const MAX_FILE_SIZE = 57946
const FORCE_QUOTE = 57947
const PARALLEL = 57948
const STRICT = 57949
const UNUSED = 57950
const BINDINGS = 57951
const DO = 57952
const DECLARE = 57953
const LOOP = 57954
const WHILE = 57955
const LEAVE = 57956
const ITERATE = 57957
const UNTIL = 57958
const CALL = 57959
const PREV = 57960
const SLIDING = 57961
const FILL = 57962
const SPBEGIN = 57963
const BACKEND = 57964
const SERVERS = 57965
const HANDLER = 57966
const PERCENT = 57967
const SAMPLE = 57968
const MO_TS = 57969
const PITR = 57970
const RECOVERY_WINDOW = 57971
const INTERNAL = 57972
const CDC = 57973
const GROUPING = 57974
const SETS = 57975
const CUBE = 57976
const ROLLUP = 57977
const LOGSERVICE = 57978
const REPLICAS = 57979
const STORES = 57980
const SETTINGS = 57981
const KILL = 57982
const BACKUP = 57983
const FILESYSTEM = 57984
const PARALLELISM = 57985
const RESTORE = 57986
const QUERY_RESULT = 57987

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"ASYNC",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13006

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 812,
	22, 812,
	-2, 805,
	-1, 167,
	246, 1249,
	248, 1140,
	-2, 1195,
	-1, 194,
	44, 635,
	248, 635,
	275, 642,
	276, 642,
	480, 635,
	-2, 670,
	-1, 234,
	666, 2028,
	-2, 534,
	-1, 549,
	666, 2152,
	-2, 412,
	-1, 607,
	666, 2211,
	-2, 410,
	-1, 608,
	666, 2212,
	-2, 411,
	-1, 609,
	666, 2213,
	-2, 413,
	-1, 750,
	327, 181,
	452, 181,
	453, 181,
	-2, 1925,
	-1, 817,
	86, 1709,
	-2, 2088,
	-1, 818,
	86, 1728,
	-2, 2059,
	-1, 822,
	86, 1729,
	-2, 2087,
	-1, 856,
	86, 1636,
	-2, 2292,
	-1, 857,
	86, 1637,
	-2, 2291,
	-1, 858,
	86, 1638,
	-2, 2281,
	-1, 859,
	86, 2253,
	-2, 2274,
	-1, 860,
	86, 2254,
	-2, 2275,
	-1, 861,
	86, 2255,
	-2, 2283,
	-1, 862,
	86, 2256,
	-2, 2263,
	-1, 863,
	86, 2257,
	-2, 2272,
	-1, 864,
	86, 2258,
	-2, 2284,
	-1, 865,
	86, 2259,
	-2, 2285,
	-1, 866,
	86, 2260,
	-2, 2290,
	-1, 867,
	86, 2261,
	-2, 2295,
	-1, 868,
	86, 2262,
	-2, 2296,
	-1, 869,
	86, 1705,
	-2, 2126,
	-1, 870,
	86, 1706,
	-2, 1909,
	-1, 871,
	86, 1707,
	-2, 2135,
	-1, 872,
	86, 1708,
	-2, 1918,
	-1, 874,
	86, 1711,
	-2, 1926,
	-1, 876,
	86, 1713,
	-2, 2159,
	-1, 878,
	86, 1716,
	-2, 1947,
	-1, 880,
	86, 1718,
	-2, 2171,
	-1, 881,
	86, 1719,
	-2, 2170,
	-1, 882,
	86, 1720,
	-2, 1994,
	-1, 883,
	86, 1721,
	-2, 2083,
	-1, 886,
	86, 1724,
	-2, 2182,
	-1, 888,
	86, 1726,
	-2, 2185,
	-1, 889,
	86, 1727,
	-2, 2187,
	-1, 890,
	86, 1730,
	-2, 2195,
	-1, 891,
	86, 1731,
	-2, 2068,
	-1, 892,
	86, 1732,
	-2, 2113,
	-1, 893,
	86, 1733,
	-2, 2078,
	-1, 894,
	86, 1734,
	-2, 2103,
	-1, 905,
	86, 1614,
	-2, 2286,
	-1, 906,
	86, 1615,
	-2, 2287,
	-1, 907,
	86, 1616,
	-2, 2288,
	-1, 1012,
	475, 670,
	476, 670,
	-2, 636,
	-1, 1063,
	128, 1909,
	139, 1909,
	159, 1909,
	-2, 1882,
	-1, 1184,
	22, 839,
	-2, 788,
	-1, 1294,
	11, 812,
	22, 812,
	-2, 1491,
	-1, 1378,
	22, 839,
	-2, 788,
	-1, 1737,
	86, 1781,
	-2, 2085,
	-1, 1738,
	86, 1782,
	-2, 2086,
	-1, 1913,
	87, 1012,
	-2, 1018,
	-1, 2368,
	111, 1187,
	155, 1187,
	195, 1187,
	198, 1187,
	288, 1187,
	-2, 1180,
	-1, 2533,
	11, 812,
	22, 812,
	-2, 953,
	-1, 2567,
	87, 1868,
	160, 1868,
	-2, 2070,
	-1, 2568,
	87, 1868,
	160, 1868,
	-2, 2069,
	-1, 2569,
	87, 1844,
	160, 1844,
	-2, 2056,
	-1, 2570,
	87, 1845,
	160, 1845,
	-2, 2061,
	-1, 2571,
	87, 1846,
	160, 1846,
	-2, 1982,
	-1, 2572,
	87, 1847,
	160, 1847,
	-2, 1975,
	-1, 2573,
	87, 1848,
	160, 1848,
	-2, 1899,
	-1, 2574,
	87, 1849,
	160, 1849,
	-2, 2058,
	-1, 2575,
	87, 1850,
	160, 1850,
	-2, 1980,
	-1, 2576,
	87, 1851,
	160, 1851,
	-2, 1974,
	-1, 2577,
	87, 1852,
	160, 1852,
	-2, 1962,
	-1, 2578,
	87, 1868,
	160, 1868,
	-2, 1963,
	-1, 2579,
	87, 1868,
	160, 1868,
	-2, 1964,
	-1, 2581,
	87, 1857,
	160, 1857,
	-2, 2103,
	-1, 2582,
	87, 1834,
	160, 1834,
	-2, 2088,
	-1, 2583,
	87, 1866,
	160, 1866,
	-2, 2059,
	-1, 2584,
	87, 1866,
	160, 1866,
	-2, 2087,
	-1, 2585,
	87, 1866,
	160, 1866,
	-2, 1927,
	-1, 2586,
	87, 1864,
	160, 1864,
	-2, 2078,
	-1, 2587,
	87, 1861,
	160, 1861,
	-2, 1952,
	-1, 2588,
	86, 1815,
	87, 1815,
	160, 1815,
	410, 1815,
	411, 1815,
	412, 1815,
	-2, 1898,
	-1, 2589,
	86, 1816,
	87, 1816,
	160, 1816,
	410, 1816,
	411, 1816,
	412, 1816,
	-2, 1900,
	-1, 2590,
	86, 1817,
	87, 1817,
	160, 1817,
	410, 1817,
	411, 1817,
	412, 1817,
	-2, 2131,
	-1, 2591,
	86, 1819,
	87, 1819,
	160, 1819,
	410, 1819,
	411, 1819,
	412, 1819,
	-2, 2060,
	-1, 2592,
	86, 1821,
	87, 1821,
	160, 1821,
	410, 1821,
	411, 1821,
	412, 1821,
	-2, 2038,
	-1, 2593,
	86, 1823,
	87, 1823,
	160, 1823,
	410, 1823,
	411, 1823,
	412, 1823,
	-2, 1981,
	-1, 2594,
	86, 1825,
	87, 1825,
	160, 1825,
	410, 1825,
	411, 1825,
	412, 1825,
	-2, 1958,
	-1, 2595,
	86, 1826,
	87, 1826,
	160, 1826,
	410, 1826,
	411, 1826,
	412, 1826,
	-2, 1959,
	-1, 2596,
	86, 1828,
	87, 1828,
	160, 1828,
	410, 1828,
	411, 1828,
	412, 1828,
	-2, 1897,
	-1, 2597,
	87, 1871,
	160, 1871,
	410, 1871,
	411, 1871,
	412, 1871,
	-2, 1932,
	-1, 2598,
	87, 1871,
	160, 1871,
	410, 1871,
	411, 1871,
	412, 1871,
	-2, 1948,
	-1, 2599,
	87, 1874,
	160, 1874,
	410, 1874,
	411, 1874,
	412, 1874,
	-2, 1928,
	-1, 2600,
	87, 1874,
	160, 1874,
	410, 1874,
	411, 1874,
	412, 1874,
	-2, 1997,
	-1, 2601,
	87, 1871,
	160, 1871,
	410, 1871,
	411, 1871,
	412, 1871,
	-2, 2020,
	-1, 2824,
	111, 1187,
	155, 1187,
	195, 1187,
	198, 1187,
	288, 1187,
	-2, 1181,
	-1, 2842,
	84, 732,
	160, 732,
	-2, 1365,
	-1, 3273,
	198, 1187,
	312, 1454,
	-2, 1426,
	-1, 3463,
	111, 1187,
	155, 1187,
	195, 1187,
	198, 1187,
	-2, 1305,
	-1, 3465,
	111, 1187,
	155, 1187,
	195, 1187,
	198, 1187,
	-2, 1305,
	-1, 3477,
	84, 732,
	160, 732,
	-2, 1365,
	-1, 3498,
	198, 1187,
	312, 1454,
	-2, 1427,
	-1, 3653,
	111, 1187,
	155, 1187,
	195, 1187,
	198, 1187,
	-2, 1306,
	-1, 3681,
	87, 1267,
	160, 1267,
	-2, 1187,
	-1, 3829,
	87, 1267,
	160, 1267,
	-2, 1187,
	-1, 4002,
	87, 1271,
	160, 1271,
	-2, 1187,
	-1, 4058,
	87, 1272,
	160, 1272,
	-2, 1187,
}

const yyPrivate = 57344

const yyLast = 55779

var yyAct = [...]int{
	784, 760, 4112, 786, 4080, 2873, 223, 4104, 1639, 4006,
	2001, 1717, 4012, 3483, 4013, 3293, 3583, 3898, 4005, 3829,
	3259, 3876, 3921, 2604, 769, 3956, 3709, 3370, 3807, 3512,
	762, 2867, 3774, 3867, 1330, 3371, 1777, 3828, 3899, 1713,
	1483, 3743, 3641, 1062, 2786, 814, 650, 1185, 2870, 3798,
	3877, 3587, 3879, 1489, 3445, 1946, 3578, 3450, 2418, 3499,
	3655, 3662, 1779, 668, 2845, 674, 674, 1764, 3650, 1179,
	1720, 674, 692, 701, 2565, 37, 701, 1551, 3268, 3230,
	3368, 3216, 2986, 208, 2099, 2985, 2987, 3623, 3219, 3437,
	2112, 758, 3466, 1782, 2982, 3192, 2962, 2896, 3288, 3270,
	3277, 2135, 3413, 3468, 2061, 2693, 3055, 2563, 2167, 2209,
	2421, 3333, 68, 2812, 1961, 1544, 3199, 2527, 3015, 3197,
	3276, 3193, 2379, 3195, 2323, 2973, 2658, 709, 2096, 3194,
	713, 3239, 1175, 2347, 2825, 3163, 757, 2322, 2205, 752,
	1617, 3103, 2451, 2636, 1458, 2193, 1624, 698, 141, 3029,
	2176, 2175, 2168, 942, 2618, 1628, 1875, 2140, 2092, 2204,
	2528, 1448, 2511, 1629, 2065, 2062, 2801, 36, 2898, 1632,
	983, 2796, 1415, 2506, 2878, 1991, 2419, 2837, 2378, 219,
	8, 2368, 1778, 218, 7, 6, 1922, 2561, 2239, 2206,
	1711, 1123, 3190, 1716, 761, 667, 1560, 1591, 1056, 650,
	1529, 1523, 2359, 2414, 751, 1661, 2730, 1771, 2362, 1640,
	1751, 770, 1201, 1702, 2174, 1472, 2171, 2156, 1598, 1493,
	1643, 706, 1918, 223, 1528, 223, 1960, 1114, 1115, 2535,
	23, 1710, 1055, 2507, 674, 1525, 683, 1921, 1021, 982,
	909, 715, 1582, 1783, 649, 27, 716, 24, 1468, 1454,
	759, 1484, 209, 16, 25, 17, 10, 1094, 700, 959,
	201, 965, 1331, 1400, 670, 1376, 205, 1492, 980, 712,
	911, 2729, 1007, 912, 1262, 1263, 1264, 1261, 2213, 3886,
	3795, 14, 1262, 1263, 1264, 1261, 15, 1262, 1263, 1264,
	1261, 2766, 2766, 2766, 2537, 1111, 33, 3480, 3379, 3246,
	3072, 686, 3071, 2223, 1180, 973, 1110, 974, 1112, 3614,
	3453, 3363, 1181, 2681, 2624, 1071, 2622, 697, 2621, 2619,
	1888, 1601, 1605, 1106, 1107, 693, 207, 669, 2321, 679,
	675, 1527, 1089, 3854, 704, 1395, 1451, 1452, 1453, 1369,
	931, 929, 2605, 1041, 1654, 2327, 954, 1889, 1107, 753,
	3173, 1068, 1107, 695, 2331, 1398, 3156, 3158, 696, 3153,
	968, 3155, 964, 4092, 1506, 1882, 1391, 1180, 694, 1603,
	1070, 3576, 3051, 2758, 2756, 1262, 1263, 1264, 1261, 3049,
	2145, 206, 64, 197, 168, 3862, 3750, 8, 3744, 3579,
	3369, 7, 2190, 1105, 1262, 1263, 1264, 1261, 1325, 3881,
	198, 2170, 910, 3132, 1090, 2162, 2459, 189, 4118, 3875,
	921, 199, 4089, 3758, 4041, 206, 3593, 2760, 945, 3814,
	3628, 3624, 1260, 3467, 206, 206, 64, 197, 168, 206,
	140, 2675, 1224, 2369, 2370, 2667, 1638, 3873, 3782, 2210,
	1406, 930, 928, 1647, 2711, 126, 753, 3932, 1401, 3756,
	206, 1568, 2831, 3983, 202, 1405, 1404, 206, 64, 197,
	168, 1403, 931, 3815, 206, 64, 197, 168, 929, 1072,
	711, 206, 1066, 1644, 3130, 1067, 2221, 1423, 1652, 1084,
	1079, 1074, 1078, 1082, 206, 64, 197, 168, 202, 1440,
	1670, 1036, 1034, 970, 1035, 963, 1817, 1646, 202, 140,
	1651, 1407, 2829, 926, 967, 966, 2980, 1087, 1891, 2363,
	206, 1077, 2785, 206, 64, 197, 168, 206, 206, 922,
	3075, 948, 2781, 202, 2555, 955, 1259, 2556, 1954, 1196,
	202, 148, 149, 2109, 150, 151, 1659, 202, 3157, 152,
	3784, 3154, 153, 3022, 202, 962, 1530, 900, 1532, 899,
	901, 902, 2832, 903, 904, 1502, 2075, 202, 1503, 3063,
	3023, 3024, 1085, 1684, 972, 2798, 1656, 140, 2637, 961,
	1030, 1088, 1975, 960, 2542, 2799, 1719, 2541, 1193, 947,
	2543, 1257, 1042, 202, 1065, 953, 202, 2783, 2076, 2077,
	1658, 202, 206, 64, 197, 168, 1480, 2778, 1488, 1075,
	1900, 1901, 1487, 1490, 1491, 167, 195, 204, 196, 124,
	1038, 1490, 1491, 951, 1604, 1602, 3980, 1422, 1064, 3884,
	3970, 3263, 3884, 1086, 2797, 3883, 3969, 2761, 194, 188,
	187, 2782, 3603, 3883, 3261, 70, 4016, 4017, 3882, 3968,
	1703, 2779, 3882, 1707, 1252, 2310, 1505, 1952, 4040, 3976,
	3958, 971, 2662, 4084, 4085, 3868, 3869, 3870, 3871, 3865,
	3372, 3056, 2225, 1076, 3958, 202, 3057, 1706, 3058, 3961,
	3747, 3372, 674, 674, 1040, 1190, 3895, 952, 1204, 1207,
	1723, 2917, 3386, 674, 1189, 1199, 2087, 3438, 2804, 2083,
	1698, 2093, 3633, 2217, 971, 3443, 190, 191, 192, 3985,
	3986, 2494, 2358, 701, 701, 2974, 674, 3212, 167, 195,
	204, 196, 2153, 3981, 3982, 2788, 3989, 3988, 3987, 3990,
	3991, 3524, 2501, 1117, 3978, 3786, 3787, 3093, 3091, 1611,
	1610, 194, 1254, 1204, 1207, 200, 1255, 1256, 2222, 2672,
	1083, 193, 747, 2457, 1227, 749, 1188, 3577, 2759, 1239,
	748, 1039, 1240, 3050, 969, 2968, 136, 2496, 1516, 1708,
	193, 3791, 137, 698, 698, 698, 1394, 2497, 2498, 1302,
	1424, 3206, 2784, 3630, 3417, 3539, 1080, 4049, 3602, 1081,
	1242, 3240, 2780, 1705, 3885, 3794, 3604, 3217, 1953, 2558,
	2504, 1249, 666, 958, 2107, 2108, 3389, 3097, 2765, 4015,
	1478, 3265, 1181, 1071, 1181, 1722, 1721, 924, 1182, 1181,
	729, 728, 735, 725, 3228, 1504, 1189, 3914, 3737, 138,
	2328, 2838, 1890, 732, 733, 3073, 734, 738, 2211, 2964,
	719, 2211, 63, 3070, 3594, 2211, 3819, 3811, 2244, 1068,
	743, 1219, 3291, 3909, 3292, 2489, 1334, 703, 3210, 1107,
	702, 925, 1107, 2978, 1107, 2212, 1107, 2365, 1070, 1107,
	3529, 1107, 3536, 699, 1250, 1251, 3289, 3290, 1237, 3164,
	3900, 3916, 1181, 3813, 3484, 2224, 1071, 3922, 1335, 1091,
	3260, 65, 1073, 1206, 1205, 2872, 747, 3204, 2620, 749,
	1037, 1198, 3491, 946, 748, 699, 944, 1467, 1195, 3780,
	1704, 3295, 699, 3738, 3207, 3208, 3218, 1606, 3620, 2228,
	2230, 2231, 1068, 3984, 2342, 3425, 146, 203, 3180, 147,
	3209, 2492, 1208, 3540, 169, 65, 1397, 3757, 1399, 61,
	910, 1070, 1238, 697, 697, 697, 1177, 3428, 1206, 1205,
	1411, 693, 693, 693, 1414, 2757, 1184, 710, 1420, 668,
	1183, 699, 1653, 1067, 1216, 3629, 1374, 65, 169, 1379,
	3894, 1212, 1213, 3700, 65, 1402, 2676, 169, 169, 695,
	695, 695, 169, 1296, 696, 696, 696, 4124, 2469, 1803,
	1218, 3785, 983, 1303, 694, 694, 694, 2468, 3590, 1192,
	1194, 1197, 927, 169, 3218, 139, 45, 1892, 3820, 3812,
	169, 4107, 62, 1210, 2810, 3427, 5, 169, 2558, 1241,
	1490, 1491, 2803, 65, 169, 1298, 1299, 1300, 1301, 1693,
	203, 1540, 1694, 1490, 1491, 143, 144, 169, 2975, 145,
	699, 3213, 1479, 3266, 720, 722, 721, 674, 2094, 1539,
	1518, 3766, 1217, 3767, 674, 727, 2500, 1486, 650, 650,
	3788, 1244, 3094, 169, 1245, 2424, 169, 731, 650, 650,
	169, 169, 1555, 1555, 746, 674, 3695, 2490, 2491, 2807,
	2808, 724, 3923, 3634, 3977, 714, 3799, 2918, 1465, 2919,
	2920, 1464, 1247, 1463, 2806, 3269, 701, 1583, 668, 1346,
	1347, 2086, 65, 1594, 2084, 1699, 3294, 3769, 3205, 1482,
	1481, 1553, 1553, 2868, 2869, 3833, 2872, 3689, 223, 2217,
	1176, 1729, 1732, 1733, 1562, 3152, 4004, 650, 1417, 1418,
	2460, 973, 1730, 974, 1427, 1428, 1429, 1430, 1431, 3768,
	1433, 2437, 2946, 3469, 1460, 169, 1439, 2417, 2440, 2417,
	1557, 3574, 4108, 1416, 1421, 3710, 3711, 3712, 3716, 3714,
	3715, 3717, 3713, 1799, 1517, 3034, 3035, 2229, 711, 3375,
	1796, 1293, 3289, 3290, 1798, 1795, 1797, 1801, 1802, 1636,
	1243, 3955, 1800, 1526, 1641, 1549, 1550, 1378, 3285, 1380,
	3168, 1650, 2816, 2820, 2821, 2822, 2817, 2819, 2818, 726,
	730, 736, 2434, 737, 739, 2439, 2423, 740, 741, 742,
	1224, 2425, 744, 745, 2343, 3017, 3019, 2668, 2547, 1248,
	1682, 2455, 1426, 2214, 2082, 1031, 1474, 1475, 1469, 1473,
	1473, 1473, 2059, 1413, 1555, 1432, 1555, 1189, 2427, 2771,
	3324, 1660, 1894, 3096, 1246, 1438, 1437, 1457, 3832, 1436,
	1435, 2438, 1043, 1469, 1469, 1466, 1534, 1536, 1450, 705,
	1447, 1645, 1476, 3431, 3702, 2426, 1547, 1548, 1657, 3226,
	1495, 1496, 975, 1498, 1499, 1615, 1500, 1618, 1619, 2915,
	2240, 698, 1507, 1508, 698, 698, 4105, 4106, 1612, 1620,
	1621, 3286, 1494, 1584, 3414, 1497, 2652, 1692, 1071, 1718,
	1223, 2775, 1626, 1627, 1555, 1071, 1445, 1538, 4003, 1033,
	2226, 2227, 1032, 3105, 3104, 3696, 3697, 977, 978, 979,
	1649, 1189, 1781, 1425, 2335, 1607, 1806, 1807, 1808, 1809,
	1810, 1811, 1804, 1805, 1812, 1813, 1830, 1816, 1631, 2937,
	2938, 1635, 679, 1765, 1563, 1831, 1634, 1569, 3766, 1575,
	3767, 2337, 2336, 1410, 1581, 936, 1677, 1678, 1838, 1903,
	1840, 1595, 1841, 1842, 1843, 1904, 3761, 943, 723, 1731,
	1596, 3762, 3691, 2428, 1715, 3878, 3690, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 3018,
	972, 1408, 1409, 1762, 1763, 932, 3612, 2947, 2949, 2950,
	2951, 2948, 3227, 1189, 3769, 3376, 940, 3170, 1902, 1893,
	2334, 938, 937, 1896, 1734, 1898, 2433, 2481, 933, 1696,
	2431, 1815, 3663, 1905, 1907, 1873, 1908, 1712, 1910, 1911,
	4126, 1186, 2278, 1583, 1668, 2277, 3768, 1671, 1919, 1555,
	1924, 1925, 1839, 1927, 1518, 674, 3965, 1663, 1260, 1681,
	674, 697, 2843, 1555, 697, 697, 1700, 983, 1680, 693,
	1947, 1031, 693, 693, 936, 1884, 2936, 1691, 2772, 1690,
	1044, 1895, 1876, 1555, 1709, 1688, 1686, 1689, 1685, 1518,
	1031, 1714, 4120, 1459, 692, 2397, 1829, 695, 939, 3245,
	695, 695, 696, 4114, 1221, 696, 696, 1232, 3287, 2525,
	1234, 3330, 694, 1687, 1974, 694, 694, 1669, 1260, 1753,
	1672, 1673, 1186, 1981, 1981, 935, 1518, 2361, 1518, 1518,
	938, 937, 674, 674, 2454, 2048, 1919, 2052, 1235, 1459,
	1555, 2056, 2057, 1222, 2558, 3326, 2072, 4102, 650, 2350,
	1820, 1821, 1822, 1224, 2639, 1033, 3434, 3388, 1032, 2315,
	1760, 1761, 650, 1836, 1555, 2219, 1837, 2667, 1928, 3299,
	4060, 1978, 2351, 2352, 1033, 2844, 4115, 1032, 3297, 3162,
	4027, 1222, 1926, 1850, 1851, 4024, 1262, 1263, 1264, 1261,
	1260, 674, 1919, 1555, 2003, 2117, 3160, 674, 674, 674,
	709, 709, 2526, 1872, 1879, 2844, 3037, 2127, 2128, 2129,
	2130, 2790, 1844, 2762, 2136, 2657, 1915, 1916, 1917, 1948,
	4061, 223, 2050, 2110, 223, 223, 1228, 223, 1930, 1931,
	1932, 1933, 2396, 2644, 2210, 2526, 1874, 2526, 2134, 4018,
	1984, 1966, 1923, 4061, 2074, 2360, 1262, 1263, 1264, 1261,
	2410, 1880, 1230, 4028, 2424, 2427, 1939, 1973, 4025, 1701,
	1976, 1977, 2424, 2427, 1233, 1236, 2320, 1830, 1830, 2178,
	2079, 1375, 2081, 2314, 2313, 754, 1955, 2285, 3762, 1830,
	1830, 3330, 3763, 2100, 2101, 1914, 2195, 2119, 2120, 2121,
	1229, 2088, 3128, 1262, 1263, 1264, 1261, 1983, 2102, 2103,
	1943, 4000, 2095, 1469, 2144, 2201, 1944, 2147, 2148, 2105,
	2150, 2253, 2254, 1967, 2058, 3949, 3948, 1473, 1947, 3942,
	3917, 2189, 1555, 2208, 2116, 1972, 1949, 1950, 3905, 1473,
	1963, 1446, 1957, 2055, 1958, 1959, 3852, 1768, 1541, 2250,
	2180, 1262, 1263, 1264, 1261, 1645, 2073, 914, 915, 916,
	917, 1968, 1969, 3851, 1985, 1986, 1980, 1982, 2049, 4133,
	1962, 4116, 1964, 1965, 3846, 3845, 3480, 1231, 3041, 2846,
	698, 1979, 2670, 2202, 4001, 2060, 1971, 2054, 2078, 1071,
	2080, 2132, 1071, 3844, 3843, 2185, 1712, 2252, 1260, 1260,
	2428, 1071, 2254, 2219, 2089, 2423, 2417, 2422, 2428, 2420,
	2425, 3906, 1224, 2423, 2417, 2422, 2669, 2420, 2425, 3853,
	2701, 2412, 2661, 3442, 2114, 1068, 2404, 2173, 1102, 1103,
	1104, 2122, 2123, 2273, 2115, 3823, 2383, 1068, 1566, 2173,
	914, 915, 916, 917, 1070, 2258, 2141, 2254, 2254, 1167,
	1163, 1164, 1165, 1166, 2200, 2706, 1070, 2705, 2704, 2702,
	2139, 3822, 1101, 3797, 2426, 1098, 2254, 2254, 3545, 3493,
	2125, 2158, 2426, 1665, 1311, 1209, 1845, 1846, 1847, 1848,
	2237, 2238, 1852, 1853, 1854, 1855, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1071, 1947, 2191,
	2179, 1173, 3459, 3406, 2188, 2186, 1108, 1109, 2219, 919,
	3727, 1113, 1168, 3543, 1293, 2104, 3402, 3307, 2199, 1277,
	2325, 2326, 3012, 2329, 3250, 2748, 2332, 2703, 3910, 2736,
	2728, 2197, 2683, 1068, 2219, 934, 2254, 2338, 2665, 3088,
	4127, 2558, 3494, 752, 2203, 4088, 674, 674, 674, 2653,
	697, 2646, 1070, 2308, 2619, 2216, 2641, 3361, 693, 1543,
	3664, 674, 674, 674, 674, 2256, 2633, 2631, 2629, 2452,
	2627, 1470, 3911, 3472, 2380, 3460, 3407, 2232, 2382, 2142,
	2241, 3887, 1545, 2384, 2385, 2386, 695, 2389, 1518, 3403,
	3308, 696, 919, 1546, 2233, 2526, 2234, 1753, 2383, 2316,
	2292, 694, 1260, 1260, 3665, 1260, 2198, 2690, 2246, 2613,
	2291, 2383, 1511, 1512, 1518, 1514, 1515, 3473, 1519, 1520,
	1521, 2276, 2642, 2267, 2647, 1095, 1096, 1097, 1100, 2642,
	1099, 2446, 787, 797, 3796, 2266, 2265, 2235, 2236, 2634,
	2632, 2628, 788, 2628, 789, 793, 796, 792, 790, 791,
	2255, 2383, 1570, 1571, 1572, 1573, 1574, 1501, 1576, 1577,
	1578, 1579, 1580, 1542, 2218, 1674, 1586, 1587, 1588, 1589,
	3470, 3754, 2315, 1260, 2707, 2708, 2401, 2453, 1819, 1818,
	2403, 3693, 2405, 1260, 3692, 2286, 2287, 941, 2289, 674,
	1981, 1772, 1471, 3678, 1260, 2296, 1260, 794, 2530, 2530,
	2072, 2530, 3241, 3637, 3452, 2309, 2311, 2312, 1260, 1260,
	3331, 1819, 1818, 3322, 3471, 1455, 2317, 3314, 3309, 1456,
	3221, 650, 650, 2254, 2971, 2970, 2814, 2767, 2406, 1189,
	795, 2680, 2645, 2391, 2392, 1555, 674, 2219, 1675, 1262,
	1263, 1264, 1261, 2394, 2395, 2549, 2183, 2344, 2416, 674,
	3364, 2182, 3042, 1909, 2415, 1189, 2602, 668, 2181, 1334,
	1455, 1442, 1441, 1594, 1456, 2072, 1191, 3967, 2609, 1772,
	2611, 2247, 1261, 223, 2553, 1599, 3705, 2142, 1264, 1261,
	2409, 2458, 3704, 3242, 2461, 2462, 2463, 2464, 2465, 2466,
	2467, 1335, 1856, 2470, 2471, 2472, 2473, 2474, 2475, 2476,
	2477, 2478, 2479, 2480, 2534, 2482, 2483, 2484, 2485, 2486,
	3059, 2487, 1071, 2649, 2390, 2907, 2532, 2566, 2536, 2538,
	1262, 1263, 1264, 1261, 2402, 1849, 2905, 3243, 1473, 2429,
	2430, 2663, 2435, 2884, 2208, 2882, 3684, 1759, 2544, 2560,
	2545, 1555, 2750, 1555, 2751, 1555, 3638, 3639, 1068, 4119,
	1189, 2398, 2813, 1756, 1758, 1755, 2614, 1757, 2682, 2550,
	2551, 1262, 1263, 1264, 1261, 2393, 4098, 1070, 1313, 2608,
	2399, 4097, 2623, 2400, 1262, 1263, 1264, 1261, 3446, 3827,
	4096, 1312, 2673, 3362, 1555, 1189, 4123, 2499, 4094, 2714,
	2505, 1276, 1275, 1285, 1286, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1277, 3631, 2721, 2539, 2606, 4093, 4031, 1555,
	2280, 3999, 2677, 3675, 1262, 1263, 1264, 1261, 3998, 1534,
	1536, 3440, 1599, 1553, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1277, 2554, 1276, 1275, 1285, 1286, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1277, 2070, 2557, 2958, 1553, 3912,
	2787, 4122, 2603, 3848, 2694, 2956, 2694, 3836, 2769, 2770,
	2607, 2709, 2773, 3632, 2725, 2726, 3826, 1276, 1275, 1285,
	1286, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1277, 2954,
	1189, 3441, 3816, 2943, 1189, 3745, 2722, 2698, 1834, 2720,
	3667, 1555, 2679, 3666, 1518, 3485, 1262, 1263, 1264, 1261,
	2052, 3474, 2723, 1835, 2674, 2692, 4117, 2957, 2842, 2688,
	673, 673, 3439, 2712, 2848, 2955, 681, 2849, 1262, 1263,
	1264, 1261, 3310, 2666, 3211, 2655, 2664, 2615, 3084, 3054,
	2754, 2671, 3053, 2941, 1712, 2859, 2940, 2939, 2931, 2953,
	2925, 1265, 2791, 2942, 2924, 1189, 2566, 3451, 2923, 1295,
	2922, 2763, 2635, 2881, 2684, 2685, 2546, 2319, 1305, 2826,
	1189, 1189, 1189, 1981, 2161, 2160, 1189, 2710, 2891, 2892,
	2893, 2894, 1189, 2901, 2700, 2902, 2903, 2830, 2904, 2159,
	2906, 2839, 2155, 2154, 1314, 2827, 1262, 1263, 1264, 1261,
	2111, 2901, 1280, 1281, 1282, 1283, 1284, 1277, 1899, 1897,
	1666, 2003, 1393, 2530, 3198, 1171, 2860, 2876, 2811, 1262,
	1263, 1264, 1261, 2862, 1071, 3789, 3790, 2959, 1600, 4099,
	3584, 2687, 2876, 2887, 2888, 4086, 4048, 650, 2890, 3121,
	747, 2800, 4047, 749, 2897, 2052, 4044, 3973, 748, 1189,
	2072, 2072, 2072, 2072, 2072, 2072, 2793, 3972, 2795, 2850,
	3775, 3953, 3897, 2118, 2659, 2660, 1189, 2072, 3642, 3891,
	2530, 2879, 3872, 3863, 1170, 2879, 2875, 2965, 2852, 3107,
	3840, 2792, 3835, 2855, 2251, 3834, 3020, 2809, 1555, 681,
	3793, 2886, 3779, 2833, 1923, 3777, 2841, 3746, 3686, 674,
	674, 8, 3120, 2731, 2732, 7, 3646, 2847, 3635, 2737,
	3617, 2988, 1276, 1275, 1285, 1286, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1277, 3615, 2861, 2864, 3613, 2988, 1262,
	1263, 1264, 1261, 3610, 2880, 2877, 2913, 2914, 3607, 2883,
	1262, 1263, 1264, 1261, 3606, 3582, 2889, 3580, 3008, 3553,
	3550, 2929, 2930, 2269, 3547, 2963, 223, 1262, 1263, 1264,
	1261, 223, 1262, 1263, 1264, 1261, 3436, 2976, 3422, 2921,
	3415, 3399, 3397, 2933, 3392, 3342, 3320, 2967, 3319, 3317,
	2851, 3038, 3316, 1830, 3311, 1830, 3305, 3304, 3069, 2856,
	2857, 1275, 1285, 1286, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1277, 3083, 3222, 3185, 2966, 2972, 3021, 1555, 3184,
	2858, 3090, 3183, 4009, 3174, 2989, 2990, 2991, 2992, 2993,
	2994, 3673, 3172, 2268, 3169, 3005, 1537, 3167, 2874, 3010,
	3011, 3009, 2324, 3098, 3608, 2969, 3095, 3074, 3052, 3043,
	1262, 1263, 1264, 1261, 3047, 3027, 2952, 3025, 3028, 1619,
	1262, 1263, 1264, 1261, 2944, 2261, 2934, 3064, 2932, 1620,
	1621, 1262, 1263, 1264, 1261, 1876, 2928, 2927, 3596, 3076,
	3068, 1626, 1627, 4125, 2926, 1276, 1275, 1285, 1286, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1277, 2776, 1593, 3595,
	2768, 2764, 3066, 2656, 1071, 1262, 1263, 1264, 1261, 2339,
	3533, 2333, 1631, 3077, 2330, 1635, 1071, 855, 854, 4074,
	1634, 2164, 3045, 3171, 3044, 2157, 1262, 1263, 1264, 1261,
	3175, 3176, 3177, 3179, 3092, 3181, 3182, 1262, 1263, 1264,
	1261, 1887, 3060, 3065, 1886, 1189, 3067, 3062, 3394, 3087,
	3079, 3201, 1667, 3080, 1342, 3078, 3086, 1338, 1337, 1174,
	923, 3215, 1262, 1263, 1264, 1261, 674, 3929, 3925, 3099,
	3771, 3770, 3759, 3100, 2249, 1262, 1263, 1264, 1261, 3231,
	1189, 3755, 3609, 674, 3591, 1189, 1189, 3563, 3106, 3465,
	3119, 3464, 3110, 3111, 2072, 2380, 3463, 3249, 3433, 3115,
	3116, 3411, 3113, 3409, 3408, 3405, 3161, 2876, 3404, 3398,
	3112, 3396, 3114, 3377, 3367, 3366, 3187, 2446, 3353, 3352,
	3225, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1266, 3275,
	3251, 3278, 3188, 3278, 3278, 2826, 3159, 206, 1189, 197,
	168, 3166, 2876, 3126, 3117, 3109, 3108, 2876, 2876, 3102,
	3036, 3165, 1262, 1263, 1264, 1261, 3300, 3234, 2789, 2630,
	3296, 2626, 3238, 2625, 1555, 1555, 1724, 1725, 1726, 1727,
	1728, 2297, 3262, 3264, 3186, 3253, 2290, 3203, 1285, 1286,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1277, 2284, 3258,
	2283, 2282, 1071, 2281, 1071, 2279, 2275, 2274, 3247, 1071,
	2876, 3273, 2272, 1553, 1553, 2263, 2260, 2259, 1769, 3224,
	202, 674, 1773, 1774, 1775, 1776, 2163, 3248, 3201, 1870,
	1869, 1868, 1814, 3244, 1833, 1832, 1071, 1823, 1068, 3274,
	1824, 1518, 1567, 206, 2052, 2052, 3283, 673, 1178, 2416,
	1565, 3301, 3302, 3257, 4073, 2415, 3252, 1070, 1187, 3133,
	3134, 3254, 3255, 3279, 3280, 3135, 3136, 3137, 3138, 3284,
	3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148,
	3149, 1215, 3233, 4030, 3298, 3947, 1332, 3236, 3237, 3924,
	3858, 3855, 3842, 1877, 3837, 3740, 3739, 3721, 1189, 3703,
	3699, 3677, 2714, 1288, 3661, 1292, 3564, 3561, 3531, 3530,
	3365, 3306, 3941, 3124, 799, 142, 202, 3281, 3527, 3526,
	142, 1289, 1291, 1287, 3492, 1290, 1276, 1275, 1285, 1286,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1277, 3327, 3328,
	1262, 1263, 1264, 1261, 3313, 3315, 3312, 3489, 4066, 3123,
	3487, 3321, 3454, 3118, 1614, 3325, 1625, 674, 3318, 1616,
	2566, 3127, 1630, 3338, 1633, 3339, 3939, 3122, 3256, 1622,
	1449, 2999, 2960, 2885, 2835, 1951, 1262, 1263, 1264, 1261,
	2747, 2834, 2828, 680, 2794, 2749, 142, 2640, 3349, 3350,
	3351, 3329, 2548, 3346, 1262, 1263, 1264, 1261, 2488, 2381,
	2353, 1970, 2318, 1754, 202, 3355, 2124, 1262, 1263, 1264,
	1261, 1913, 2508, 3345, 1883, 1276, 1275, 1285, 1286, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1277, 1697, 1648, 1623,
	2136, 3419, 3378, 1392, 3421, 1377, 1373, 3007, 3423, 1372,
	1371, 1370, 2694, 3429, 3380, 1369, 3381, 1368, 1367, 2515,
	2519, 2520, 2521, 2516, 2524, 2517, 2522, 3385, 3400, 2518,
	1877, 2523, 1366, 1365, 1364, 1877, 1877, 3430, 2686, 1363,
	1362, 1361, 1360, 3390, 1359, 1358, 3384, 1357, 674, 2052,
	4064, 2746, 1356, 3424, 1355, 3426, 1354, 1353, 1352, 3458,
	1351, 1350, 1276, 1275, 1285, 1286, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1277, 1349, 2530, 2072, 3477, 1262, 1263,
	1264, 1261, 1348, 1345, 1344, 2143, 3412, 1069, 2146, 3937,
	2745, 2149, 142, 1343, 2151, 3432, 2744, 1341, 3416, 1340,
	3495, 3418, 3435, 1189, 1339, 1336, 1329, 142, 1328, 142,
	1326, 1325, 3275, 1324, 1323, 1322, 1189, 1262, 1263, 1264,
	1261, 1321, 1320, 1262, 1263, 1264, 1261, 1319, 1189, 1318,
	3542, 1317, 1071, 1316, 1555, 1315, 1310, 1309, 3447, 1071,
	2743, 1308, 1307, 3449, 3479, 1306, 3682, 2742, 1226, 1172,
	2194, 3334, 3335, 3935, 3528, 674, 2388, 2052, 2367, 1214,
	4014, 1189, 3525, 3337, 3518, 3496, 2815, 1262, 1263, 1264,
	1261, 2559, 2166, 1553, 1262, 1263, 1264, 1261, 3535, 1225,
	3476, 3002, 1513, 3486, 2997, 3488, 3003, 3344, 3343, 1524,
	2897, 3482, 3475, 223, 3566, 2996, 3000, 3340, 3455, 3456,
	3457, 3001, 3567, 3006, 3461, 3462, 1189, 3557, 3554, 2741,
	1561, 3544, 3532, 2995, 3534, 3537, 3004, 3568, 2520, 2521,
	125, 67, 3478, 2988, 66, 3541, 3966, 3874, 2654, 2643,
	1443, 3481, 3220, 3549, 3548, 3546, 1262, 1263, 1264, 1261,
	3552, 3082, 3556, 2740, 2456, 3555, 3559, 3558, 3611, 3271,
	2739, 3272, 3565, 3538, 2243, 1941, 1942, 3356, 2248, 3619,
	2041, 3589, 1936, 1937, 1938, 1189, 2257, 2738, 2988, 1608,
	1262, 1263, 1264, 1261, 3551, 2909, 3575, 1262, 1263, 1264,
	1261, 2638, 2910, 2911, 2912, 1189, 1555, 1555, 3585, 676,
	677, 3231, 3586, 678, 1262, 1263, 1264, 1261, 3382, 3383,
	3616, 2678, 3618, 2264, 3654, 1662, 3654, 2659, 2660, 2340,
	1642, 2271, 2126, 1220, 3196, 3189, 2863, 2836, 1189, 3671,
	1189, 3643, 3648, 3649, 2408, 1553, 1765, 2876, 2376, 3674,
	1945, 3676, 4077, 2288, 1912, 3839, 3622, 1555, 2293, 2294,
	2295, 1819, 1818, 2298, 2299, 2300, 2301, 2302, 2303, 2304,
	2305, 2306, 2307, 3627, 3645, 674, 3625, 1189, 1189, 3636,
	3626, 1189, 1189, 3644, 3659, 3658, 1388, 1389, 3303, 3651,
	3647, 2502, 3479, 2495, 3670, 2053, 1765, 2180, 1253, 3723,
	1718, 1510, 1718, 2735, 1386, 1387, 3718, 3525, 3683, 3518,
	1384, 1385, 1947, 3707, 3708, 3732, 1509, 3719, 3720, 3570,
	1382, 1383, 2734, 3680, 3687, 2184, 1071, 3741, 3742, 2733,
	1262, 1263, 1264, 1261, 3679, 3348, 3030, 2341, 2196, 1462,
	1555, 1461, 1434, 1485, 3685, 2727, 4037, 4035, 3729, 1262,
	1263, 1264, 1261, 2717, 3992, 3963, 1262, 1263, 1264, 1261,
	3728, 3605, 3962, 3772, 3960, 3901, 3859, 3730, 2713, 3735,
	3668, 3669, 1262, 1263, 1264, 1261, 3765, 3734, 3724, 1553,
	1262, 1263, 1264, 1261, 3672, 3581, 3401, 3374, 3373, 3776,
	3359, 3778, 3752, 3748, 2689, 1262, 1263, 1264, 1261, 2441,
	3040, 2411, 3760, 1664, 3764, 3358, 1459, 983, 4068, 4067,
	4068, 3420, 3808, 3085, 3802, 3781, 1767, 3753, 3597, 2774,
	3598, 1262, 1263, 1264, 1261, 2369, 2262, 1396, 1189, 1211,
	4067, 3701, 3725, 3354, 1186, 1477, 3726, 210, 3, 3825,
	75, 3792, 3831, 1262, 1263, 1264, 1261, 2, 4090, 3803,
	4091, 1, 3589, 914, 915, 916, 917, 2755, 1186, 3805,
	3804, 1881, 1390, 918, 913, 1531, 3817, 2540, 2106, 1559,
	1885, 3821, 1189, 920, 3013, 3014, 3347, 1555, 3800, 3016,
	2777, 2215, 2977, 2493, 2357, 1877, 3214, 1877, 1444, 976,
	1718, 1825, 142, 142, 142, 1069, 2242, 3838, 1679, 1203,
	1929, 1676, 1202, 1200, 1770, 1934, 1877, 1877, 3847, 801,
	2169, 2961, 2935, 3731, 4076, 1071, 1553, 4111, 4029, 4079,
	1276, 1275, 1285, 1286, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1277, 1695, 3893, 785, 3954, 3880, 3864, 1593, 4033,
	3860, 3866, 3751, 2220, 1258, 3061, 1003, 842, 812, 1327,
	1655, 3888, 3131, 3889, 3849, 3129, 811, 3444, 2805, 3736,
	3033, 3810, 3902, 1004, 2152, 3861, 3749, 1609, 1294, 1613,
	2407, 3818, 3920, 3681, 3267, 3890, 2871, 1987, 1988, 1637,
	3915, 3490, 3601, 3599, 3600, 717, 2085, 2648, 3896, 2651,
	3919, 648, 1053, 1189, 3904, 3722, 2165, 718, 2387, 3979,
	3841, 1555, 956, 2366, 3944, 957, 949, 2824, 3913, 3951,
	2823, 3934, 3936, 3938, 3940, 1735, 1267, 3918, 1752, 3150,
	3850, 3151, 1304, 3927, 756, 2245, 3952, 2802, 3513, 3933,
	3026, 74, 73, 72, 71, 231, 2113, 803, 230, 3773,
	1553, 3640, 2113, 2113, 2113, 3950, 4081, 782, 781, 780,
	3959, 3957, 779, 2691, 1555, 778, 2697, 3808, 777, 2513,
	2514, 2512, 2510, 2509, 2067, 3974, 2066, 2715, 2716, 3971,
	3039, 3357, 2131, 4002, 2133, 2718, 2719, 3229, 3943, 4010,
	2900, 2895, 1992, 3993, 1990, 3995, 1522, 2436, 3996, 3997,
	2443, 2724, 1989, 1553, 4011, 3391, 3903, 3592, 3930, 3856,
	3857, 3907, 3908, 3931, 3698, 2945, 4026, 3588, 1935, 2432,
	2009, 2916, 4019, 2006, 4020, 2005, 4021, 1381, 4022, 2908,
	1724, 1877, 4023, 3694, 3688, 2037, 3806, 4036, 3653, 4038,
	4039, 3994, 3928, 4034, 4032, 3497, 3498, 3504, 2375, 4042,
	1122, 1118, 3880, 1189, 1120, 1121, 1119, 4043, 2515, 2519,
	2520, 2521, 2516, 2524, 2517, 2522, 2699, 3323, 2518, 2413,
	2523, 3191, 2349, 3831, 4056, 2348, 2346, 2345, 991, 1419,
	3892, 3975, 4058, 4059, 4057, 4062, 4065, 4063, 3621, 4075,
	2564, 4083, 2562, 1169, 4082, 3336, 3332, 4069, 4070, 4071,
	4072, 2177, 3341, 2998, 2192, 3081, 2068, 2064, 2063, 1093,
	4095, 1092, 2853, 2854, 4087, 4054, 1189, 1590, 2979, 2503,
	3783, 1940, 950, 2364, 109, 41, 122, 4100, 108, 3919,
	4101, 4103, 185, 59, 184, 58, 4109, 120, 182, 4113,
	57, 103, 4110, 102, 119, 180, 56, 215, 214, 217,
	987, 988, 216, 213, 2616, 2617, 212, 1597, 211, 3964,
	3657, 1031, 3946, 908, 44, 43, 186, 4121, 42, 110,
	60, 40, 39, 38, 34, 13, 4083, 4129, 1718, 4082,
	4128, 12, 1564, 4045, 4046, 35, 680, 22, 4113, 4130,
	4050, 4051, 4052, 4053, 4134, 21, 1683, 206, 64, 197,
	168, 20, 26, 32, 31, 135, 134, 30, 133, 132,
	131, 130, 129, 128, 127, 29, 198, 19, 51, 50,
	49, 48, 142, 189, 47, 46, 9, 199, 123, 118,
	116, 28, 117, 114, 115, 113, 729, 728, 735, 725,
	112, 111, 106, 104, 86, 1033, 140, 85, 1032, 732,
	733, 84, 734, 738, 1877, 99, 719, 98, 97, 96,
	95, 126, 94, 92, 93, 1002, 743, 83, 82, 81,
	202, 80, 79, 101, 107, 105, 90, 100, 91, 89,
	88, 87, 78, 77, 76, 166, 165, 1017, 164, 163,
	142, 2354, 2355, 2356, 162, 160, 992, 142, 161, 159,
	158, 157, 156, 155, 154, 3502, 2371, 2372, 2373, 2374,
	142, 52, 747, 142, 142, 749, 53, 54, 55, 176,
	748, 175, 177, 994, 179, 181, 142, 178, 183, 173,
	171, 174, 172, 170, 69, 3046, 11, 3048, 121, 18,
	4, 0, 0, 0, 0, 0, 3514, 148, 149, 0,
	150, 151, 0, 0, 0, 152, 1877, 0, 153, 3505,
	0, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	3500, 0, 0, 2194, 0, 3522, 3523, 0, 0, 0,
	0, 3501, 0, 0, 0, 0, 0, 0, 1016, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3101, 0,
	0, 0, 0, 0, 0, 0, 1013, 0, 3506, 0,
	0, 167, 195, 204, 196, 124, 0, 0, 986, 0,
	0, 0, 0, 0, 1524, 0, 3125, 0, 0, 993,
	1026, 0, 0, 0, 194, 188, 187, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	720, 722, 721, 1022, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1561, 0, 731, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 2113, 0, 0, 724, 0, 1023,
	1027, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 191, 192, 0, 3521, 0, 2422, 1010,
	0, 1008, 1012, 1030, 0, 0, 0, 1009, 1006, 1005,
	0, 1011, 996, 997, 995, 998, 999, 1000, 1001, 0,
	1028, 0, 1029, 3510, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 1024, 1025, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3507, 3511, 3509, 3508, 0,
	0, 0, 136, 0, 0, 0, 193, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1020, 0, 0, 0, 0, 0, 1019, 0, 0, 0,
	0, 3282, 0, 0, 0, 3516, 3517, 0, 0, 0,
	0, 1015, 0, 0, 0, 726, 730, 736, 0, 737,
	739, 2038, 0, 740, 741, 742, 1999, 0, 744, 745,
	0, 0, 0, 0, 1803, 138, 0, 0, 0, 0,
	2071, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 2041, 2008, 3524,
	0, 0, 0, 0, 0, 0, 0, 2042, 2043, 0,
	0, 3503, 0, 0, 0, 0, 0, 3515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 2007, 0, 989, 990, 65, 984, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 2015, 0, 0, 0, 142, 0, 0, 142, 142,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 203, 0, 147, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 2840, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 729, 728, 735, 725, 0, 2031,
	0, 0, 0, 0, 723, 0, 0, 732, 733, 142,
	734, 738, 0, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 3520, 1799, 0,
	0, 139, 45, 0, 0, 1796, 0, 0, 62, 1798,
	1795, 1797, 1801, 1802, 0, 2038, 0, 1800, 0, 0,
	1999, 0, 0, 0, 0, 0, 0, 3393, 0, 0,
	0, 143, 144, 0, 3395, 145, 0, 0, 0, 0,
	0, 0, 0, 1998, 2000, 1997, 0, 0, 1994, 0,
	0, 2041, 2008, 2019, 0, 0, 0, 0, 0, 1294,
	0, 2042, 2043, 0, 2025, 0, 3410, 0, 0, 0,
	0, 0, 2010, 3519, 1993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2013, 2047, 0, 2007, 2014, 2016,
	2018, 0, 2020, 2021, 2022, 2026, 2027, 2028, 2030, 2033,
	2034, 2035, 0, 0, 0, 2015, 0, 0, 0, 2023,
	2032, 2024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2002, 0, 0, 3031, 3032, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2039, 0, 0, 0, 0,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1806, 1807, 1808, 1809, 1810, 1811, 1804, 1805, 0,
	0, 0, 0, 2031, 0, 0, 0, 0, 1995, 1996,
	0, 0, 0, 0, 0, 0, 0, 0, 720, 722,
	721, 0, 0, 0, 0, 0, 2036, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 2012, 0, 0, 0, 0, 746, 0,
	2011, 1877, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1877, 0, 0,
	3560, 0, 0, 3562, 2029, 0, 0, 1998, 2866, 1997,
	0, 0, 2865, 2017, 0, 0, 0, 2019, 0, 0,
	0, 0, 0, 0, 3569, 0, 2045, 2044, 2025, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2013, 2047,
	0, 0, 2014, 2016, 2018, 0, 2020, 2021, 2022, 2026,
	2027, 2028, 2030, 2033, 2034, 2035, 0, 0, 0, 0,
	0, 0, 0, 2023, 2032, 2024, 0, 0, 0, 2004,
	0, 0, 0, 0, 0, 2002, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 730, 736, 0, 737, 739, 2039,
	0, 740, 741, 742, 0, 0, 744, 745, 0, 0,
	0, 2040, 0, 0, 2046, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2533, 0, 0, 0, 0, 0,
	0, 3223, 1995, 1996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3235, 0,
	2036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2012, 0, 0,
	0, 0, 0, 0, 2011, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2071,
	0, 0, 0, 0, 0, 0, 0, 142, 2029, 0,
	0, 1126, 0, 0, 0, 0, 0, 2017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2045, 2044, 1149, 1153, 1155, 1157, 1159, 1160, 1162, 0,
	1167, 1163, 1164, 1165, 1166, 0, 1144, 1145, 1146, 1147,
	1124, 1125, 1150, 0, 1127, 0, 1129, 1130, 1131, 1132,
	1128, 1133, 1134, 1135, 1136, 1137, 1140, 1142, 1138, 1139,
	1148, 0, 723, 0, 0, 0, 0, 0, 1152, 1154,
	1156, 1158, 1161, 2004, 0, 0, 2113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 1116, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 2040, 0, 0, 2046, 0,
	1149, 1153, 1155, 1157, 1159, 1160, 1162, 1141, 1167, 1163,
	1164, 1165, 1166, 0, 1144, 1145, 1146, 1147, 1124, 1125,
	1150, 0, 1127, 0, 1129, 1130, 1131, 1132, 1128, 1133,
	1134, 1135, 1136, 1137, 1140, 1142, 1138, 1139, 1148, 0,
	0, 0, 0, 0, 0, 0, 1152, 1154, 1156, 1158,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 3387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1126, 0, 0, 0, 2695, 2696, 0, 0, 2038,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1149, 1153, 1155, 1157, 1159, 1160, 1162, 0,
	1167, 1163, 1164, 1165, 1166, 0, 1144, 1145, 1146, 1147,
	1124, 1125, 1150, 3926, 1127, 2041, 1129, 1130, 1131, 1132,
	1128, 1133, 1134, 1135, 1136, 1137, 1140, 1142, 1138, 1139,
	1148, 0, 0, 0, 0, 0, 0, 0, 1152, 1154,
	1156, 1158, 1161, 2038, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 2113, 0, 0, 0, 0, 0, 3830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2015,
	0, 0, 0, 3652, 0, 0, 0, 0, 1143, 2041,
	0, 0, 0, 0, 2071, 2071, 2071, 2071, 2071, 2071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4007, 2071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1151,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2015, 0, 0, 0, 2031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4007, 0, 2038, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 2031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 1151, 2041, 0,
	0, 2019, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 2025, 0, 0, 0, 0, 4007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2013, 2047, 0, 0, 2014, 2016, 2018, 0,
	2020, 2021, 2022, 2026, 2027, 2028, 2030, 2033, 2034, 2035,
	0, 2038, 2015, 0, 0, 0, 0, 2023, 2032, 2024,
	0, 0, 0, 0, 0, 2019, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 4132, 0, 0, 0, 2041, 0, 0,
	0, 0, 0, 2039, 0, 0, 2013, 2047, 0, 0,
	2014, 2016, 2018, 0, 2020, 2021, 2022, 2026, 2027, 2028,
	2030, 2033, 2034, 2035, 0, 0, 3801, 0, 0, 0,
	2031, 2023, 2032, 2024, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3706, 2015, 0, 0, 2036, 0, 0, 0, 0, 1151,
	0, 1262, 1263, 1264, 1261, 0, 0, 2039, 0, 0,
	0, 2012, 0, 0, 0, 0, 0, 0, 2011, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 142, 0, 0, 0,
	0, 142, 2029, 0, 0, 0, 0, 0, 2071, 0,
	0, 2017, 0, 0, 2019, 0, 0, 0, 2036, 2031,
	0, 0, 0, 0, 0, 2025, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 2012, 0, 0, 0, 0,
	0, 1803, 2011, 0, 0, 2013, 2047, 0, 0, 2014,
	2016, 2018, 0, 2020, 2021, 2022, 2026, 2027, 2028, 2030,
	2033, 2034, 2035, 0, 0, 0, 2029, 0, 0, 0,
	2023, 2032, 2024, 0, 0, 2017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2019, 0, 0, 2039, 0, 0, 0,
	0, 0, 0, 0, 2025, 0, 0, 0, 0, 3660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2013, 2047, 0, 0, 2014, 2016,
	2018, 0, 2020, 2021, 2022, 2026, 2027, 2028, 2030, 2033,
	2034, 2035, 0, 0, 0, 0, 0, 2036, 0, 2023,
	2032, 2024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2012, 0, 0, 0, 0, 0,
	0, 2011, 0, 3656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2029, 0, 0, 0, 0,
	0, 0, 0, 0, 2017, 1799, 0, 0, 0, 0,
	0, 0, 1796, 0, 0, 0, 1798, 1795, 1797, 1801,
	1802, 0, 0, 0, 1800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2012, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2029, 0, 0, 0, 0, 0,
	0, 0, 0, 2017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1806, 1807,
	1808, 1809, 1810, 1811, 1804, 1805, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2071, 3660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 0,
	0, 533, 566, 555, 639, 521, 0, 0, 0, 0,
	0, 0, 771, 0, 0, 0, 337, 142, 0, 370,
	570, 552, 562, 553, 538, 539, 540, 547, 349, 541,
	542, 543, 513, 544, 514, 545, 546, 810, 569, 520,
	435, 386, 587, 586, 0, 0, 879, 887, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 763, 0, 0, 800, 855, 854, 787, 797, 0,
	0, 310, 229, 515, 635, 517, 516, 788, 0, 789,
	793, 796, 792, 790, 791, 0, 870, 0, 0, 0,
	0, 0, 0, 755, 767, 0, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	764, 765, 0, 0, 0, 0, 820, 0, 766, 0,
	0, 815, 794, 798, 0, 0, 0, 0, 300, 442,
	461, 311, 430, 474, 316, 438, 453, 306, 401, 427,
	0, 0, 302, 459, 437, 383, 360, 361, 301, 0,
	421, 335, 351, 332, 399, 795, 818, 822, 331, 893,
	816, 469, 304, 0, 468, 398, 455, 460, 384, 377,
	0, 303, 457, 382, 376, 364, 341, 894, 365, 366,
	355, 410, 374, 411, 356, 388, 387, 389, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	813, 0, 632, 0, 471, 0, 0, 877, 0, 0,
	0, 441, 0, 0, 367, 0, 0, 0, 817, 0,
	424, 404, 890, 0, 0, 422, 372, 456, 412, 462,
	443, 470, 418, 413, 294, 444, 334, 385, 307, 309,
	329, 336, 338, 342, 343, 394, 395, 407, 429, 446,
	447, 448, 333, 317, 423, 318, 353, 319, 295, 325,
	323, 326, 431, 327, 297, 408, 452, 0, 348, 419,
	380, 298, 379, 409, 451, 450, 308, 478, 484, 485,
	574, 0, 490, 662, 663, 664, 499, 142, 414, 504,
	505, 506, 508, 509, 510, 511, 575, 592, 559, 529,
	492, 583, 526, 530, 531, 358, 595, 1827, 1826, 1828,
	483, 368, 369, 0, 340, 339, 381, 417, 299, 346,
	291, 292, 657, 874, 400, 597, 630, 631, 522, 0,
	889, 869, 871, 872, 876, 880, 881, 882, 883, 884,
	886, 888, 892, 656, 0, 576, 591, 660, 590, 653,
	406, 0, 428, 588, 535, 0, 580, 554, 0, 581,
	550, 585, 0, 524, 0, 436, 464, 476, 493, 496,
	525, 610, 611, 612, 296, 495, 614, 615, 616, 617,
	618, 619, 620, 613, 891, 557, 534, 560, 475, 537,
	536, 0, 0, 571, 821, 572, 573, 390, 391, 392,
	393, 878, 598, 315, 494, 416, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 564, 561, 665,
	0, 621, 622, 0, 0, 488, 489, 345, 352, 507,
	354, 314, 405, 347, 473, 362, 0, 500, 565, 501,
	624, 627, 625, 626, 397, 357, 359, 432, 363, 373,
	420, 472, 403, 425, 312, 463, 434, 378, 551, 578,
	900, 873, 899, 901, 902, 898, 903, 904, 885, 776,
	0, 828, 896, 895, 897, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 605, 604, 603,
	602, 601, 600, 599, 0, 0, 548, 449, 324, 285,
	320, 321, 328, 654, 651, 454, 655, 783, 293, 528,
	371, 0, 415, 344, 593, 594, 0, 645, 862, 835,
	836, 837, 773, 838, 832, 833, 774, 834, 863, 826,
	859, 860, 802, 829, 839, 858, 840, 861, 864, 865,
	905, 906, 846, 830, 257, 907, 843, 866, 857, 856,
	841, 827, 867, 868, 809, 804, 844, 845, 831, 850,
	851, 852, 775, 823, 824, 825, 847, 848, 805, 806,
	807, 808, 0, 0, 0, 479, 480, 481, 503, 0,
	465, 527, 652, 0, 0, 0, 0, 0, 0, 0,
	577, 589, 623, 0, 633, 634, 636, 638, 853, 640,
	439, 440, 647, 0, 849, 643, 644, 641, 375, 426,
	445, 433, 819, 658, 518, 519, 659, 629, 0, 768,
	0, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 771, 0, 0, 0, 337,
	1878, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	810, 569, 520, 435, 386, 587, 586, 0, 0, 879,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 2097, 0, 0, 763, 0, 0, 800, 855, 854,
	787, 797, 0, 0, 310, 229, 515, 635, 517, 516,
	788, 0, 789, 793, 796, 792, 790, 791, 0, 870,
	0, 0, 0, 0, 0, 0, 755, 767, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 765, 0, 0, 0, 0, 820,
	0, 766, 0, 0, 2098, 794, 798, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 795, 818,
	822, 331, 893, 816, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	894, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 813, 0, 632, 0, 471, 0, 0,
	877, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 817, 0, 424, 404, 890, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 662, 663, 664, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 657, 874, 400, 597, 630,
	631, 522, 0, 889, 869, 871, 872, 876, 880, 881,
	882, 883, 884, 886, 888, 892, 656, 0, 576, 591,
	660, 590, 653, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 891, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 821, 572, 573,
	390, 391, 392, 393, 878, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 665, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 900, 873, 899, 901, 902, 898, 903,
	904, 885, 776, 0, 828, 896, 895, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 654, 651, 454, 655,
	783, 293, 528, 371, 0, 415, 344, 593, 594, 0,
	645, 862, 835, 836, 837, 773, 838, 832, 833, 774,
	834, 863, 826, 859, 860, 802, 829, 839, 858, 840,
	861, 864, 865, 905, 906, 846, 830, 257, 907, 843,
	866, 857, 856, 841, 827, 867, 868, 809, 804, 844,
	845, 831, 850, 851, 852, 775, 823, 824, 825, 847,
	848, 805, 806, 807, 808, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 652, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 853, 640, 439, 440, 647, 0, 849, 643, 644,
	641, 375, 426, 445, 433, 0, 658, 518, 519, 659,
	629, 0, 768, 206, 819, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 1297, 569, 520, 435, 386, 587, 586, 0,
	0, 879, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 763, 0, 0, 800,
	855, 854, 787, 797, 0, 0, 310, 229, 515, 635,
	517, 516, 788, 0, 789, 793, 796, 792, 790, 791,
	0, 870, 0, 0, 0, 0, 0, 0, 755, 767,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 764, 765, 0, 0, 0,
	0, 820, 0, 766, 0, 0, 815, 794, 798, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	795, 818, 822, 331, 893, 816, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 894, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 813, 0, 632, 0, 471,
	0, 0, 877, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 817, 0, 424, 404, 890, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 662, 663,
	664, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 657, 874, 400,
	597, 630, 631, 522, 0, 889, 869, 871, 872, 876,
	880, 881, 882, 883, 884, 886, 888, 892, 656, 0,
	576, 591, 660, 590, 653, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 891,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 821,
	572, 573, 390, 391, 392, 393, 878, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 665, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 900, 873, 899, 901, 902,
	898, 903, 904, 885, 776, 0, 828, 896, 895, 897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 654, 651,
	454, 655, 783, 293, 528, 371, 169, 415, 344, 593,
	594, 0, 645, 862, 835, 836, 837, 773, 838, 832,
	833, 774, 834, 863, 826, 859, 860, 802, 829, 839,
	858, 840, 861, 864, 865, 905, 906, 846, 830, 257,
	907, 843, 866, 857, 856, 841, 827, 867, 868, 809,
	804, 844, 845, 831, 850, 851, 852, 775, 823, 824,
	825, 847, 848, 805, 806, 807, 808, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 652, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 853, 640, 439, 440, 647, 0, 849,
	643, 644, 641, 375, 426, 445, 433, 819, 658, 518,
	519, 659, 629, 0, 768, 0, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 337, 4131, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 810, 569, 520, 435, 386,
	587, 586, 0, 0, 879, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 763,
	0, 0, 800, 855, 854, 787, 797, 0, 0, 310,
	229, 515, 635, 517, 516, 788, 0, 789, 793, 796,
	792, 790, 791, 0, 870, 0, 0, 0, 0, 0,
	0, 755, 767, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 765,
	0, 0, 0, 0, 820, 0, 766, 0, 0, 815,
	794, 798, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 795, 818, 822, 331, 893, 816, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 894, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 813, 0,
	632, 0, 471, 0, 0, 877, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 817, 0, 424, 404,
	890, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 662, 663, 664, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	657, 874, 400, 597, 630, 631, 522, 0, 889, 869,
	871, 872, 876, 880, 881, 882, 883, 884, 886, 888,
	892, 656, 0, 576, 591, 660, 590, 653, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 891, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 821, 572, 573, 390, 391, 392, 393, 878,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 665, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 900, 873,
	899, 901, 902, 898, 903, 904, 885, 776, 0, 828,
	896, 895, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 654, 651, 454, 655, 783, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 862, 835, 836, 837,
	773, 838, 832, 833, 774, 834, 863, 826, 859, 860,
	802, 829, 839, 858, 840, 861, 864, 865, 905, 906,
	846, 830, 257, 907, 843, 866, 857, 856, 841, 827,
	867, 868, 809, 804, 844, 845, 831, 850, 851, 852,
	775, 823, 824, 825, 847, 848, 805, 806, 807, 808,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	652, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 853, 640, 439, 440,
	647, 0, 849, 643, 644, 641, 375, 426, 445, 433,
	819, 658, 518, 519, 659, 629, 0, 768, 0, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 771, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 810, 569,
	520, 435, 386, 587, 586, 0, 0, 879, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 763, 0, 0, 800, 855, 854, 787, 797,
	0, 0, 310, 229, 515, 635, 517, 516, 788, 0,
	789, 793, 796, 792, 790, 791, 0, 870, 0, 0,
	0, 0, 0, 0, 755, 767, 0, 772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 0, 0, 0, 0, 820, 0, 766,
	0, 0, 815, 794, 798, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 795, 818, 822, 331,
	893, 816, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 894, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 813, 0, 632, 0, 471, 0, 0, 877, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 817,
	0, 424, 404, 890, 4008, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 874, 400, 597, 630, 631, 522,
	0, 889, 869, 871, 872, 876, 880, 881, 882, 883,
	884, 886, 888, 892, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 891, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 821, 572, 573, 390, 391,
	392, 393, 878, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 900, 873, 899, 901, 902, 898, 903, 904, 885,
	776, 0, 828, 896, 895, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 783, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 862,
	835, 836, 837, 773, 838, 832, 833, 774, 834, 863,
	826, 859, 860, 802, 829, 839, 858, 840, 861, 864,
	865, 905, 906, 846, 830, 257, 907, 843, 866, 857,
	856, 841, 827, 867, 868, 809, 804, 844, 845, 831,
	850, 851, 852, 775, 823, 824, 825, 847, 848, 805,
	806, 807, 808, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 853,
	640, 439, 440, 647, 0, 849, 643, 644, 641, 375,
	426, 445, 433, 819, 658, 518, 519, 659, 629, 0,
	768, 0, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	337, 1878, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 810, 569, 520, 435, 386, 587, 586, 0, 0,
	879, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 763, 0, 0, 800, 855,
	854, 787, 797, 0, 0, 310, 229, 515, 635, 517,
	516, 788, 0, 789, 793, 796, 792, 790, 791, 0,
	870, 0, 0, 0, 0, 0, 0, 755, 767, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 764, 765, 0, 0, 0, 0,
	820, 0, 766, 0, 0, 815, 794, 798, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 795,
	818, 822, 331, 893, 816, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 894, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 813, 0, 632, 0, 471, 0,
	0, 877, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 817, 0, 424, 404, 890, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 662, 663, 664,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 657, 874, 400, 597,
	630, 631, 522, 0, 889, 869, 871, 872, 876, 880,
	881, 882, 883, 884, 886, 888, 892, 656, 0, 576,
	591, 660, 590, 653, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 891, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 821, 572,
	573, 390, 391, 392, 393, 878, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 665, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 900, 873, 899, 901, 902, 898,
	903, 904, 885, 776, 0, 828, 896, 895, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 654, 651, 454,
	655, 783, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 862, 835, 836, 837, 773, 838, 832, 833,
	774, 834, 863, 826, 859, 860, 802, 829, 839, 858,
	840, 861, 864, 865, 905, 906, 846, 830, 257, 907,
	843, 866, 857, 856, 841, 827, 867, 868, 809, 804,
	844, 845, 831, 850, 851, 852, 775, 823, 824, 825,
	847, 848, 805, 806, 807, 808, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 652, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 853, 640, 439, 440, 647, 0, 849, 643,
	644, 641, 375, 426, 445, 433, 819, 658, 518, 519,
	659, 629, 0, 768, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 810, 569, 520, 435, 386, 587,
	586, 0, 0, 879, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 763, 0,
	0, 800, 855, 854, 787, 797, 0, 0, 310, 229,
	515, 635, 517, 516, 788, 0, 789, 793, 796, 792,
	790, 791, 0, 870, 0, 0, 0, 0, 0, 0,
	755, 767, 0, 772, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 765, 1592,
	0, 0, 0, 820, 0, 766, 0, 0, 815, 794,
	798, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 795, 818, 822, 331, 893, 816, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 894, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 813, 0, 632,
	0, 471, 0, 0, 877, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 817, 0, 424, 404, 890,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	662, 663, 664, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 657,
	874, 400, 597, 630, 631, 522, 0, 889, 869, 871,
	872, 876, 880, 881, 882, 883, 884, 886, 888, 892,
	656, 0, 576, 591, 660, 590, 653, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 891, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 821, 572, 573, 390, 391, 392, 393, 878, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 665, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 900, 873, 899,
	901, 902, 898, 903, 904, 885, 776, 0, 828, 896,
	895, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	654, 651, 454, 655, 783, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 862, 835, 836, 837, 773,
	838, 832, 833, 774, 834, 863, 826, 859, 860, 802,
	829, 839, 858, 840, 861, 864, 865, 905, 906, 846,
	830, 257, 907, 843, 866, 857, 856, 841, 827, 867,
	868, 809, 804, 844, 845, 831, 850, 851, 852, 775,
	823, 824, 825, 847, 848, 805, 806, 807, 808, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 652,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 853, 640, 439, 440, 647,
	0, 849, 643, 644, 641, 375, 426, 445, 433, 0,
	658, 518, 519, 659, 629, 819, 768, 0, 2270, 0,
	0, 0, 0, 0, 402, 0, 0, 533, 566, 555,
	639, 521, 0, 0, 0, 0, 0, 0, 771, 0,
	0, 0, 337, 0, 0, 370, 570, 552, 562, 553,
	538, 539, 540, 547, 349, 541, 542, 543, 513, 544,
	514, 545, 546, 810, 569, 520, 435, 386, 587, 586,
	0, 0, 879, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 763, 0, 0,
	800, 855, 854, 787, 797, 0, 0, 310, 229, 515,
	635, 517, 516, 788, 0, 789, 793, 796, 792, 790,
	791, 0, 870, 0, 0, 0, 0, 0, 0, 755,
	767, 0, 772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 764, 765, 0, 0,
	0, 0, 820, 0, 766, 0, 0, 815, 794, 798,
	0, 0, 0, 0, 300, 442, 461, 311, 430, 474,
	316, 438, 453, 306, 401, 427, 0, 0, 302, 459,
	437, 383, 360, 361, 301, 0, 421, 335, 351, 332,
	399, 795, 818, 822, 331, 893, 816, 469, 304, 0,
	468, 398, 455, 460, 384, 377, 0, 303, 457, 382,
	376, 364, 341, 894, 365, 366, 355, 410, 374, 411,
	356, 388, 387, 389, 0, 0, 0, 0, 0, 497,
	498, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 813, 0, 632, 0,
	471, 0, 0, 877, 0, 0, 0, 441, 0, 0,
	367, 0, 0, 0, 817, 0, 424, 404, 890, 0,
	0, 422, 372, 456, 412, 462, 443, 470, 418, 413,
	294, 444, 334, 385, 307, 309, 329, 336, 338, 342,
	343, 394, 395, 407, 429, 446, 447, 448, 333, 317,
	423, 318, 353, 319, 295, 325, 323, 326, 431, 327,
	297, 408, 452, 0, 348, 419, 380, 298, 379, 409,
	451, 450, 308, 478, 484, 485, 574, 0, 490, 662,
	663, 664, 499, 0, 414, 504, 505, 506, 508, 509,
	510, 511, 575, 592, 559, 529, 492, 583, 526, 530,
	531, 358, 595, 0, 0, 0, 483, 368, 369, 0,
	340, 339, 381, 417, 299, 346, 291, 292, 657, 874,
	400, 597, 630, 631, 522, 0, 889, 869, 871, 872,
	876, 880, 881, 882, 883, 884, 886, 888, 892, 656,
	0, 576, 591, 660, 590, 653, 406, 0, 428, 588,
	535, 0, 580, 554, 0, 581, 550, 585, 0, 524,
	0, 436, 464, 476, 493, 496, 525, 610, 611, 612,
	296, 495, 614, 615, 616, 617, 618, 619, 620, 613,
	891, 557, 534, 560, 475, 537, 536, 0, 0, 571,
	821, 572, 573, 390, 391, 392, 393, 878, 598, 315,
	494, 416, 0, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 563, 564, 561, 665, 0, 621, 622, 0,
	0, 488, 489, 345, 352, 507, 354, 314, 405, 347,
	473, 362, 0, 500, 565, 501, 624, 627, 625, 626,
	397, 357, 359, 432, 363, 373, 420, 472, 403, 425,
	312, 463, 434, 378, 551, 578, 900, 873, 899, 901,
	902, 898, 903, 904, 885, 776, 0, 828, 896, 895,
	897, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 605, 604, 603, 602, 601, 600, 599,
	0, 0, 548, 449, 324, 285, 320, 321, 328, 654,
	651, 454, 655, 783, 293, 528, 371, 0, 415, 344,
	593, 594, 0, 645, 862, 835, 836, 837, 773, 838,
	832, 833, 774, 834, 863, 826, 859, 860, 802, 829,
	839, 858, 840, 861, 864, 865, 905, 906, 846, 830,
	257, 907, 843, 866, 857, 856, 841, 827, 867, 868,
	809, 804, 844, 845, 831, 850, 851, 852, 775, 823,
	824, 825, 847, 848, 805, 806, 807, 808, 0, 0,
	0, 479, 480, 481, 503, 0, 465, 527, 652, 0,
	0, 0, 0, 0, 0, 0, 577, 589, 623, 0,
	633, 634, 636, 638, 853, 640, 439, 440, 647, 0,
	849, 643, 644, 641, 375, 426, 445, 433, 819, 658,
	518, 519, 659, 629, 0, 768, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 810, 569, 520, 435,
	386, 587, 586, 0, 0, 879, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	763, 0, 0, 800, 855, 854, 787, 797, 0, 0,
	310, 229, 515, 635, 517, 516, 788, 0, 789, 793,
	796, 792, 790, 791, 0, 870, 0, 0, 0, 0,
	0, 0, 755, 767, 0, 772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 764,
	765, 1871, 0, 0, 0, 820, 0, 766, 0, 0,
	815, 794, 798, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 795, 818, 822, 331, 893, 816,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 894, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 813,
	0, 632, 0, 471, 0, 0, 877, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 817, 0, 424,
	404, 890, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 874, 400, 597, 630, 631, 522, 0, 889,
	869, 871, 872, 876, 880, 881, 882, 883, 884, 886,
	888, 892, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 891, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 821, 572, 573, 390, 391, 392, 393,
	878, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 900,
	873, 899, 901, 902, 898, 903, 904, 885, 776, 0,
	828, 896, 895, 897, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 783, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 862, 835, 836,
	837, 773, 838, 832, 833, 774, 834, 863, 826, 859,
	860, 802, 829, 839, 858, 840, 861, 864, 865, 905,
	906, 846, 830, 257, 907, 843, 866, 857, 856, 841,
	827, 867, 868, 809, 804, 844, 845, 831, 850, 851,
	852, 775, 823, 824, 825, 847, 848, 805, 806, 807,
	808, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 853, 640, 439,
	440, 647, 0, 849, 643, 644, 641, 375, 426, 445,
	433, 819, 658, 518, 519, 659, 629, 0, 768, 0,
	402, 0, 0, 533, 566, 555, 639, 521, 0, 0,
	0, 0, 0, 0, 771, 0, 0, 0, 337, 0,
	0, 370, 570, 552, 562, 553, 538, 539, 540, 547,
	349, 541, 542, 543, 513, 544, 514, 545, 546, 810,
	569, 520, 435, 386, 587, 586, 0, 0, 879, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 763, 0, 0, 800, 855, 854, 787,
	797, 0, 0, 310, 229, 515, 635, 517, 516, 788,
	0, 789, 793, 796, 792, 790, 791, 0, 870, 0,
	0, 0, 0, 0, 0, 755, 767, 0, 772, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 764, 765, 0, 0, 0, 0, 820, 0,
	766, 0, 0, 815, 794, 798, 0, 0, 0, 0,
	300, 442, 461, 311, 430, 474, 316, 438, 453, 306,
	401, 427, 0, 0, 302, 459, 437, 383, 360, 361,
	301, 0, 421, 335, 351, 332, 399, 795, 818, 822,
	331, 893, 816, 469, 304, 0, 468, 398, 455, 460,
	384, 377, 0, 303, 457, 382, 376, 364, 341, 894,
	365, 366, 355, 410, 374, 411, 356, 388, 387, 389,
	0, 0, 0, 0, 0, 497, 498, 0, 0, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 628, 813, 0, 632, 0, 471, 0, 0, 877,
	0, 0, 0, 441, 0, 0, 367, 0, 0, 0,
	817, 0, 424, 404, 890, 0, 0, 422, 372, 456,
	412, 462, 443, 470, 418, 413, 294, 444, 334, 385,
	307, 309, 329, 336, 338, 342, 343, 394, 395, 407,
	429, 446, 447, 448, 333, 317, 423, 318, 353, 319,
	295, 325, 323, 326, 431, 327, 297, 408, 452, 0,
	348, 419, 380, 298, 379, 409, 451, 450, 308, 478,
	484, 485, 574, 0, 490, 662, 663, 664, 499, 0,
	414, 504, 505, 506, 508, 509, 510, 511, 575, 592,
	559, 529, 492, 583, 526, 530, 531, 358, 595, 0,
	0, 0, 483, 368, 369, 0, 340, 339, 381, 417,
	299, 346, 291, 292, 657, 874, 400, 597, 630, 631,
	522, 0, 889, 869, 871, 872, 876, 880, 881, 882,
	883, 884, 886, 888, 892, 656, 0, 576, 591, 660,
	590, 653, 406, 0, 428, 588, 535, 0, 580, 554,
	0, 581, 550, 585, 0, 524, 0, 436, 464, 476,
	493, 496, 525, 610, 611, 612, 296, 495, 614, 615,
	616, 617, 618, 619, 620, 613, 891, 557, 534, 560,
	475, 537, 536, 0, 0, 571, 821, 572, 573, 390,
	391, 392, 393, 878, 598, 315, 494, 416, 0, 558,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 564,
	561, 665, 0, 621, 622, 0, 0, 488, 489, 345,
	352, 507, 354, 314, 405, 347, 473, 362, 0, 500,
	565, 501, 624, 627, 625, 626, 397, 357, 359, 432,
	363, 373, 420, 472, 403, 425, 312, 463, 434, 378,
	551, 578, 900, 873, 899, 901, 902, 898, 903, 904,
	885, 776, 0, 828, 896, 895, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 605,
	604, 603, 602, 601, 600, 599, 0, 0, 548, 449,
	324, 285, 320, 321, 328, 654, 651, 454, 655, 783,
	293, 528, 371, 0, 415, 344, 593, 594, 0, 645,
	862, 835, 836, 837, 773, 838, 832, 833, 774, 834,
	863, 826, 859, 860, 802, 829, 839, 858, 840, 861,
	864, 865, 905, 906, 846, 830, 257, 907, 843, 866,
	857, 856, 841, 827, 867, 868, 809, 804, 844, 845,
	831, 850, 851, 852, 775, 823, 824, 825, 847, 848,
	805, 806, 807, 808, 0, 0, 0, 479, 480, 481,
	503, 0, 465, 527, 652, 0, 0, 0, 0, 0,
	0, 0, 577, 589, 623, 0, 633, 634, 636, 638,
	853, 640, 439, 440, 647, 0, 849, 643, 644, 641,
	375, 426, 445, 433, 819, 658, 518, 519, 659, 629,
	0, 768, 0, 402, 0, 0, 533, 566, 555, 639,
	521, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 337, 0, 0, 370, 570, 552, 562, 553, 538,
	539, 540, 547, 349, 541, 542, 543, 513, 544, 514,
	545, 546, 810, 569, 520, 435, 386, 587, 586, 0,
	0, 879, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 763, 0, 0, 800,
	855, 854, 787, 797, 0, 0, 310, 229, 515, 635,
	517, 516, 788, 0, 789, 793, 796, 792, 790, 791,
	0, 870, 0, 0, 0, 0, 0, 0, 755, 767,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 764, 765, 0, 0, 0,
	0, 820, 0, 766, 0, 0, 815, 794, 798, 0,
	0, 0, 0, 300, 442, 461, 311, 430, 474, 316,
	438, 453, 306, 401, 427, 0, 0, 302, 459, 437,
	383, 360, 361, 301, 0, 421, 335, 351, 332, 399,
	795, 818, 822, 331, 893, 816, 469, 304, 0, 468,
	398, 455, 460, 384, 377, 0, 303, 457, 382, 376,
	364, 341, 894, 365, 366, 355, 410, 374, 411, 356,
	388, 387, 389, 0, 0, 0, 0, 0, 497, 498,
	0, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 628, 813, 0, 632, 0, 471,
	0, 0, 877, 0, 0, 0, 441, 0, 0, 367,
	0, 0, 0, 817, 0, 424, 404, 890, 0, 0,
	422, 372, 456, 412, 462, 443, 470, 418, 413, 294,
	444, 334, 385, 307, 309, 329, 336, 338, 342, 343,
	394, 395, 407, 429, 446, 447, 448, 333, 317, 423,
	318, 353, 319, 295, 325, 323, 326, 431, 327, 297,
	408, 452, 0, 348, 419, 380, 298, 379, 409, 451,
	450, 308, 478, 484, 485, 574, 0, 490, 662, 663,
	664, 499, 0, 414, 504, 505, 506, 508, 509, 510,
	511, 575, 592, 559, 529, 492, 583, 526, 530, 531,
	358, 595, 0, 0, 0, 483, 368, 369, 0, 340,
	339, 381, 417, 299, 346, 291, 292, 657, 874, 400,
	597, 630, 631, 522, 0, 889, 869, 871, 872, 876,
	880, 881, 882, 883, 884, 886, 888, 892, 656, 0,
	576, 591, 660, 590, 653, 406, 0, 428, 588, 535,
	0, 580, 554, 0, 581, 550, 585, 0, 524, 0,
	436, 464, 476, 493, 496, 525, 610, 611, 612, 296,
	495, 614, 615, 616, 617, 618, 619, 620, 613, 891,
	557, 534, 560, 475, 537, 536, 0, 0, 571, 821,
	572, 573, 390, 391, 392, 393, 878, 598, 315, 494,
	416, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 563, 564, 561, 665, 0, 621, 622, 0, 0,
	488, 489, 345, 352, 507, 354, 314, 405, 347, 473,
	362, 0, 500, 565, 501, 624, 627, 625, 626, 397,
	357, 359, 432, 363, 373, 420, 472, 403, 425, 312,
	463, 434, 378, 551, 578, 900, 873, 899, 901, 902,
	898, 903, 904, 885, 776, 0, 828, 896, 895, 897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 605, 604, 603, 602, 601, 600, 599, 0,
	0, 548, 449, 324, 285, 320, 321, 328, 654, 651,
	454, 655, 783, 293, 528, 371, 0, 415, 344, 593,
	594, 0, 645, 862, 835, 836, 837, 773, 838, 832,
	833, 774, 834, 863, 826, 859, 860, 802, 829, 839,
	858, 840, 861, 864, 865, 905, 906, 846, 830, 257,
	907, 843, 866, 857, 856, 841, 827, 867, 868, 809,
	804, 844, 845, 831, 850, 851, 852, 775, 823, 824,
	825, 847, 848, 805, 806, 807, 808, 0, 0, 0,
	479, 480, 481, 503, 0, 465, 527, 652, 0, 0,
	0, 0, 0, 0, 0, 577, 589, 623, 0, 633,
	634, 636, 638, 853, 640, 439, 440, 647, 0, 3571,
	643, 3572, 3573, 375, 426, 445, 433, 819, 658, 518,
	519, 659, 629, 0, 768, 0, 402, 0, 0, 533,
	566, 555, 639, 521, 0, 0, 0, 0, 0, 0,
	771, 0, 0, 0, 337, 0, 0, 370, 570, 552,
	562, 553, 538, 539, 540, 547, 349, 541, 542, 543,
	513, 544, 514, 545, 546, 810, 569, 520, 435, 386,
	587, 586, 0, 0, 879, 887, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 763,
	0, 0, 800, 855, 854, 787, 797, 0, 0, 310,
	229, 515, 635, 517, 516, 2752, 0, 2753, 793, 796,
	792, 790, 791, 0, 870, 0, 0, 0, 0, 0,
	0, 755, 767, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 765,
	0, 0, 0, 0, 820, 0, 766, 0, 0, 815,
	794, 798, 0, 0, 0, 0, 300, 442, 461, 311,
	430, 474, 316, 438, 453, 306, 401, 427, 0, 0,
	302, 459, 437, 383, 360, 361, 301, 0, 421, 335,
	351, 332, 399, 795, 818, 822, 331, 893, 816, 469,
	304, 0, 468, 398, 455, 460, 384, 377, 0, 303,
	457, 382, 376, 364, 341, 894, 365, 366, 355, 410,
	374, 411, 356, 388, 387, 389, 0, 0, 0, 0,
	0, 497, 498, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 628, 813, 0,
	632, 0, 471, 0, 0, 877, 0, 0, 0, 441,
	0, 0, 367, 0, 0, 0, 817, 0, 424, 404,
	890, 0, 0, 422, 372, 456, 412, 462, 443, 470,
	418, 413, 294, 444, 334, 385, 307, 309, 329, 336,
	338, 342, 343, 394, 395, 407, 429, 446, 447, 448,
	333, 317, 423, 318, 353, 319, 295, 325, 323, 326,
	431, 327, 297, 408, 452, 0, 348, 419, 380, 298,
	379, 409, 451, 450, 308, 478, 484, 485, 574, 0,
	490, 662, 663, 664, 499, 0, 414, 504, 505, 506,
	508, 509, 510, 511, 575, 592, 559, 529, 492, 583,
	526, 530, 531, 358, 595, 0, 0, 0, 483, 368,
	369, 0, 340, 339, 381, 417, 299, 346, 291, 292,
	657, 874, 400, 597, 630, 631, 522, 0, 889, 869,
	871, 872, 876, 880, 881, 882, 883, 884, 886, 888,
	892, 656, 0, 576, 591, 660, 590, 653, 406, 0,
	428, 588, 535, 0, 580, 554, 0, 581, 550, 585,
	0, 524, 0, 436, 464, 476, 493, 496, 525, 610,
	611, 612, 296, 495, 614, 615, 616, 617, 618, 619,
	620, 613, 891, 557, 534, 560, 475, 537, 536, 0,
	0, 571, 821, 572, 573, 390, 391, 392, 393, 878,
	598, 315, 494, 416, 0, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 561, 665, 0, 621,
	622, 0, 0, 488, 489, 345, 352, 507, 354, 314,
	405, 347, 473, 362, 0, 500, 565, 501, 624, 627,
	625, 626, 397, 357, 359, 432, 363, 373, 420, 472,
	403, 425, 312, 463, 434, 378, 551, 578, 900, 873,
	899, 901, 902, 898, 903, 904, 885, 776, 0, 828,
	896, 895, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 605, 604, 603, 602, 601,
	600, 599, 0, 0, 548, 449, 324, 285, 320, 321,
	328, 654, 651, 454, 655, 783, 293, 528, 371, 0,
	415, 344, 593, 594, 0, 645, 862, 835, 836, 837,
	773, 838, 832, 833, 774, 834, 863, 826, 859, 860,
	802, 829, 839, 858, 840, 861, 864, 865, 905, 906,
	846, 830, 257, 907, 843, 866, 857, 856, 841, 827,
	867, 868, 809, 804, 844, 845, 831, 850, 851, 852,
	775, 823, 824, 825, 847, 848, 805, 806, 807, 808,
	0, 0, 0, 479, 480, 481, 503, 0, 465, 527,
	652, 0, 0, 0, 0, 0, 0, 0, 577, 589,
	623, 0, 633, 634, 636, 638, 853, 640, 439, 440,
	647, 0, 849, 643, 644, 641, 375, 426, 445, 433,
	819, 658, 518, 519, 659, 629, 0, 768, 0, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 1736,
	0, 0, 0, 771, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 810, 569,
	520, 435, 386, 587, 586, 0, 0, 879, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 763, 0, 0, 800, 855, 854, 787, 797,
	0, 0, 310, 229, 515, 635, 517, 516, 788, 0,
	789, 793, 796, 792, 790, 791, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 767, 0, 772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 765, 0, 0, 0, 0, 820, 0, 766,
	0, 0, 815, 794, 798, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 795, 818, 822, 331,
	893, 816, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 894, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 813, 0, 632, 0, 471, 0, 0, 877, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 817,
	0, 424, 404, 890, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 1737,
	1738, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 874, 400, 597, 630, 631, 522,
	0, 889, 869, 871, 872, 876, 880, 881, 882, 883,
	884, 886, 888, 892, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 891, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 821, 572, 573, 390, 391,
	392, 393, 878, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 900, 873, 899, 901, 902, 898, 903, 904, 885,
	776, 0, 828, 896, 895, 897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 783, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 862,
	835, 836, 837, 773, 838, 832, 833, 774, 834, 863,
	826, 859, 860, 802, 829, 839, 858, 840, 861, 864,
	865, 905, 906, 846, 830, 257, 907, 843, 866, 857,
	856, 841, 827, 867, 868, 809, 804, 844, 845, 831,
	850, 851, 852, 775, 823, 824, 825, 847, 848, 805,
	806, 807, 808, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 853,
	640, 439, 440, 647, 0, 849, 643, 644, 641, 375,
	426, 445, 433, 819, 658, 518, 519, 659, 629, 0,
	768, 0, 402, 0, 0, 533, 566, 555, 639, 521,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	337, 0, 0, 370, 570, 552, 562, 553, 538, 539,
	540, 547, 349, 541, 542, 543, 513, 544, 514, 545,
	546, 810, 569, 520, 435, 386, 587, 586, 0, 0,
	879, 887, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 763, 0, 0, 800, 855,
	854, 787, 797, 0, 0, 310, 229, 515, 635, 517,
	516, 788, 0, 789, 793, 796, 792, 790, 791, 0,
	870, 0, 0, 0, 0, 0, 0, 0, 767, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 764, 765, 0, 0, 0, 0,
	820, 0, 766, 0, 0, 815, 794, 798, 0, 0,
	0, 0, 300, 442, 461, 311, 430, 474, 316, 438,
	453, 306, 401, 427, 0, 0, 302, 459, 437, 383,
	360, 361, 301, 0, 421, 335, 351, 332, 399, 795,
	818, 822, 331, 893, 816, 469, 304, 0, 468, 398,
	455, 460, 384, 377, 0, 303, 457, 382, 376, 364,
	341, 894, 365, 366, 355, 410, 374, 411, 356, 388,
	387, 389, 0, 0, 0, 0, 0, 497, 498, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 628, 813, 0, 632, 0, 471, 0,
	0, 877, 0, 0, 0, 441, 0, 0, 367, 0,
	0, 0, 817, 0, 424, 404, 890, 0, 0, 422,
	372, 456, 412, 462, 443, 470, 418, 413, 294, 444,
	334, 385, 307, 309, 329, 336, 338, 342, 343, 394,
	395, 407, 429, 446, 447, 448, 333, 317, 423, 318,
	353, 319, 295, 325, 323, 326, 431, 327, 297, 408,
	452, 0, 348, 419, 380, 298, 379, 409, 451, 450,
	308, 478, 484, 485, 574, 0, 490, 662, 663, 664,
	499, 0, 414, 504, 505, 506, 508, 509, 510, 511,
	575, 592, 559, 529, 492, 583, 526, 530, 531, 358,
	595, 0, 0, 0, 483, 368, 369, 0, 340, 339,
	381, 417, 299, 346, 291, 292, 657, 874, 400, 597,
	630, 631, 522, 0, 889, 869, 871, 872, 876, 880,
	881, 882, 883, 884, 886, 888, 892, 656, 0, 576,
	591, 660, 590, 653, 406, 0, 428, 588, 535, 0,
	580, 554, 0, 581, 550, 585, 0, 524, 0, 436,
	464, 476, 493, 496, 525, 610, 611, 612, 296, 495,
	614, 615, 616, 617, 618, 619, 620, 613, 891, 557,
	534, 560, 475, 537, 536, 0, 0, 571, 821, 572,
	573, 390, 391, 392, 393, 878, 598, 315, 494, 416,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 564, 561, 665, 0, 621, 622, 0, 0, 488,
	489, 345, 352, 507, 354, 314, 405, 347, 473, 362,
	0, 500, 565, 501, 624, 627, 625, 626, 397, 357,
	359, 432, 363, 373, 420, 472, 403, 425, 312, 463,
	434, 378, 551, 578, 900, 873, 899, 901, 902, 898,
	903, 904, 885, 776, 0, 828, 896, 895, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 605, 604, 603, 602, 601, 600, 599, 0, 0,
	548, 449, 324, 285, 320, 321, 328, 654, 651, 454,
	655, 783, 293, 528, 371, 0, 415, 344, 593, 594,
	0, 645, 862, 835, 836, 837, 773, 838, 832, 833,
	774, 834, 863, 826, 859, 860, 802, 829, 839, 858,
	840, 861, 864, 865, 905, 906, 846, 830, 257, 907,
	843, 866, 857, 856, 841, 827, 867, 868, 809, 804,
	844, 845, 831, 850, 851, 852, 775, 823, 824, 825,
	847, 848, 805, 806, 807, 808, 0, 0, 0, 479,
	480, 481, 503, 0, 465, 527, 652, 0, 0, 0,
	0, 0, 0, 0, 577, 589, 623, 0, 633, 634,
	636, 638, 853, 640, 439, 440, 647, 0, 849, 643,
	644, 641, 375, 426, 445, 433, 819, 658, 518, 519,
	659, 629, 0, 768, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 810, 569, 520, 435, 386, 587,
	586, 0, 0, 879, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 800, 855, 854, 787, 797, 0, 0, 310, 229,
	515, 635, 517, 516, 788, 0, 789, 793, 796, 792,
	790, 791, 0, 870, 0, 0, 0, 0, 0, 0,
	755, 767, 0, 772, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 765, 0,
	0, 0, 0, 820, 0, 766, 0, 0, 815, 794,
	798, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 795, 818, 822, 331, 893, 816, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 894, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 813, 0, 632,
	0, 471, 0, 0, 877, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 817, 0, 424, 404, 890,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	662, 663, 664, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 657,
	874, 400, 597, 630, 631, 522, 0, 889, 869, 871,
	872, 876, 880, 881, 882, 883, 884, 886, 888, 892,
	656, 0, 576, 591, 660, 590, 653, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 891, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 821, 572, 573, 390, 391, 392, 393, 878, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 665, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 900, 873, 899,
	901, 902, 898, 903, 904, 885, 776, 0, 828, 896,
	895, 897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	654, 651, 454, 655, 783, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 862, 835, 836, 837, 773,
	838, 832, 833, 774, 834, 863, 826, 859, 860, 802,
	829, 839, 858, 840, 861, 864, 865, 905, 906, 846,
	830, 257, 907, 843, 866, 857, 856, 841, 827, 867,
	868, 809, 804, 844, 845, 831, 850, 851, 852, 775,
	823, 824, 825, 847, 848, 805, 806, 807, 808, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 652,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 853, 640, 439, 440, 647,
	0, 849, 643, 644, 641, 375, 426, 445, 433, 0,
	658, 518, 519, 659, 629, 0, 768, 206, 64, 197,
	168, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 198, 0, 0, 0,
	0, 0, 0, 189, 0, 337, 0, 199, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 140, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 167, 195, 204, 196, 124, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 221, 0, 0, 0,
	441, 0, 0, 367, 194, 188, 187, 487, 0, 424,
	404, 233, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 607, 608, 609, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 466, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 224, 579,
	582, 512, 234, 0, 576, 591, 549, 590, 235, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 138, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 232, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 239, 305, 454, 240, 0, 293, 528, 371,
	169, 415, 344, 593, 594, 61, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 236, 45, 222, 225, 227, 226, 0, 62, 577,
	589, 623, 5, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 143, 237, 518, 519, 238, 629, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 140, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 2424, 2427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 2428, 471, 0, 0, 0, 2423, 0, 2422,
	441, 2420, 2425, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 2426, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	169, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 228, 0, 0, 787, 797, 0, 0,
	310, 229, 515, 635, 517, 516, 788, 0, 789, 793,
	796, 792, 790, 791, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 794, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 795, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 206, 64, 197,
	168, 0, 0, 0, 0, 0, 0, 402, 684, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	690, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 688, 689, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	685, 687, 315, 494, 416, 699, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	169, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 1141, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 2588, 2591, 2592, 2593, 2594, 2595, 2596, 0, 2601,
	2597, 2598, 2599, 2600, 0, 2583, 2584, 2585, 2586, 1124,
	2567, 2589, 0, 2568, 398, 2569, 2570, 2571, 2572, 1128,
	2573, 2574, 2575, 2576, 2577, 2580, 2581, 2578, 2579, 2587,
	410, 374, 411, 356, 388, 387, 389, 1152, 1154, 1156,
	1158, 1161, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 2582, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 2590, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 2424, 2427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 2428, 471, 0, 0, 0, 2423, 0, 2422,
	441, 2420, 2425, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 2426, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 2445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 2444, 471, 0, 0, 0, 2450, 2447, 2449,
	441, 0, 2448, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 2442, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 2445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 2444, 471, 0, 0, 0, 2450, 2447, 2449,
	441, 0, 2448, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 0, 658, 518, 519, 659, 629, 402, 0, 0,
	533, 566, 555, 639, 521, 0, 0, 0, 0, 0,
	2137, 0, 0, 0, 0, 337, 0, 0, 370, 570,
	552, 562, 553, 538, 539, 540, 547, 349, 541, 542,
	543, 513, 544, 514, 545, 546, 0, 569, 520, 435,
	386, 587, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2138, 0, 0, 0,
	310, 229, 515, 635, 517, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 313, 0, 0, 1262, 1263,
	1264, 1261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 300, 442, 461,
	311, 430, 474, 316, 438, 453, 306, 401, 427, 0,
	0, 302, 459, 437, 383, 360, 361, 301, 0, 421,
	335, 351, 332, 399, 0, 458, 486, 331, 477, 0,
	469, 304, 0, 468, 398, 455, 460, 384, 377, 0,
	303, 457, 382, 376, 364, 341, 502, 365, 366, 355,
	410, 374, 411, 356, 388, 387, 389, 0, 0, 0,
	0, 0, 497, 498, 0, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 628, 0,
	0, 632, 0, 471, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 367, 0, 0, 0, 487, 0, 424,
	404, 661, 0, 0, 422, 372, 456, 412, 462, 443,
	470, 418, 413, 294, 444, 334, 385, 307, 309, 329,
	336, 338, 342, 343, 394, 395, 407, 429, 446, 447,
	448, 333, 317, 423, 318, 353, 319, 295, 325, 323,
	326, 431, 327, 297, 408, 452, 0, 348, 419, 380,
	298, 379, 409, 451, 450, 308, 478, 484, 485, 574,
	0, 490, 662, 663, 664, 499, 0, 414, 504, 505,
	506, 508, 509, 510, 511, 575, 592, 559, 529, 492,
	583, 526, 530, 531, 358, 595, 0, 0, 0, 483,
	368, 369, 0, 340, 339, 381, 417, 299, 346, 291,
	292, 657, 330, 400, 597, 630, 631, 522, 0, 584,
	523, 532, 322, 556, 568, 567, 396, 482, 0, 579,
	582, 512, 656, 0, 576, 591, 660, 590, 653, 406,
	0, 428, 588, 535, 0, 580, 554, 0, 581, 550,
	585, 0, 524, 0, 436, 464, 476, 493, 496, 525,
	610, 611, 612, 296, 495, 614, 615, 616, 617, 618,
	619, 620, 613, 467, 557, 534, 560, 475, 537, 536,
	0, 0, 571, 491, 572, 573, 390, 391, 392, 393,
	350, 598, 315, 494, 416, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 563, 564, 561, 665, 0,
	621, 622, 0, 0, 488, 489, 345, 352, 507, 354,
	314, 405, 347, 473, 362, 0, 500, 565, 501, 624,
	627, 625, 626, 397, 357, 359, 432, 363, 373, 420,
	472, 403, 425, 312, 463, 434, 378, 551, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 605, 604, 603, 602,
	601, 600, 599, 0, 0, 548, 449, 324, 285, 320,
	321, 328, 654, 651, 454, 655, 0, 293, 528, 371,
	0, 415, 344, 593, 594, 0, 645, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 596, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 479, 480, 481, 503, 0, 465,
	527, 652, 0, 0, 0, 0, 0, 0, 0, 577,
	589, 623, 0, 633, 634, 636, 638, 637, 640, 439,
	440, 647, 0, 642, 643, 644, 641, 375, 426, 445,
	433, 206, 658, 518, 519, 659, 629, 0, 0, 0,
	0, 402, 0, 0, 533, 566, 555, 639, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 370, 570, 552, 562, 553, 538, 539, 540,
	547, 349, 541, 542, 543, 513, 544, 514, 545, 546,
	140, 569, 520, 435, 386, 587, 586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2187, 0, 228, 0, 0,
	0, 0, 0, 0, 310, 229, 515, 635, 517, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 442, 461, 311, 430, 474, 316, 438, 453,
	306, 401, 427, 0, 0, 302, 459, 437, 383, 360,
	361, 301, 0, 421, 335, 351, 332, 399, 0, 458,
	486, 331, 477, 0, 469, 304, 0, 468, 398, 455,
	460, 384, 377, 0, 303, 457, 382, 376, 364, 341,
	502, 365, 366, 355, 410, 374, 411, 356, 388, 387,
	389, 0, 0, 0, 0, 0, 497, 498, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 628, 0, 0, 632, 0, 471, 0, 0,
	0, 0, 0, 0, 441, 0, 0, 367, 0, 0,
	0, 487, 0, 424, 404, 661, 0, 0, 422, 372,
	456, 412, 462, 443, 470, 418, 413, 294, 444, 334,
	385, 307, 309, 329, 336, 338, 342, 343, 394, 395,
	407, 429, 446, 447, 448, 333, 317, 423, 318, 353,
	319, 295, 325, 323, 326, 431, 327, 297, 408, 452,
	0, 348, 419, 380, 298, 379, 409, 451, 450, 308,
	478, 484, 485, 574, 0, 490, 662, 663, 664, 499,
	0, 414, 504, 505, 506, 508, 509, 510, 511, 575,
	592, 559, 529, 492, 583, 526, 530, 531, 358, 595,
	0, 0, 0, 483, 368, 369, 0, 340, 339, 381,
	417, 299, 346, 291, 292, 657, 330, 400, 597, 630,
	631, 522, 0, 584, 523, 532, 322, 556, 568, 567,
	396, 482, 0, 579, 582, 512, 656, 0, 576, 591,
	660, 590, 653, 406, 0, 428, 588, 535, 0, 580,
	554, 0, 581, 550, 585, 0, 524, 0, 436, 464,
	476, 493, 496, 525, 610, 611, 612, 296, 495, 614,
	615, 616, 617, 618, 619, 620, 613, 467, 557, 534,
	560, 475, 537, 536, 0, 0, 571, 491, 572, 573,
	390, 391, 392, 393, 350, 598, 315, 494, 416, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	564, 561, 665, 0, 621, 622, 0, 0, 488, 489,
	345, 352, 507, 354, 314, 405, 347, 473, 362, 0,
	500, 565, 501, 624, 627, 625, 626, 397, 357, 359,
	432, 363, 373, 420, 472, 403, 425, 312, 463, 434,
	378, 551, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	605, 604, 603, 602, 601, 600, 599, 0, 0, 548,
	449, 324, 285, 320, 321, 328, 654, 651, 454, 655,
	0, 293, 528, 371, 169, 415, 344, 593, 594, 0,
	645, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 596, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 479, 480,
	481, 503, 0, 465, 527, 652, 0, 0, 0, 0,
	0, 0, 0, 577, 589, 623, 0, 633, 634, 636,
	638, 637, 640, 439, 440, 647, 0, 642, 643, 644,
	641, 375, 426, 445, 433, 206, 658, 518, 519, 659,
	629, 0, 0, 0, 0, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 0, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 140, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 2172,
	0, 228, 0, 0, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 461, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 0, 469, 304,
	0, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 661,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 418,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	662, 663, 664, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 657,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	656, 0, 576, 591, 660, 590, 653, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 620,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 491, 572, 573, 390, 391, 392, 393, 350, 598,
	315, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 665, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 397, 357, 359, 432, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 378, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	654, 651, 454, 655, 0, 293, 528, 371, 169, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 652,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 647,
	0, 642, 643, 644, 641, 375, 426, 445, 433, 0,
	658, 518, 519, 659, 629, 402, 0, 0, 533, 566,
	555, 639, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 1052, 0, 370, 570, 552, 562,
	553, 538, 539, 540, 547, 349, 541, 542, 543, 513,
	544, 514, 545, 546, 0, 569, 520, 435, 386, 587,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 1059, 1060, 0, 0, 0, 0, 310, 229,
	515, 635, 517, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 300, 442, 1046, 311, 430,
	474, 316, 438, 453, 306, 401, 427, 0, 0, 302,
	459, 437, 383, 360, 361, 301, 0, 421, 335, 351,
	332, 399, 0, 458, 486, 331, 477, 1033, 469, 304,
	1032, 468, 398, 455, 460, 384, 377, 0, 303, 457,
	382, 376, 364, 341, 502, 365, 366, 355, 410, 374,
	411, 356, 388, 387, 389, 0, 0, 0, 0, 0,
	497, 498, 0, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 632,
	0, 471, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 367, 0, 0, 0, 487, 0, 424, 404, 661,
	0, 0, 422, 372, 456, 412, 462, 443, 470, 1050,
	413, 294, 444, 334, 385, 307, 309, 329, 336, 338,
	342, 343, 394, 395, 407, 429, 446, 447, 448, 333,
	317, 423, 318, 353, 319, 295, 325, 323, 326, 431,
	327, 297, 408, 452, 0, 348, 419, 380, 298, 379,
	409, 451, 450, 308, 478, 484, 485, 574, 0, 490,
	662, 663, 664, 499, 0, 414, 504, 505, 506, 508,
	509, 510, 511, 575, 592, 559, 529, 492, 583, 526,
	530, 531, 358, 595, 0, 0, 0, 483, 368, 369,
	0, 340, 339, 381, 417, 299, 346, 291, 292, 657,
	330, 400, 597, 630, 631, 522, 0, 584, 523, 532,
	322, 556, 568, 567, 396, 482, 0, 579, 582, 512,
	656, 0, 576, 591, 660, 590, 653, 406, 0, 428,
	588, 535, 0, 580, 554, 0, 581, 550, 585, 0,
	524, 0, 436, 464, 476, 493, 496, 525, 610, 611,
	612, 296, 495, 614, 615, 616, 617, 618, 619, 1051,
	613, 467, 557, 534, 560, 475, 537, 536, 0, 0,
	571, 1054, 572, 573, 390, 391, 392, 393, 350, 598,
	1049, 494, 416, 0, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 564, 561, 665, 0, 621, 622,
	0, 0, 488, 489, 345, 352, 507, 354, 314, 405,
	347, 473, 362, 0, 500, 565, 501, 624, 627, 625,
	626, 1061, 1047, 1057, 1048, 363, 373, 420, 472, 403,
	425, 312, 463, 434, 1058, 551, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 605, 604, 603, 602, 601, 600,
	599, 0, 0, 548, 449, 324, 285, 320, 321, 328,
	654, 651, 454, 655, 0, 293, 528, 371, 0, 415,
	344, 593, 594, 0, 645, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 596,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 479, 480, 481, 503, 0, 465, 527, 652,
	0, 0, 0, 0, 0, 0, 0, 577, 589, 623,
	0, 633, 634, 636, 638, 637, 640, 439, 440, 647,
	0, 642, 643, 644, 641, 1045, 426, 445, 433, 206,
	658, 518, 519, 659, 629, 0, 0, 0, 0, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 140, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2069, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 169, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 1059, 1060, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 1033, 469, 304, 1032, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 1061, 2090, 1057, 2091, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 1058, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 2981,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 2984, 0, 0, 0, 2983,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 1558, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1554, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 1552, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1554, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4078, 0, 228, 855, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1554, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 2489, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 981, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1766, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 2529, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2531, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 2137, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2138, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 3200, 3202,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 2552, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 671, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 855, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4055, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 3809, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 3945,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1780, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3824, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 3733,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 3232, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2069, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 3448,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2531, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 2899,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2650, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2610, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 2377, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 1920,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 2051, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1556, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 1956, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 1585, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 682, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 981, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	3178, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 1906, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 1535, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 1533, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 1412, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 418, 413, 294, 444, 334, 385, 307,
	309, 750, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 620, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629, 402,
	0, 0, 533, 566, 555, 639, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
	370, 570, 552, 562, 553, 538, 539, 540, 547, 349,
	541, 542, 543, 513, 544, 514, 545, 546, 0, 569,
	520, 435, 386, 587, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 310, 229, 515, 635, 517, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	442, 461, 311, 430, 474, 316, 438, 453, 306, 401,
	427, 0, 0, 302, 459, 437, 383, 360, 361, 301,
	0, 421, 335, 351, 332, 399, 0, 458, 486, 331,
	477, 0, 469, 304, 0, 468, 398, 455, 460, 384,
	377, 0, 303, 457, 382, 376, 364, 341, 502, 365,
	366, 355, 410, 374, 411, 356, 388, 387, 389, 0,
	0, 0, 0, 0, 497, 498, 0, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 632, 0, 471, 0, 0, 0, 0,
	0, 0, 441, 0, 0, 367, 0, 0, 0, 487,
	0, 424, 404, 661, 0, 0, 422, 372, 456, 412,
	462, 443, 470, 707, 413, 294, 444, 334, 385, 307,
	309, 329, 336, 338, 342, 343, 394, 395, 407, 429,
	446, 447, 448, 333, 317, 423, 318, 353, 319, 295,
	325, 323, 326, 431, 327, 297, 408, 452, 0, 348,
	419, 380, 298, 379, 409, 451, 450, 308, 478, 484,
	485, 574, 0, 490, 662, 663, 664, 499, 0, 414,
	504, 505, 506, 508, 509, 510, 511, 575, 592, 559,
	529, 492, 583, 526, 530, 531, 358, 595, 0, 0,
	0, 483, 368, 369, 0, 340, 339, 381, 417, 299,
	346, 291, 292, 657, 330, 400, 597, 630, 631, 522,
	0, 584, 523, 532, 322, 556, 568, 567, 396, 482,
	0, 579, 582, 512, 656, 0, 576, 591, 660, 590,
	653, 406, 0, 428, 588, 535, 0, 580, 554, 0,
	581, 550, 585, 0, 524, 0, 436, 464, 476, 493,
	496, 525, 610, 611, 612, 296, 495, 614, 615, 616,
	617, 618, 619, 708, 613, 467, 557, 534, 560, 475,
	537, 536, 0, 0, 571, 491, 572, 573, 390, 391,
	392, 393, 350, 598, 315, 494, 416, 0, 558, 0,
	0, 0, 0, 0, 0, 0, 0, 563, 564, 561,
	665, 0, 621, 622, 0, 0, 488, 489, 345, 352,
	507, 354, 314, 405, 347, 473, 362, 0, 500, 565,
	501, 624, 627, 625, 626, 397, 357, 359, 432, 363,
	373, 420, 472, 403, 425, 312, 463, 434, 378, 551,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 605, 604,
	603, 602, 601, 600, 599, 0, 0, 548, 449, 324,
	285, 320, 321, 328, 654, 651, 454, 655, 0, 293,
	528, 371, 0, 415, 344, 593, 594, 0, 645, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 596, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 479, 480, 481, 503,
	0, 465, 527, 652, 0, 0, 0, 0, 0, 0,
	0, 577, 589, 623, 0, 633, 634, 636, 638, 637,
	640, 439, 440, 647, 0, 642, 643, 644, 641, 375,
	426, 445, 433, 0, 658, 518, 519, 659, 629,
}

var yyPact = [...]int{
	368, -1000, -1000, -1000, -337, 16044, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 427, 50636, -335, 32076, 48716, -1000, -1000, 2874, -1000,
	49356, 17984, 50636, 522, 519, 50636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1003, -1000, 55116, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 906, 797, 54476, 12177,
	-216, -1000, 1804, -38, 2718, 486, -206, -207, 1217, 1243,
	1337, 1228, 50636, 1186, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, 1073, 49996,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3990, 245, 996, 1073, 23112, 148,
	114, 1804, 505, -78, 234, -1000, 1765, 4124, 198, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12177, 12177, 16044, -371, 16044, 12177, 50636, 50636, -1000, -1000,
	-1000, -1000, -335, 49356, 906, 797, 12177, 2718, 486, -206,
	-207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -78, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 114, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5143, -1000,
	1723, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2442, 3233, 1712, 2717,
	841, 48716, 50636, -1000, 145, 841, -1000, -1000, -1000, 1804,
	3697, -1000, 50636, 50636, 227, 2008, -1000, 500, 451, 444,
	437, 349, 1686, -1000, -1000, -1000, -1000, -1000, -1000, 718,
	3662, -1000, 50636, 50636, 3245, 50636, -1000, 2411, 765, -1000,
	4163, 3446, 1401, 1040, 3266, -1000, -1000, 3232, -1000, 354,
	1241, 503, 805, 426, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 395, -1000, 3520, -1000, -1000, 337, -1000, -1000, 338,
	-1000, -1000, -1000, 111, -1000, -1000, -1000, -1000, -1000, -1000,
	24, -1000, -1000, 1278, 2076, 12177, 2743, -1000, 2925, 1729,
	-1000, -1000, -1000, 7670, 14749, 14749, 14749, 14749, 50636, -1000,
	-1000, 3058, 12177, 3229, 3226, 3225, 3221, -1000, -1000, -1000,
	-1000, -1000, -1000, 3220, 1685, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2146, -1000, -1000, -1000, 15392, -1000,
	3219, 3217, 3215, 3213, 3211, 3206, 3205, 3199, 3198, 3197,
	3195, 3194, 3192, 3190, 2940, 17334, 3189, 2716, 2715, 3188,
	3183, 3181, 2712, 3177, 3168, 3167, 2940, 2940, 3166, 3158,
	3145, 3144, 3142, 3141, 3140, 3138, 3136, 3131, 3129, 3128,
	3126, 3125, 3124, 3123, 3118, 3117, 3116, 3102, 3101, 3099,
	3095, 3094, 3093, 3090, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1491, -1000,
	3089, 3673, 2970, -1000, 3537, 3527, 3521, 3503, -270, 3087,
	2370, -1000, -1000, 107, 3660, 50636, -290, 50636, 415, -89,
	-94, -95, -1000, -55, -1000, -1000, 1209, -1000, 1169, 53836,
	973, -1000, -1000, 50636, 891, 891, 891, 50636, 50636, 228,
	1064, 891, 891, 891, 891, 891, 977, 891, 3568, 994,
	993, 990, 989, 891, -24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2004, 2003, 3340, 1120, -1000, -1000, -1000, -1000,
	1551, 50636, -1000, 3024, 415, -318, 1949, 1949, 3638, 3638,
	3567, 3565, 808, 806, 803, 1949, 582, -1000, 1924, 1924,
	1924, 1924, 1949, 552, 824, 3571, 3571, 128, 1924, 97,
	1949, 1949, 97, 1949, 1949, -1000, 1994, 309, -276, -1000,
	-1000, -1000, -1000, 1924, 1924, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3534, 3519, 906, 906, 50636, 906, 218, 50636,
	906, 906, 906, 50636, 922, -325, 53, 53196, 52556, 2597,
	2411, 762, 744, 1558, 1905, -1000, 1824, 50636, 50636, 1824,
	1824, 26316, 25676, -1000, 50636, -1000, 3673, 2970, 2903, 1721,
	2895, 2970, -99, 415, 906, 906, 906, 906, 906, 291,
	906, 906, 906, 906, 906, 50636, 50636, 48076, 906, 906,
	906, 906, 10242, 1765, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16044, 2170, 2365,
	196, -15, -311, 280, -1000, -1000, 50636, 3397, 319, -1000,
	-1000, -1000, 3008, -1000, 3013, 3013, 3013, 3013, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3013, 3013,
	3023, 3083, -1000, -1000, 3010, 3010, 3010, 3008, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3016, 3016, 3018, 3018, 3016, 50636, -120,
	-1000, -1000, 12177, 50636, 3440, 411, 3082, 841, -1000, -1000,
	50636, 308, 504, 3673, 3435, 3571, 3632, -1000, -1000, 1684,
	2368, 2710, -1000, 349, -1000, 412, 349, -1000, 579, 579,
	1948, -1000, 1238, -1000, -1000, -1000, -1000, -1000, -1000, 50636,
	24, 471, -1000, -1000, 2677, 3081, -1000, 657, 1363, 1622,
	-1000, 394, 4701, 41036, 2411, 41036, 50636, -1000, -1000, -1000,
	-1000, -1000, -1000, 106, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 353, -1000,
	12177, 12177, 12177, 12177, 12177, -1000, 1004, 14106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14749, 14749, 14749, 14749, 14749,
	14749, 14749, 14749, 14749, 14749, 14749, 14749, 3057, 2087, 14749,
	14749, 14749, 14749, 28876, 1721, 3579, 1557, 312, 1729, 1729,
	1729, 1729, 12177, -1000, 1939, 2076, 12177, 12177, 12177, 12177,
	35276, 50636, -1000, -1000, 5737, 12177, 12177, 4380, 12177, 3478,
	12177, 12177, 12177, 2890, 6375, 50636, 12177, -1000, 2888, 2887,
	-1000, -1000, 2271, 12177, -1000, -1000, 12177, -1000, -1000, 12177,
	14749, 12177, -1000, 12177, 12177, 12177, -1000, -1000, 785, 3478,
	3478, 3478, 2048, 12177, 12177, 3478, 3478, 3478, 2015, 3478,
	3478, 3478, 3478, 3478, 3478, 3478, 3478, 3478, 3478, 3478,
	2884, 2883, 2882, 11534, 3571, -216, -1000, 9599, 3435, 3571,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-272, 3068, 50636, 2702, 2699, -344, 177, 491, 50636, 1215,
	-1000, -1000, 50636, 2367, 50636, 2366, 104, 1229, 1176, 1183,
	-1000, -1000, 50636, 51916, -1000, 50636, 2005, 50636, 50636, 3468,
	-1000, 3065, 50636, 891, 891, 891, -1000, 46156, 41036, 50636,
	50636, 2411, 50636, 50636, 50636, 891, 891, 891, 891, 50636,
	-1000, 3378, 41036, 3368, 922, -1000, 50636, 1551, 3464, 50636,
	-1000, -1000, -1000, -1000, 3638, 14749, 14749, -1000, -1000, 12177,
	-1000, 282, 47436, 1924, 1949, 1949, -1000, -1000, 50636, -1000,
	-1000, -1000, 1924, 50636, 1924, 1924, 3638, 1924, -1000, -1000,
	-1000, 1949, 1949, -1000, -1000, 12177, -1000, -1000, 1924, 1924,
	-1000, -1000, 3638, 50636, 102, 3638, 3638, 136, -1000, -1000,
	-1000, 1949, 50636, 50636, 891, 50636, -1000, 50636, 50636, -1000,
	-1000, 50636, 50636, 4555, 50636, 46156, 46796, 3513, -1000, 41036,
	50636, 50636, 1534, -1000, 972, 38476, -1000, 50636, 1464, -1000,
	62, -1000, 92, 53, 1824, 53, 1824, 964, -1000, 656,
	653, 24396, 599, 41036, 7018, -1000, -1000, 1824, 1824, 7018,
	7018, 1730, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1529,
	-1000, 299, 3571, -1000, -1000, -1000, -1000, -1000, 2358, -1000,
	50636, 46156, 41036, 2411, 50636, 906, 50636, 50636, 50636, 50636,
	50636, -1000, 3060, 1681, -1000, 3445, 50636, 50636, 50636, 50636,
	1601, -1000, -1000, 21184, 1671, -1000, -1000, 2023, -1000, 12177,
	16044, -249, 12177, 16044, 16044, 12177, 16044, -1000, 12177, 300,
	-1000, -1000, -1000, -1000, 2351, -1000, 2350, -1000, -1000, -1000,
	-1000, -1000, 2683, 2683, -1000, 2347, -1000, -1000, -1000, -1000,
	2333, -1000, -1000, 2332, -1000, -1000, -1000, -1000, -157, 2879,
	1278, -1000, 2679, 3259, -217, -1000, 22472, 50636, 50636, 411,
	-352, 2000, 1993, 1988, 3550, -1000, -217, -1000, 21828, 50636,
	3571, -1000, -227, 3435, 12177, 50636, -1000, 3564, -1000, -1000,
	349, -1000, -1000, -1000, 579, 492, -1000, -1000, -1000, -1000,
	-1000, -1000, 1665, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -79, -85, 1525, -1000, 50636, -1000, -1000,
	394, 41036, 42956, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	279, -1000, -1000, 188, -1000, 963, 263, 1947, -1000, -1000,
	225, 211, 216, 1072, 2076, -1000, 2032, 2032, 2025, -1000,
	802, -1000, -1000, -1000, -1000, 3058, -1000, -1000, -1000, 2785,
	2509, -1000, 2315, 2315, 1737, 1737, 1737, 1737, 1737, 2149,
	2149, -1000, -1000, -1000, 7670, 3057, 14749, 14749, 14749, 14749,
	1006, 1006, 2431, 3629, -1000, -1000, -1000, -1000, 12177, 173,
	2017, -1000, 12177, 2788, 1559, 2508, 1607, 1933, -1000, 3008,
	12177, 1656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2870, 2869, 2698, 3659, 2868, 12177, -1000, -1000,
	1919, 1918, 1906, -1000, 2596, 10891, -1000, -1000, -1000, 2865,
	1644, 2860, -1000, -1000, -1000, 2859, 1904, 1338, 2858, 2120,
	2856, 2854, 2853, 2851, 1497, 12177, 12177, 12177, 12177, 2839,
	1893, 1883, 12177, 12177, 12177, 12177, 2834, 12177, 12177, 12177,
	12177, 12177, 12177, 12177, 12177, 12177, 12177, 50636, 180, 180,
	180, 1494, 1493, -1000, -1000, 1882, -1000, 2076, -1000, -1000,
	3435, -1000, 3056, 2325, 1486, -1000, -1000, -332, 2600, 50636,
	50636, 175, 50636, 2672, -291, 50636, -1000, -1000, 2669, -1000,
	-1000, -1000, 1230, 1140, 1168, -1000, 50636, -1000, 2667, 3442,
	3563, 890, 50636, 1391, 3054, 50636, 50636, 50636, 286, -1000,
	-1000, 1465, -1000, 263, 3, 530, 1373, 3244, 3658, -122,
	50636, 50636, 50636, 50636, 3462, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45516, -1000, 3053, 1861, -1000, -1000, 1729,
	1729, 2076, 50636, 50636, 50636, 3242, 50636, 50636, 3638, 3638,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1924, 3638, 3638,
	1452, 1949, 1924, -1000, -1000, 1924, -352, -1000, 1924, -1000,
	-352, 1637, -352, 50636, -1000, -1000, -1000, 3458, 3024, 1470,
	-1000, -1000, -1000, 3630, 1522, 885, 885, 1156, 883, 3628,
	19904, -1000, 1811, 1359, 961, 3370, 352, -1000, 1811, -154,
	851, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 701, 692,
	1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
	1811, 1242, 1811, 1811, 1811, 1811, 1811, -1000, 1811, 3052,
	513, -1000, -1000, -1000, -1000, -1000, -1000, 786, 607, 285,
	3511, 386, -1000, 396, 1465, 679, 3509, 425, 50636, 50636,
	3120, 1457, -1000, -1000, -1000, -1000, -1000, 29516, 29516, 23756,
	29516, -1000, 208, 1824, 53, 79, -1000, -1000, 1464, 7018,
	1464, 7018, 2324, -1000, -1000, 958, -1000, -1000, 1373, -1000,
	50636, 50636, -1000, -1000, 3046, 1987, -1000, -1000, 17334, -1000,
	7018, 7018, -1000, -1000, 31436, 50636, -1000, 22, -1000, 31,
	3435, -1000, 1364, -1000, -1000, 1454, 1373, 3258, 50636, 1364,
	1364, 1364, -1000, -1000, 18624, 50636, 50636, -1000, -1000, -1000,
	-305, 3638, 10242, -1000, 38476, -1000, -1000, 44876, -1000, 44236,
	1854, -1000, 16044, 2274, 193, -1000, 261, -315, 191, 2117,
	189, 2076, -1000, -1000, 2826, 2824, 1853, -1000, 1851, 2822,
	1850, 1849, 2320, -1000, 93, -1000, 3410, 1374, -1000, 3041,
	-1000, 1839, 3337, -1000, 1453, -1000, 1974, 1834, -1000, -1000,
	-1000, 12177, 43596, 12177, 1094, 1374, 1832, 3336, 1453, 3435,
	2661, -1000, 1435, -1000, 2486, 1633, 204, -1000, -1000, -1000,
	50636, 2677, 1821, 42956, 1387, -1000, 957, 1627, 1593, -1000,
	41036, 345, 41036, -1000, 41036, -1000, -1000, 410, -1000, 50636,
	3431, -1000, -1000, -1000, 2600, 1973, -351, 50636, -1000, -1000,
	-1000, -1000, -1000, 1815, -1000, 1006, 1006, 2431, 3091, -1000,
	14749, -1000, 14749, 3557, -1000, 1852, -1000, 12177, 2252, 5045,
	12177, 5045, 1634, 27596, 35276, -109, 3439, 3531, 50636, -1000,
	-1000, 12177, 12177, -1000, 3516, -1000, -1000, -1000, -1000, 12177,
	12177, 2342, -1000, 50636, -1000, -1000, -1000, -1000, 27596, -1000,
	14749, -1000, -1000, -1000, -1000, 12177, 1410, 1410, 3508, 1813,
	180, 180, 180, 3492, 3485, 3466, 1812, 180, 3350, 3333,
	3326, 3292, 3230, 3223, 3179, 3173, 3134, 3033, 1808, -1000,
	3039, -1000, -1000, 2110, 13463, 9599, -1000, -1000, 310, 1433,
	2319, 2659, 133, -1000, 1969, -1000, 2658, 50636, 50636, 1212,
	-1000, 50636, 3652, -1000, -1000, -1000, -1000, 1117, -1000, 2655,
	-1000, 276, 266, 2218, 313, 2821, 1431, -1000, -1000, 50636,
	-1000, -1000, -1000, 18624, 3024, 3038, 3024, 147, 1811, 645,
	41036, 727, -1000, 50636, 2123, 1968, 3253, 838, 3388, 50636,
	3036, 416, 3035, 3028, 3451, 487, 5295, 50636, 1425, -1000,
	1590, 4124, -1000, 50636, -1000, -1000, 50636, -1000, 2411, -1000,
	1949, -1000, -1000, 3638, -1000, -1000, 12177, 12177, 3638, 1949,
	1949, -1000, 1924, -1000, 50636, -1000, -352, 487, 5295, 3450,
	4759, 789, 2602, -1000, 50636, -1000, -1000, -1000, 943, -1000,
	1115, 891, 50636, 2092, 1115, 2090, 3027, -1000, -1000, 50636,
	50636, 50636, 50636, -1000, -1000, 50636, -1000, 50636, 50636, 50636,
	50636, 50636, 42316, -1000, 50636, 50636, -1000, 50636, 2083, 50636,
	2072, 3403, -1000, 1811, 1811, 1071, -1000, -1000, 639, -1000,
	42316, 2318, 2316, 2312, 2308, 2642, 2635, 2634, 1811, 1811,
	2306, 2626, 41676, 2624, 1283, 2305, 2304, 2301, 2311, 2622,
	1090, -1000, 2614, 2307, 2283, 2275, 50636, 3026, 2523, 496,
	-1000, -1000, 2218, 147, 1811, 384, 50636, 1967, 1966, 645,
	609, 609, 526, 0, 25036, -1000, -1000, -1000, 50636, 38476,
	38476, 38476, 38476, 38476, 38476, -1000, 3314, 3285, 3025, -1000,
	3297, 3282, 3317, 3304, 3097, 50636, 38476, 3024, -1000, 41676,
	-1000, -1000, -1000, 1721, 1805, 3929, 1128, 12177, 7018, -1000,
	-1000, 48, 61, -1000, -1000, -1000, -1000, 41036, 2613, 599,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3562, 50636, 50636,
	848, 2813, 1426, -1000, -1000, -1000, 5295, 3013, 3013, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3013, 3013,
	3023, -1000, -1000, 3010, 3010, 3010, 3008, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3016, 3016, 3018,
	3018, 3016, -1000, -1000, -1000, -1000, 3631, -1000, 1422, -1000,
	-1000, 1589, -1000, 2001, -339, 16044, 1825, 1798, -1000, 12177,
	16044, 12177, -250, 369, -258, -1000, -1000, -1000, 2606, -1000,
	-1000, -1000, 2300, -1000, 2297, -1000, 202, 212, 2067, -217,
	9599, 497, 50636, -217, 50636, 9599, -1000, 50636, 168, -363,
	-365, 160, 2605, 458, -217, 3562, 93, 12177, 3366, -1000,
	-1000, 50636, 2296, -1000, -1000, -1000, 3646, 41036, 2411, 1762,
	40396, -1000, 333, -1000, 275, 635, 2604, -1000, 987, 132,
	2601, 2600, -1000, -1000, -1000, -1000, 14749, 1729, -1000, -1000,
	-1000, 2076, 12177, 2812, -1000, 1122, 1122, 2503, 2809, 2808,
	-1000, 3013, 3013, -1000, 3008, 3010, 3008, 1122, 1122, 2807,
	-1000, 3007, -1000, 3439, -1000, 2475, 3020, -1000, 3002, 2966,
	12177, -1000, 2806, 3014, 1512, -41, -186, 180, 180, -1000,
	-1000, -1000, -1000, 180, 180, 180, 180, -1000, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 846,
	-101, -281, -104, -285, -1000, 2799, 1416, -1000, -1000, -1000,
	-1000, -1000, 4380, 1399, 547, 547, 2600, 2595, -1000, 930,
	2592, 1227, 50636, 2590, -295, -1000, 2582, -1000, -1000, 50636,
	50636, 50636, 51276, 604, 50636, 50636, 2580, -1000, 2577, 2572,
	1391, 5295, 2795, 3449, 19264, 3448, 2378, -1000, -1000, -1000,
	30796, 609, -1000, -1000, -1000, 729, 484, 2292, 605, -1000,
	50636, 541, 3349, 1962, 2571, 50636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3388, -1000, 1104, 477, 37196, 16694,
	-1000, 402, 50636, -1000, 19264, 19264, 402, 445, 2051, -1000,
	841, 1395, 140, 38476, 50636, -1000, 37836, 2793, -1000, -1000,
	1373, 3638, -1000, 2076, 2076, -352, 3638, 3638, 1949, -1000,
	-1000, 445, -1000, 402, -1000, 1530, 20544, 562, 548, 535,
	-1000, 688, -1000, -1000, 816, 3373, 5295, -1000, 50636, -1000,
	50636, -1000, 50636, 50636, 891, 12177, 3373, 50636, 928, -1000,
	1249, 524, 494, 783, 783, 1398, -1000, 3439, -1000, -1000,
	1389, -1000, -1000, -1000, -1000, 50636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27596, 27596, 3506, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2555,
	2554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50636, 1800, -1000, 1960, 2290, 2552, 2378, 30796, 1959, 1824,
	2550, 2547, 609, -1000, 2546, 2544, -1000, 2123, 1955, 984,
	50636, -1000, 1365, 50636, 50636, -1000, 1501, -1000, 1952, 3238,
	3250, 3238, -1000, 3238, -1000, -1000, -1000, -1000, 3298, 2543,
	-1000, 3289, -1000, 3288, -1000, -1000, -1000, -1000, 1501, -1000,
	-1000, -1000, -1000, -1000, 1128, -1000, 3561, 1115, 1115, 1115,
	2782, -1000, -1000, -1000, -1000, 1387, 2781, -1000, -1000, -1000,
	3668, -1000, -1000, -1000, -1000, -1000, -1000, 18624, 3385, 3635,
	3619, 39756, -1000, -339, 1802, -1000, 2130, 186, 1995, 50636,
	-1000, -1000, -1000, 2778, 2777, -230, 217, 3617, 3616, 1144,
	-1000, 2776, 1379, -217, -1000, -1000, 1374, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -367, -217, -1000, 1374, -1000, 202,
	-1000, -1000, 3422, -1000, -1000, 2411, -1000, 272, -1000, -1000,
	-1000, -1000, -1000, -1000, 243, -1000, 50636, -1000, 1377, 131,
	-1000, 2076, -1000, -1000, -1000, -1000, -1000, 5045, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2542, -1000,
	-1000, 12177, -1000, -1000, -1000, 2711, -1000, -1000, 12177, 2774,
	2540, 2772, 2539, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3673, -1000, 3615, 1799, 2771, 2768, 1786, 2767, 2766, -1000,
	12177, 2764, 4380, 1092, 2538, 1092, -1000, -1000, 409, 30156,
	50636, 3644, -1000, 50636, 2536, -1000, -1000, 50636, 2218, 601,
	2218, 691, 50636, -305, -1000, -1000, -1000, -1000, 1009, 402,
	2761, 1376, -1000, -1000, -1000, -1000, 402, -1000, 2534, 257,
	-1000, -1000, -1000, -1000, 2280, -1000, -1000, 2249, 1635, 273,
	-1000, -1000, -1000, -1000, -1000, -1000, 2152, 50636, 39116, 2321,
	1946, -354, -1000, 3006, -1000, 1811, 1811, 1811, 50636, 1785,
	-1000, 1811, 1811, 2759, -1000, -1000, 2754, 2752, -133, 865,
	1938, 1841, -1000, 2269, 29516, 38476, 37836, 1455, -1000, 1587,
	-1000, -1000, -1000, -1000, -1000, -1000, 3638, 865, -1000, 555,
	2263, 14749, 3004, 14749, 3001, 576, 2978, 1752, -1000, 50636,
	-1000, -1000, 50636, 4203, 2973, -1000, 2972, 3240, 538, 2963,
	2962, 50636, 2673, -1000, 3373, 50636, 820, 3381, -1000, -1000,
	-1000, 419, -1000, -1000, -1000, 610, -1000, 50636, -1000, 50636,
	-1000, 1728, -1000, 27596, -1000, -1000, 1751, -1000, 2523, 2522,
	4380, -1000, -1000, 257, 2518, 7018, -1000, -1000, -1000, -1000,
	-1000, 3349, 2517, 2152, 50636, -1000, 50636, 1365, 1365, 3673,
	50636, 9599, -1000, -1000, 12177, 2961, -1000, 12177, -1000, -1000,
	-1000, 2750, -1000, -1000, -1000, -1000, -1000, 2960, 3353, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1910, -1000, 12177, 12820,
	-1000, 889, 16044, -259, 363, -1000, -1000, -1000, -232, 2515,
	-1000, -1000, 3614, 2513, 2398, 50636, -1000, -1000, 1374, -1000,
	1374, -230, -1000, -1000, 1373, -1000, -1000, 1340, 703, -1000,
	2747, 278, -1000, 2662, -1000, 2641, 180, -1000, 180, -1000,
	318, 12177, -1000, 2512, -1000, -1000, -1000, 2506, -1000, -1000,
	2607, -1000, 2745, -1000, 2501, -1000, -1000, 50636, -1000, -1000,
	1216, 2495, -355, -1000, 2492, 2218, 2478, 2218, 50636, 594,
	-1000, 5295, -135, -133, 19264, -135, -1000, -1000, 399, 405,
	-1000, -1000, 2231, 650, -1000, -1000, 2476, 629, -1000, 1365,
	-1000, 1945, 2108, 2436, 35276, 27596, 28876, 2474, -1000, -1000,
	37196, 1910, 1910, 5517, 353, 5745, -1000, 2958, 1248, 1828,
	-1000, 2261, -1000, 2258, -1000, 3638, 1455, 138, -1000, -1000,
	1747, -1000, 1248, 2602, 3613, -1000, 2594, 50636, 2196, 50636,
	2955, 1935, 14749, -1000, 816, 3254, -1000, -1000, 4203, -1000,
	-1000, 2099, 14749, -1000, -1000, 2466, 28876, 1065, 1926, 1923,
	1024, 2954, -1000, 651, 3666, -1000, -1000, -1000, 1056, 2953,
	-1000, 2039, 2033, -1000, 50636, -1000, 35276, 35276, 801, 801,
	35276, 35276, 2951, 783, -1000, -1000, 14749, -1000, -1000, 1811,
	-1000, -1000, -1000, 1811, 1725, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2321, -1000, -1000, 1364, -1000, 3571, -1000, -1000,
	2076, 50636, 2076, -1000, 36556, -1000, 3606, 3598, -1000, 2076,
	262, 253, 2950, 2949, -1000, -339, 50636, 50636, -234, 2253,
	-1000, 2465, 214, -1000, -1000, 1331, -232, -237, 136, 27596,
	1913, -1000, 2744, 373, -144, -1000, -1000, -1000, -1000, 2735,
	-1000, 1236, -1000, -1000, -1000, 1278, 2734, 2733, -1000, -1000,
	-1000, -1000, 50636, -1000, 2428, -305, 2463, -305, 2460, 585,
	2218, -117, -1000, -1000, 479, -1000, -1000, -1000, 633, 2393,
	-1000, -1000, 393, -1000, -1000, -1000, 2152, 2458, -1000, -1000,
	120, -1000, 1876, 1746, -1000, -1000, -1000, -1000, -1000, -1000,
	807, -1000, 402, 5656, -1000, 1359, 28236, -1000, 1340, 807,
	513, 33996, 664, 317, -1000, 2250, -1000, -1000, 3673, -1000,
	663, -1000, 568, -1000, 1744, -1000, 1718, 35916, 2234, 2162,
	-1000, 5453, 967, -1000, -1000, 2431, -1000, -1000, -1000, -1000,
	-1000, -1000, 2453, 2450, -1000, -1000, -1000, -1000, -1000, 2225,
	2948, 42, 3473, 2448, -1000, -1000, 2946, 1677, 1676, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1658,
	1657, 35276, -1000, -1000, 2431, 2221, 27596, 1811, -1000, -1000,
	1646, 1629, -1000, -1000, -1000, -1000, -1000, -319, 2945, 12177,
	12177, -1000, -1000, -1000, 2944, -1000, -1000, 3595, -234, -239,
	2441, 200, 201, -1000, 2440, -1000, -118, 3331, -149, -1000,
	-1000, 939, -219, 176, 167, 156, -1000, -1000, -1000, 12177,
	-1000, -1000, -1000, 119, -1000, 1823, -1000, -305, -1000, -305,
	2218, 2437, 50636, 648, -1000, -1000, -1000, -1000, 237, -1000,
	-1000, -1000, -1000, -1000, -1000, 2436, 2430, -1000, 549, 3594,
	-1000, 5745, -1000, 1811, -1000, 549, 1621, -1000, 1811, 1811,
	-1000, 508, -1000, 1796, -1000, 2217, -1000, 3571, -1000, 482,
	-1000, 551, -1000, -1000, -1000, 1613, -1000, -1000, -1000, 5453,
	558, -1000, 800, 2943, -1000, -1000, 2731, 12177, 2940, 1811,
	2730, -105, 35276, 3239, 3175, 3022, 2968, 1612, -1000, -1000,
	27596, -1000, -1000, 34636, -1000, 2939, 1609, 1608, 50636, 2398,
	-1000, -1000, 2429, -1000, 920, 206, 201, -1000, 3593, 213,
	3591, 3584, 1276, 3330, -1000, -1000, 2020, -1000, 172, 159,
	153, -1000, -1000, -1000, -1000, -1000, 2428, 2425, -1000, -1000,
	2415, -305, 613, -1000, 329, -1000, -1000, -1000, 357, -1000,
	3583, 789, -1000, 27596, -1000, -1000, 33996, 1910, 1910, -1000,
	-1000, 2186, -1000, -1000, -1000, -1000, 2179, -1000, -1000, -1000,
	1594, -1000, 50636, 1030, 8956, -1000, 2586, -1000, 50636, -1000,
	3247, -1000, 326, 1532, 357, 801, 357, 801, 357, 801,
	357, 801, 325, -1000, -1000, -1000, 1478, 12177, -1000, -1000,
	1473, -1000, -1000, -1000, 2937, 2176, 217, 192, 3576, -1000,
	2398, 3575, 2398, 2398, -1000, 185, -142, 939, -1000, -1000,
	-1000, -1000, -1000, -305, -1000, 2414, -1000, -1000, -1000, -1000,
	1811, 1811, 2410, 2404, 436, -1000, -1000, 1811, 1811, 1811,
	1811, -1000, 33356, 562, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 558, 5745, -1000, 8956, 1463, -1000, 2076, -1000, 783,
	-1000, -1000, 3137, 3005, 3643, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2908, 2682, -1000, 50636, 3470,
	26956, 194, -1000, -1000, -1000, 2403, -1000, 2398, -1000, -1000,
	1787, -145, -1000, -1000, -278, 2175, 2156, -1000, -1000, 50636,
	2148, 2139, 2134, 2397, -1000, 50636, 555, -1000, 5745, 1440,
	-1000, 8956, -1000, -1000, 3645, -1000, 3664, 969, 969, 357,
	357, 357, 357, 12177, -1000, -1000, -1000, 50636, -1000, 1396,
	-1000, -1000, -1000, 1582, -1000, -1000, -1000, -1000, 2284, -150,
	-1000, -1000, 2127, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1385, 2602, -1000, -1000, -1000, -1000, -1000, 2214, 668, -1000,
	2646, 1260, -1000, 1782, -1000, 32716, 50636, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 50636, 8313, -1000, 1580,
	-1000, -1000, 2076, 50636, -1000,
}

var yyPgo = [...]int{
	0, 185, 3687, 252, 183, 4280, 83, 256, 281, 253,
	255, 254, 4279, 4278, 4276, 3394, 3391, 4274, 4273, 4272,
	4271, 4270, 4269, 4268, 4267, 4265, 4264, 4262, 4261, 4259,
	4258, 4257, 4256, 4251, 4244, 4243, 4242, 4241, 4240, 4239,
	4238, 4235, 4234, 4229, 4228, 4226, 4225, 247, 4224, 4223,
	4222, 4221, 4220, 4219, 4218, 4217, 4216, 4215, 4214, 4213,
	4212, 4211, 4209, 4208, 4207, 4205, 4204, 4203, 4202, 4200,
	4199, 4198, 4197, 4195, 4191, 4187, 4184, 4183, 4182, 4181,
	4180, 4175, 4174, 4173, 4172, 245, 4171, 3390, 4170, 4169,
	4168, 4166, 4165, 4164, 4161, 4160, 4159, 4158, 4157, 301,
	4155, 4154, 4153, 4152, 4151, 4150, 4149, 4148, 4147, 4146,
	4145, 4144, 4143, 296, 4142, 4141, 4136, 4135, 230, 4127,
	286, 4125, 179, 167, 4121, 4115, 4114, 4113, 4112, 4111,
	4110, 4109, 4108, 4106, 4105, 4104, 4103, 4102, 240, 205,
	70, 4100, 51, 4099, 4098, 218, 4097, 157, 4096, 154,
	4095, 4094, 4093, 4092, 4089, 4088, 4087, 4086, 4085, 4084,
	4083, 4081, 4080, 4078, 4077, 4075, 4074, 4073, 4072, 4068,
	4066, 4065, 4064, 4063, 54, 4062, 261, 4061, 87, 4060,
	181, 4059, 81, 4058, 75, 148, 260, 3054, 266, 4057,
	197, 4051, 4049, 257, 178, 4048, 4047, 264, 4046, 165,
	229, 164, 104, 126, 4045, 145, 4044, 265, 47, 40,
	251, 150, 4043, 4042, 55, 161, 132, 4041, 216, 94,
	111, 4036, 4035, 149, 4033, 242, 187, 4032, 107, 4030,
	4028, 4021, 23, 4020, 4019, 204, 195, 4017, 4016, 133,
	4015, 4012, 69, 192, 4011, 95, 129, 176, 123, 4009,
	2315, 122, 90, 4007, 121, 105, 4006, 74, 3996, 3995,
	3994, 3991, 191, 3990, 3988, 141, 59, 3987, 3986, 3985,
	68, 3978, 92, 3976, 77, 3975, 67, 3974, 3973, 3969,
	3965, 3963, 3961, 3960, 3959, 3958, 3957, 3955, 3954, 56,
	3953, 3948, 3947, 3945, 7, 12, 14, 3944, 29, 3942,
	175, 3940, 3937, 173, 3936, 201, 3934, 3932, 99, 97,
	3931, 98, 168, 3930, 10, 28, 79, 3927, 3924, 3922,
	144, 3921, 3920, 3916, 273, 3914, 3913, 3912, 162, 3911,
	3910, 3909, 496, 3908, 3905, 3902, 3899, 3898, 3897, 62,
	3896, 1, 217, 41, 3895, 124, 137, 3891, 42, 32,
	3889, 43, 114, 226, 135, 102, 3888, 3887, 3885, 142,
	203, 117, 39, 0, 101, 221, 160, 3884, 3883, 3882,
	258, 3881, 236, 215, 233, 249, 272, 267, 3880, 3878,
	58, 3877, 166, 30, 52, 136, 91, 24, 250, 3875,
	1655, 9, 188, 3874, 210, 3872, 8, 18, 209, 152,
	3871, 3869, 34, 262, 3868, 3866, 3865, 134, 3860, 3857,
	172, 60, 3856, 3855, 3853, 3852, 36, 3850, 182, 17,
	3849, 130, 3848, 246, 3847, 193, 138, 190, 186, 159,
	231, 237, 86, 82, 3846, 1905, 158, 109, 15, 3845,
	232, 3842, 198, 115, 3841, 128, 3836, 241, 269, 213,
	3835, 189, 11, 49, 38, 31, 48, 13, 271, 206,
	3834, 3833, 21, 50, 3832, 53, 3831, 20, 3830, 3829,
	44, 3826, 78, 5, 3824, 3823, 19, 22, 3822, 37,
	211, 177, 131, 103, 61, 3821, 3820, 155, 140, 3819,
	146, 163, 169, 3817, 80, 3816, 3815, 3814, 3813, 947,
	259, 3811, 3810, 3809, 3808, 3807, 3806, 3805, 3802, 220,
	3800, 108, 45, 3799, 3798, 3797, 3796, 84, 156, 3795,
	3794, 3793, 3792, 33, 143, 3791, 16, 3789, 27, 25,
	35, 3787, 106, 3785, 3, 194, 3784, 3782, 4, 3769,
	3768, 2, 3767, 3764, 120, 3763, 100, 26, 174, 110,
	3762, 3761, 96, 214, 151, 3760, 3759, 93, 243, 207,
	3754, 112, 239, 268, 3753, 212, 3752, 3751, 3749, 3748,
	3741, 1262, 3739, 3738, 235, 64, 85, 3736, 222, 116,
	3734, 3733, 89, 171, 119, 125, 57, 88, 3732, 113,
	208, 3731, 202, 3730, 263, 3729, 3726, 118, 3725, 3724,
	3723, 3720, 196, 3719, 3718, 200, 224, 3717, 3715, 270,
	3714, 3713, 3712, 3711, 3707, 3701, 3700, 3698, 3697, 3690,
	248, 219, 3685,
}

//line mysql_sql.y:13006
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 615, 618, 618, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 354, 354, 355, 355, 130, 350, 350, 349, 349,
	131, 132, 133, 594, 594, 134, 135, 165, 593, 593,
	593, 593, 593, 167, 167, 167, 167, 167, 167, 167,
	470, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 600, 600, 600, 601, 601, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 543, 543, 542, 542, 541, 541, 495, 495, 496,
	496, 341, 341, 341, 540, 540, 540, 539, 539, 538,
	538, 537, 537, 535, 535, 536, 534, 533, 533, 533,
	531, 531, 531, 527, 527, 529, 528, 528, 530, 522,
	522, 525, 525, 523, 523, 523, 523, 526, 521, 521,
	521, 520, 520, 112, 112, 112, 437, 437, 111, 111,
	451, 451, 451, 451, 451, 449, 449, 449, 449, 449,
	449, 448, 448, 447, 447, 452, 452, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	606, 606, 605, 605, 607, 607, 607, 607, 608, 608,
	103, 103, 103, 104, 446, 446, 446, 101, 102, 102,
	436, 436, 441, 441, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 445, 445, 445,
	443, 443, 442, 442, 444, 444, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 433, 433, 432, 108, 108, 109,
	603, 603, 602, 604, 604, 604, 604, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 568, 568, 568, 568, 569, 569,
	368, 369, 619, 371, 367, 367, 367, 564, 564, 565,
	566, 567, 567, 567, 114, 14, 224, 224, 469, 469,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 304, 304, 305, 299, 299,
	306, 306, 170, 307, 307, 307, 312, 312, 313, 313,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 284, 284, 284, 279, 279, 279, 279, 280,
	280, 281, 281, 282, 282, 282, 282, 283, 283, 360,
	360, 308, 308, 308, 310, 310, 309, 303, 301, 301,
	301, 301, 301, 301, 301, 302, 302, 302, 302, 302,
	311, 311, 82, 88, 88, 88, 88, 581, 581, 83,
	83, 83, 592, 592, 499, 499, 382, 382, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 504, 505, 378, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 79, 80, 81, 54, 57,
	58, 169, 172, 172, 172, 172, 53, 53, 53, 422,
	422, 52, 620, 620, 353, 353, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 516, 516, 622, 622, 622,
	74, 75, 498, 498, 498, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 160, 59, 161, 161,
	375, 375, 375, 377, 377, 373, 621, 621, 465, 465,
	376, 376, 48, 48, 48, 48, 77, 374, 374, 352,
	372, 372, 372, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 430, 430, 427, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 194, 194,
	251, 251, 575, 575, 571, 571, 572, 572, 572, 573,
	573, 574, 574, 120, 510, 510, 510, 510, 510, 510,
	8, 8, 219, 219, 509, 509, 509, 509, 509, 509,
	434, 434, 434, 553, 553, 553, 554, 218, 218, 211,
	211, 511, 511, 399, 555, 555, 519, 519, 518, 518,
	517, 517, 216, 216, 217, 217, 197, 197, 139, 139,
	524, 524, 524, 524, 532, 532, 494, 494, 289, 289,
	343, 343, 344, 344, 184, 184, 185, 185, 185, 185,
	185, 185, 609, 609, 610, 611, 612, 612, 613, 613,
	613, 614, 614, 614, 614, 614, 561, 561, 563, 563,
	562, 215, 215, 209, 209, 210, 210, 210, 208, 208,
	207, 206, 206, 205, 203, 203, 203, 204, 204, 204,
	223, 223, 187, 187, 187, 186, 186, 186, 186, 186,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 188, 191, 191, 192, 192, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 321, 321, 322,
	322, 322, 322, 322, 137, 137, 503, 503, 320, 320,
	189, 189, 190, 190, 190, 190, 319, 319, 318, 202,
	202, 201, 200, 200, 200, 195, 195, 195, 195, 195,
	196, 330, 330, 329, 329, 328, 328, 328, 328, 331,
	123, 136, 136, 138, 222, 222, 213, 212, 327, 326,
	326, 326, 326, 221, 221, 220, 220, 214, 214, 199,
	199, 199, 199, 325, 198, 323, 599, 599, 598, 598,
	597, 595, 595, 595, 596, 596, 596, 596, 545, 545,
	545, 545, 545, 361, 361, 361, 366, 366, 364, 364,
	364, 364, 364, 370, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 39, 234, 235, 40,
	236, 236, 237, 237, 238, 238, 239, 240, 241, 241,
	241, 241, 38, 225, 225, 226, 226, 227, 227, 228,
	229, 229, 229, 233, 230, 231, 231, 617, 617, 616,
	37, 37, 30, 175, 175, 176, 176, 176, 178, 178,
	285, 285, 285, 177, 177, 179, 179, 179, 576, 578,
	578, 580, 579, 579, 579, 582, 582, 582, 582, 582,
	583, 583, 583, 583, 584, 584, 31, 157, 157, 182,
	182, 162, 587, 587, 587, 586, 586, 588, 588, 589,
	589, 347, 347, 348, 348, 173, 174, 174, 164, 159,
	181, 181, 181, 181, 181, 183, 183, 253, 253, 158,
	163, 166, 168, 577, 585, 585, 585, 431, 431, 428,
	429, 429, 426, 425, 425, 425, 591, 591, 590, 590,
	590, 362, 362, 32, 421, 421, 423, 424, 424, 424,
	415, 415, 415, 415, 36, 419, 419, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 416,
	416, 418, 418, 414, 414, 414, 414, 414, 414, 414,
	414, 35, 180, 180, 413, 413, 410, 410, 232, 232,
	408, 408, 409, 409, 407, 407, 407, 411, 411, 43,
	78, 44, 45, 46, 42, 412, 412, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 141, 140, 140,
	140, 140, 140, 143, 143, 346, 346, 345, 345, 142,
	286, 286, 41, 264, 264, 486, 486, 481, 481, 481,
	481, 481, 501, 501, 501, 482, 482, 482, 483, 483,
	483, 485, 485, 485, 484, 484, 484, 484, 484, 500,
	500, 502, 502, 502, 453, 453, 454, 454, 454, 457,
	457, 473, 473, 474, 474, 472, 472, 479, 479, 478,
	478, 477, 477, 476, 476, 475, 475, 475, 475, 468,
	468, 467, 467, 455, 455, 455, 455, 455, 456, 456,
	456, 466, 466, 471, 471, 317, 317, 316, 316, 272,
	272, 273, 273, 315, 315, 270, 270, 271, 271, 271,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 551, 551, 552, 275,
	275, 287, 287, 287, 287, 287, 287, 274, 274, 276,
	276, 252, 252, 250, 250, 242, 242, 242, 242, 242,
	242, 243, 243, 244, 244, 245, 245, 245, 249, 249,
	248, 248, 248, 248, 246, 246, 247, 247, 247, 247,
	247, 247, 439, 439, 548, 548, 549, 549, 544, 544,
	544, 547, 547, 547, 547, 547, 547, 547, 547, 550,
	550, 550, 546, 546, 254, 340, 340, 340, 363, 363,
	363, 363, 365, 339, 339, 339, 269, 269, 268, 268,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 438, 438, 379, 379, 380, 380, 298, 297,
	297, 297, 297, 297, 295, 296, 294, 294, 294, 294,
	294, 291, 291, 290, 290, 290, 292, 292, 292, 292,
	292, 417, 417, 288, 288, 278, 278, 278, 277, 277,
	277, 480, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 293, 337, 337, 337, 338, 338, 338, 338,
	338, 338, 338, 338, 389, 389, 395, 395, 560, 560,
	559, 255, 255, 255, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 265, 265, 265, 462, 462, 462, 462,
	463, 463, 463, 463, 464, 464, 464, 460, 460, 461,
	461, 400, 401, 401, 507, 507, 508, 508, 458, 458,
	459, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 515, 515, 515, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 570, 570, 570, 556, 556, 556, 557,
	557, 557, 557, 557, 557, 557, 557, 557, 557, 557,
	557, 558, 558, 558, 558, 558, 558, 558, 558, 558,
	558, 558, 558, 558, 558, 558, 558, 558, 335, 335,
	335, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 402,
	402, 403, 403, 512, 512, 512, 512, 512, 512, 513,
	513, 514, 514, 514, 514, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 506, 387, 332, 332, 332, 404,
	396, 396, 397, 397, 398, 398, 390, 390, 390, 390,
	390, 390, 391, 391, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 392, 392, 394, 394,
	406, 406, 406, 405, 405, 405, 405, 405, 405, 405,
	267, 267, 267, 267, 384, 384, 384, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 257,
	257, 257, 257, 261, 261, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 262,
	262, 262, 262, 262, 260, 260, 260, 260, 260, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 121, 122,
	122, 259, 342, 342, 487, 487, 490, 490, 488, 488,
	489, 491, 491, 491, 492, 492, 492, 493, 493, 493,
	497, 497, 351, 351, 351, 359, 359, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 10, 10, 11, 11, 12, 8, 13,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 3,
	1, 1, 7, 7, 7, 8, 8, 0, 4, 7,
	6, 6, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 4, 3,
	3, 3, 4, 5, 6, 5, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	4, 7, 6, 6, 3, 5, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 1, 4, 4, 4, 3, 4,
	3, 2, 2, 2, 2, 2, 3, 2, 3, 2,
	4, 1, 3, 4, 0, 2, 1, 3, 1, 1,
	2, 2, 3, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 3, 0, 1, 1, 3, 1, 3, 0, 1,
	1, 1, 14, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 0, 1, 2,
	9, 9, 7, 1, 2, 3, 3, 3, 0, 4,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 3, 3, 4, 3, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 10, 2,
	2, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 8,
	0, 2, 2, 3, 3, 0, 2, 0, 2, 4,
	4, 4, 5, 1, 0, 2, 2, 1, 3, 2,
	1, 3, 2, 1, 3, 2, 0, 1, 3, 4,
	3, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	0, 1, 1, 1, 11, 0, 2, 3, 3, 2,
	2, 3, 1, 1, 3, 3, 3, 3, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	6, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 4, 7, 3,
	3, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 9, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 4, 4, 4, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 4, 1, 2, 3,
	5, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -615, -618, -2, -5, 638, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 628, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 561, 634, 464, 14, 513, -15, -16, -561, -17,
	267, -367, -368, -369, -371, -619, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 388, 394, 451, 627,
	62, -185, -187, 657, 658, 661, 548, 551, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 556,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 392, 260, 238, 240, 15, 32, 43,
	367, -186, 86, 549, 239, -188, 13, 663, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 629, -363, 384, 630, 632, 631, 89, 97,
	-356, -358, 464, 267, 388, 394, 627, 658, 661, 548,
	551, 563, 564, 565, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 576, 577, 578, 588, 589, 579, 580,
	581, 582, 583, 584, 585, 586, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	516, 613, 614, 615, 616, 544, 571, 607, 608, 609,
	610, 365, 366, 553, 279, 303, 419, 309, 316, 363,
	163, 183, 177, 206, 197, 549, 172, 283, 321, 284,
	96, 166, 499, 111, 476, 448, 169, 298, 300, 302,
	545, 546, 378, 305, 543, 304, 306, 308, 547, 285,
	368, 193, 188, 297, 281, 186, 286, 41, 287, 360,
	359, 211, 288, 289, 558, 472, 364, 478, 313, 53,
	446, 187, 473, 301, 475, 215, 219, 490, 350, 491,
	181, 182, 480, 493, 210, 213, 214, 259, 356, 357,
	44, 555, 271, 494, 217, 653, 209, 204, 502, 317,
	315, 361, 208, 180, 203, 282, 66, 221, 220, 222,
	442, 443, 444, 445, 290, 291, 382, 489, 200, 189,
	369, 173, 23, 497, 266, 477, 395, 292, 310, 318,
	216, 218, 273, 278, 333, 557, 450, 362, 277, 314,
	495, 185, 270, 299, 265, 498, 654, 174, 397, 293,
	167, 307, 492, 656, 501, 65, 410, 179, 170, 645,
	646, 256, 164, 275, 280, 655, 294, 295, 296, 542,
	320, 319, 311, 171, 550, 201, 272, 207, 191, 178,
	202, 165, 274, 500, 411, 625, 367, 429, 199, 196,
	276, 249, 496, 479, 168, 433, 412, 194, 322, 620,
	621, 622, 383, 355, 323, 324, 192, 263, 470, 471,
	327, 439, 345, 413, 449, 420, 414, 228, 229, 331,
	482, 484, 212, 623, 334, 335, 336, 474, 337, 338,
	339, 340, 387, 57, 59, 98, 101, 100, 659, 660,
	64, 30, 373, 376, 408, 415, 347, 626, 554, 344,
	348, 349, 377, 26, 431, 399, 435, 434, 49, 50,
	51, 54, 55, 56, 58, 60, 61, 52, 541, 392,
	405, 503, 46, 48, 402, 28, 379, 430, 452, 343,
	432, 463, 47, 461, 462, 483, 27, 381, 380, 63,
	45, 438, 440, 441, 325, 341, 390, 635, 504, 385,
	401, 404, 386, 346, 375, 406, 68, 67, 398, 636,
	393, 391, 342, 559, 560, 351, 587, 370, 447, 538,
	537, 536, 535, 534, 533, 532, 531, 328, 329, 330,
	416, 417, 418, 428, 421, 422, 423, 424, 425, 426,
	427, 466, 467, 637, 485, 487, 488, 486, 244, 662,
	371, 372, 247, 639, 640, 99, 641, 643, 642, 29,
	644, 652, 649, 650, 651, 562, 232, 647, -444, -442,
	-363, 549, 627, 394, 548, 551, 388, 367, 658, 661,
	392, 267, 328, 329, 330, 464, 365, -236, -363, 662,
	-197, 251, 40, -250, -363, -197, -87, -16, -15, -186,
	-187, -250, 246, -372, 24, 446, -99, 447, 241, 242,
	86, 78, -363, -9, -113, -8, -120, -85, -184, 451,
	-370, -363, 328, 328, -370, 246, -365, 277, 427, -363,
	-499, 252, -448, -421, 278, -447, -423, -450, -424, 33,
	237, 239, 238, 561, 274, 16, 392, 248, 14, 13,
	393, 260, 26, 27, 29, 15, 394, 396, 30, 397,
	400, 401, 402, 43, 405, 406, 267, 89, 97, 92,
	285, -235, -363, -398, -390, 118, -393, -385, -386, -388,
	-341, -535, -383, 86, 145, 146, 153, 119, 664, -387,
	-480, 37, 121, 567, 571, 607, 514, -333, -334, -335,
	-336, -337, -338, 552, -363, -536, -534, 92, 102, 104,
	108, 109, 107, 105, 157, 190, 106, 93, 158, -187,
	89, -556, 577, -357, 600, 613, 614, 615, 616, 599,
	62, -506, -514, 245, -512, 156, 195, 263, 191, 14,
	151, 439, 192, 608, 609, 610, 574, 596, 516, 578,
	588, 603, 569, 570, 572, 564, 565, 566, 568, 579,
	581, 595, -515, 591, 601, 602, 587, 611, 612, 649,
	604, 605, 606, 643, 91, 90, 594, 593, 580, 575,
	576, 582, 563, 573, 583, 584, 592, 597, 598, 376,
	111, 377, 378, 506, 368, 81, 379, 252, 446, 71,
	380, 381, 382, 383, 384, 513, 385, 72, 386, 375,
	267, 429, 387, 194, 212, 518, 517, 519, 510, 507,
	505, 508, 509, 511, 512, 585, 586, 590, -136, -138,
	618, -609, -324, -610, 6, 7, 8, 9, -611, 158,
	-600, 448, 557, 92, 321, 365, 17, 506, 648, 547,
	648, 547, 168, 165, -435, 168, 117, 174, 173, 250,
	168, -435, -363, 171, 648, 170, 645, 331, 273, -412,
	-175, 365, 429, 337, 98, 277, -415, -413, 545, -500,
	325, 321, 297, 247, 114, -176, 257, 256, 112, 506,
	245, 403, 316, 57, 59, -571, -572, 234, 235, 236,
	-563, 539, -562, -363, 648, 653, 378, 100, 101, 645,
	646, 28, 246, 389, 273, 484, 482, 483, 485, 486,
	487, 488, -65, -516, -498, 479, 478, -376, 471, 477,
	469, 481, 472, 366, 339, 561, 338, 237, 639, 546,
	540, -351, 413, 449, 503, 504, 390, 450, 490, 492,
	473, 111, 198, 195, 247, 249, 246, 645, 365, 506,
	429, 98, 337, 246, -571, 653, 165, 490, 492, 448,
	277, 427, 42, -441, 439, -440, -442, 491, 502, 90,
	91, 489, -351, 111, 470, 470, -609, -324, -185, -187,
	-123, -561, 547, 648, 247, 365, 429, 277, 248, 246,
	542, 545, 249, 506, 245, 328, 389, 273, 337, 98,
	170, 645, -191, -192, -193, 230, 231, 232, 70, 235,
	233, 67, 33, 34, 35, -1, 125, 663, -390, -390,
	-6, 666, -6, -390, -363, -363, 160, -257, -261, -258,
	-260, -259, -263, -262, 195, 196, 156, 199, 205, 201,
	202, 203, 204, 206, 207, 208, 209, 210, 213, 214,
	211, 32, 212, 263, 191, 192, 193, 194, 215, 177,
	197, 554, 223, 178, 224, 179, 225, 180, 226, 181,
	182, 227, 183, 186, 187, 188, 189, 185, 159, -224,
	92, 33, 86, 159, 92, -216, 269, -197, -250, -242,
	159, 664, -216, -609, -207, -208, 11, -250, -339, -363,
	448, 128, -99, 78, -99, 447, 78, -99, 447, 241,
	-564, -565, -566, -568, 241, 447, 446, 242, -118, 159,
	285, 17, -370, -370, 84, -250, -423, 277, -448, -421,
	37, 83, 160, 250, 160, 83, 86, 390, 365, 429,
	391, 506, 246, 403, 249, 277, 404, 365, 429, 246,
	249, 506, 277, 365, 246, 249, 429, 277, 404, 365,
	469, 470, 249, 28, 395, 398, 399, 470, -520, 502,
	160, 117, 114, 115, 116, -390, 135, -405, 128, 129,
	130, 131, 132, 133, 134, 142, 141, 152, 145, 146,
	147, 148, 149, 150, 151, 143, 144, 138, 118, 136,
	140, 137, 120, 155, -187, -390, -398, 62, -388, -388,
	-388, -388, -363, -480, -395, -390, 86, 86, 86, 86,
	86, 159, 105, 92, -390, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, -513, 86, 86,
	-402, -403, 86, 86, -383, -339, 86, 92, 92, 86,
	86, 86, 92, 86, 86, 86, -403, -403, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, -208, 160, -207, 86, -207, -208,
	-188, -187, 33, 34, 33, 34, 33, 34, 33, 34,
	-612, 636, 86, 102, 659, 228, 17, -363, 645, -363,
	-594, 33, 550, 550, 550, 550, 495, 556, 172, 173,
	174, -363, 171, 250, -363, -410, 252, -410, -410, -234,
	-363, -236, 389, 249, 542, 249, -176, -410, -410, -410,
	-410, -410, 248, -410, 24, 246, 246, 246, 246, -410,
	513, 128, 128, 60, -573, 176, 160, -563, -215, 86,
	-594, 654, 655, 656, -375, 136, 140, -375, -320, 18,
	-320, 24, 24, 275, 275, 275, -375, 315, -620, -621,
	17, 138, -373, -621, -373, -373, -375, -622, 248, 480,
	44, 276, 275, -209, -210, 22, -209, 474, 470, -465,
	475, 476, -377, -621, -376, -375, -375, -376, -375, -375,
	-375, 33, 246, 249, 506, 337, 640, -620, -620, 32,
	32, -499, -499, -250, -499, -499, 540, -352, -363, -499,
	-499, -499, -304, -305, -250, -574, 251, 656, -606, -605,
	493, -608, 495, 165, -442, 165, -442, 89, -423, 277,
	277, 160, 128, 24, -443, 128, 139, -442, -442, -443,
	-443, -274, 42, -362, 156, -363, 92, -274, 42, -603,
	-602, -250, -208, -188, -187, 87, 87, 87, 550, -594,
	-499, -499, -499, -499, -499, -500, -499, -499, -499, -499,
	-499, -370, -225, -363, -236, 252, -499, -499, -499, -499,
	-189, -190, 147, -390, -363, -193, -3, -146, -145, 122,
	123, 125, 630, 384, 629, 633, 627, -442, 42, -493,
	411, 410, -487, -489, 86, -488, 86, -488, -488, -488,
	-488, -488, 86, 86, -490, 86, -490, -490, -487, -491,
	86, -491, -492, 86, -492, -491, -363, -469, 556, -396,
	-398, -363, 40, -509, 62, -184, 86, 32, 86, -216,
	-363, 192, 170, 644, 36, -510, 62, -184, 86, 32,
	-208, -139, 40, -210, 21, 159, 102, 92, -118, -99,
	78, -118, -99, -99, 87, 160, -567, 108, 109, -569,
	210, 201, -363, -116, 92, -7, -11, -8, -9, -10,
	-47, -85, -184, 548, 551, -537, -535, 86, 33, 438,
	83, 17, -449, 246, 506, 389, 273, 249, 365, -447,
	-430, -427, -425, -362, -423, -426, -425, -452, -339, 470,
	-140, 453, 452, 327, -390, -390, -390, -390, -390, 107,
	118, 355, 108, 109, -385, -406, 33, 323, 324, -386,
	-386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
	-386, -394, -404, -480, 86, 138, 136, 140, 137, 120,
	-388, -388, -386, -386, -276, -362, 156, 87, 160, -390,
	-560, -559, 122, -390, -390, -390, -390, -416, -418, -339,
	86, -363, -557, -558, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 380, 375, 381, 379, 368,
	387, 382, 383, 194, 537, 538, 531, 532, 533, 534,
	535, 536, -396, -396, -390, -557, -396, -332, 34, 33,
	-398, -398, -398, 87, -390, -570, 353, 352, 354, -211,
	-363, -396, 87, 87, 87, 102, -398, -398, -396, -386,
	-396, -396, -396, -396, -558, -332, -332, -332, -332, 147,
	-398, -398, -332, -332, -332, -332, 147, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, -332, -332, 87, 87,
	87, 147, -398, -209, -138, -518, -517, -390, 42, -139,
	-210, -613, 637, 86, -339, -601, 92, 92, 664, 170,
	645, 17, 506, -363, 17, 246, -363, 102, -363, 102,
	496, 497, 169, 173, 172, -363, 171, -363, -363, 118,
	-363, -363, 36, 86, -225, -410, -410, -410, -578, -363,
	93, -431, -428, -425, -363, -363, -421, -363, -352, -250,
	-410, -410, -410, -410, -250, -285, 54, 55, 56, -425,
	-177, 57, 58, -574, -562, 36, -214, -363, -320, -388,
	-388, -390, 365, 506, 246, -425, 277, -620, -375, -375,
	-353, -352, -377, -372, -377, -377, -320, -373, -375, -375,
	-390, -377, -373, -320, -363, 470, -320, -320, -465, -375,
	-374, -363, -374, -410, -352, -353, -353, -250, -250, -299,
	-306, -300, -307, 269, 243, 373, 374, 240, 238, 11,
	239, -314, 316, -411, 514, -280, -281, 78, 43, -283,
	267, 415, 408, 279, 283, 96, 284, 448, 285, 248,
	287, 288, 289, 304, 306, 259, 290, 291, 292, 439,
	293, 164, 305, 294, 295, 296, 391, -275, 6, 340,
	556, 42, 52, 53, 462, 461, 559, 280, -363, -578,
	-576, 32, -363, 32, -431, -425, -363, -363, 160, 250,
	-200, -202, -199, -195, -196, -201, -323, -325, -198, 86,
	-250, -187, -363, -442, 160, 494, 496, 497, -606, -443,
	-606, -443, 250, 33, 438, -446, 438, 33, -421, -440,
	490, 492, -436, 92, 439, -426, -445, 83, 156, -517,
	-443, -443, -445, -445, 155, 160, -604, 495, 496, 234,
	-209, 102, -252, -250, -578, -430, -421, -363, -499, -252,
	-252, -252, -365, -365, 86, 159, 37, -363, -363, -363,
	-363, -319, 160, -318, 17, -364, -363, 36, 92, 159,
	-147, -145, 124, -390, -6, 629, -390, -6, -6, -390,
	-6, -390, -497, 412, 102, 102, -342, 92, -342, 102,
	102, 102, 562, 87, 92, -434, 83, -511, -399, -555,
	618, -218, 87, -211, -553, -554, -211, -217, -363, -509,
	-242, 128, 128, 128, 25, -511, -218, 87, -553, -209,
	619, -139, -206, -205, -390, -363, 24, -118, -99, -565,
	159, 160, -214, -449, -429, -426, -451, 147, -363, -437,
	160, 556, 667, 90, 250, -591, -590, 430, 87, 160,
	-521, 251, 513, 92, 664, 446, 228, 229, 107, 355,
	108, 109, -480, -398, -394, -388, -388, -386, -386, -392,
	264, -392, 117, -390, 665, -389, -559, 124, -390, 36,
	160, 36, 160, 84, 160, 87, -487, -390, 159, 87,
	87, 17, 17, 87, -390, 87, 87, 87, 87, 17,
	17, -390, 87, 159, 87, 87, 87, 87, 84, 87,
	160, 87, 87, 87, 87, 160, -398, -398, -390, -398,
	87, 87, 87, -390, -390, -390, -398, 87, -390, -390,
	-390, -390, -390, -390, -390, -390, -390, -390, -214, -459,
	465, -459, -459, 160, 160, 160, 87, -139, 86, 102,
	160, 660, -346, -345, 92, -363, -363, 170, 645, -363,
	92, 645, -363, 92, 170, 174, 174, 173, -363, 92,
	37, 24, 24, 314, -235, -237, -238, -239, -240, -241,
	138, 161, 162, 86, -250, -250, -250, -580, 416, -592,
	160, 42, -590, 506, -173, 327, -414, 84, -180, 17,
	556, -250, -250, -250, -250, -264, 36, 17, -194, -251,
	-363, 86, 87, 160, -363, -363, -363, -422, 84, -363,
	-353, -320, -320, -377, -320, -320, 160, 23, -375, -377,
	-377, -242, -373, -242, 159, -242, -352, -486, 36, -215,
	160, 21, 269, -249, -360, -246, -248, 254, -380, -247,
	257, -549, 255, 253, 112, 258, 312, 113, 248, -360,
	-360, 254, -284, 250, 36, -360, -302, 248, 358, 312,
	255, 21, 269, -301, 248, 113, -363, 254, 258, 255,
	253, -359, 128, -351, 155, 250, 44, 391, -359, 560,
	269, -359, -359, -359, -359, -359, -359, -359, 286, 286,
	-359, -359, -359, -359, -359, -359, -359, -359, -359, -359,
	-359, 165, -359, -359, -359, -359, -359, -359, 86, 332,
	281, 282, 314, -581, 416, 32, 371, 371, 372, -592,
	367, 43, 32, -181, 365, -305, -303, -374, 32, -326,
	-327, -328, -329, -331, -330, 69, 73, 75, 79, 70,
	71, 72, 76, 81, 74, 32, 160, -361, -366, 36,
	-363, 92, -361, -187, -202, -200, -361, 86, -443, -605,
	-607, 498, 495, 501, -445, -445, 102, 250, 86, 128,
	-445, -445, 42, -362, -602, 502, 496, -139, 160, 83,
	-252, -226, -227, -228, -229, -257, -339, 196, 199, 201,
	202, 203, 204, 206, 207, 208, 209, 210, 213, 214,
	211, 212, 263, 191, 192, 193, 194, 215, 177, 197,
	554, 178, 179, 180, 181, 182, 183, 186, 187, 188,
	189, 185, -363, -236, -232, 647, -320, -190, -202, -363,
	92, -363, 147, 125, -6, 123, -151, -150, -149, 126,
	627, 633, 125, 125, 125, 87, 87, 87, 160, 87,
	87, 87, 160, 87, 160, 102, -524, 475, 41, 160,
	86, 87, 160, 62, 160, 128, 87, 160, -390, -363,
	92, -390, 192, 87, 62, -139, 92, 160, -203, 38,
	39, 159, 448, -363, -535, 87, -451, 160, 250, 159,
	159, -427, 394, -362, -429, 21, 556, -339, 40, -346,
	128, 664, -363, 87, -392, -392, 117, -388, -385, 87,
	125, -390, 123, -255, -257, 410, 411, -390, -255, -256,
	-262, 156, 195, 263, 194, 193, 191, 410, 411, -274,
	-418, 553, -203, 87, -363, -390, -390, 87, -390, -390,
	17, -363, -274, -386, -390, -208, -208, 87, 87, -458,
	-459, -458, -458, 87, 87, 87, 87, -458, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 86,
	102, 104, 102, 104, -517, -614, 64, 635, 63, 438,
	107, 317, 160, 102, 92, 665, 160, 128, 92, -363,
	-363, 17, 246, -363, 17, 174, 92, -593, 321, 365,
	506, 246, 365, 321, 506, 246, -470, 102, 402, 87,
	160, -339, -226, -215, 86, -215, -583, 477, 418, 428,
	-359, -382, -381, 367, 43, -504, 439, 424, 425, -428,
	277, -352, -589, 99, 128, 83, 344, 348, 350, 349,
	345, 346, 347, -408, -409, -407, -411, -576, 86, 86,
	-184, 36, 136, -180, 86, 86, 36, -481, 334, -257,
	-250, -194, -363, 17, 160, -575, 159, -1, -363, -363,
	-421, -375, -320, -390, -390, -320, -375, -375, -377, -363,
	-242, -481, -257, 36, -300, 243, 239, -455, 314, 315,
	-456, -471, 317, -473, 86, -254, -339, -247, -548, -549,
	-410, -363, 113, -548, 113, 86, -254, -339, -339, -303,
	-339, -363, -363, -363, -363, -310, -309, -339, -312, 33,
	-313, -363, -363, -363, -363, 113, -363, 113, -279, 42,
	49, 50, 51, -359, -359, 198, -282, 42, 438, 440,
	441, -312, 102, 102, 102, 102, 92, 92, 92, -359,
	-359, 102, 92, -366, 92, -550, 173, 46, 47, 102,
	102, 102, 102, 42, 92, -287, 42, 297, 301, 298,
	299, 300, 92, 102, 42, 102, 42, 102, 42, -363,
	86, -551, -552, 92, 333, -470, -583, -359, 371, -442,
	128, 128, -382, -585, 96, 419, -585, -588, 327, -183,
	506, 33, -219, 243, 239, -576, -433, -432, -339, -199,
	-199, -199, -199, -199, -199, 69, 80, 69, -212, 86,
	69, 74, 69, 74, 69, -328, 69, 80, -433, -201,
	-215, -366, 87, -599, -598, -597, -595, 77, 251, 78,
	-396, -445, 495, 499, 500, -429, -378, 92, -436, -223,
	24, -250, -250, -502, 307, 308, 87, 160, -257, -322,
	19, 159, 121, -6, -147, -149, -390, -6, -390, 629,
	384, 630, 92, 102, 102, -532, 459, 454, 456, 113,
	-399, -519, -518, 62, -184, -211, -511, -554, -517, -363,
	665, 665, 665, 665, 92, 62, -184, -511, -223, -524,
	-205, -204, 45, -363, 102, 17, -426, -421, 147, 147,
	-363, 395, -437, 92, 417, 92, 246, 665, 92, -346,
	-385, -390, 87, -265, 182, 181, -265, 36, 87, 87,
	-488, -488, -487, -490, -487, -265, -265, 87, 86, -203,
	87, 24, 87, 87, 87, -390, 87, 87, 160, -507,
	515, -508, 589, -458, -458, -458, -458, -458, -458, -458,
	-458, -458, -458, -458, -458, -458, -458, -458, -458, -458,
	-401, -400, 269, 460, 642, 642, 460, 642, 642, 87,
	160, -557, 160, -354, 322, -354, -345, 92, 250, 92,
	170, -363, 92, 645, 92, -363, -363, -363, 314, -363,
	314, -363, -363, 92, 92, 92, -239, -257, 87, 36,
	-243, -244, -245, -254, -246, -248, 36, -584, 96, -579,
	92, -363, 93, -585, 158, 369, 42, 420, 421, 436,
	364, 102, 102, 426, -577, -363, -182, 246, 365, -587,
	53, 128, 92, -250, -407, -351, 155, 288, 337, -317,
	-316, -363, 92, -243, -184, -250, -243, -243, -184, -482,
	336, 21, 102, 146, -216, 84, 159, -202, -251, -363,
	147, 87, -320, -242, -320, -320, -375, -482, -184, -467,
	318, 86, -465, 86, -465, 113, 345, -474, -472, 269,
	-308, 46, 48, -257, -546, -363, -544, -546, -363, -544,
	-544, -410, -390, -308, -254, 250, 32, 239, -311, 342,
	343, 348, 350, -438, 313, 118, -438, 160, -203, 160,
	-363, -274, -274, 32, 92, 92, -252, 87, 160, 128,
	102, 92, -584, -579, 128, -443, 92, 92, -585, 92,
	92, -589, 128, -253, 246, -352, 160, -219, -219, -320,
	160, 128, -221, -220, 83, 84, -222, 83, -220, -220,
	69, -213, 92, 69, 69, -320, -597, -596, 24, -549,
	-549, -549, 87, 87, 15, -228, 42, -321, 20, 21,
	147, 125, 123, 125, 125, -363, 87, 87, -494, 620,
	-528, -530, 454, 21, 21, 15, 251, 87, -511, 665,
	-511, -532, 46, 47, -421, -437, 439, -250, 160, 665,
	-255, -293, 92, -390, 87, -390, 87, 92, 87, 92,
	-208, 21, 87, 160, 87, 87, 87, 160, 87, 87,
	-390, 87, -557, -355, 192, 92, -355, 365, -364, -363,
	17, -363, 92, -363, -470, 314, -470, 314, 246, -363,
	-232, 244, -184, 87, 160, -184, 92, -582, 430, 102,
	42, 102, 158, 422, -505, -174, 96, -252, 33, -219,
	-586, 96, 128, 664, 86, -359, -359, -359, -363, 87,
	160, -359, -359, 87, 87, 87, -272, 556, -483, 268,
	102, 146, 102, 146, 102, -361, -202, -363, -320, -575,
	159, -320, -483, -457, 319, 102, -386, 86, -386, 86,
	-466, 316, 86, 87, 160, -363, -339, -269, -268, -266,
	107, 118, 42, 408, -267, 96, 155, 302, 305, 304,
	280, 303, -298, -379, 83, 414, 342, 343, -411, 620,
	544, 253, 112, 113, 396, -380, 86, 86, 84, 322,
	86, 86, -546, 87, -308, -339, 42, -311, 42, 356,
	313, -309, -363, 155, -274, 87, -552, 92, -557, -582,
	92, -445, -587, 92, -174, -252, -576, -208, -432, -517,
	-390, 86, -390, 87, 86, 69, 11, 19, -383, -390,
	-398, 649, 651, 652, 252, -6, 630, 384, -289, 621,
	92, 21, 92, -526, 92, -433, -494, -142, -286, -351,
	285, 87, -292, 138, 556, 87, 87, -458, -458, -461,
	-460, -464, 460, 314, 468, -398, 92, 92, 87, 87,
	92, -363, 170, 92, 664, 92, -470, 92, -470, -363,
	314, -230, -257, -178, 556, -272, -245, -178, 21, 556,
	368, 42, 102, 42, 423, 92, -182, 128, 108, 109,
	-347, -348, 92, -416, -274, -276, 92, -316, -383, -383,
	-270, -184, 36, -271, -314, -411, 556, -141, -140, -270,
	556, 86, -484, 164, 102, 146, 102, 102, -320, -320,
	-484, -473, 21, 87, -452, 87, -452, 86, 128, -386,
	-472, -475, 62, -266, 107, -386, 92, -276, -277, 42,
	301, 297, 128, 128, -278, 42, 281, 282, -288, 86,
	312, 15, 198, 86, 113, 113, -250, -416, -416, -547,
	344, 345, 346, 351, 348, 349, 347, 350, -547, -416,
	-416, 86, -439, -438, -386, -359, -359, 155, -586, -209,
	-214, -545, -363, 253, 21, 21, -503, 556, 650, 86,
	86, -363, -363, -343, 622, 102, 92, 456, -289, -495,
	623, -522, -465, -274, 128, 87, 76, 554, 557, 87,
	-463, 120, 422, 426, -384, -387, 102, 104, 190, 158,
	87, 87, -363, -350, -349, 92, -232, 92, -232, 92,
	314, -470, 555, -179, 61, 502, 92, 93, 417, 92,
	93, 368, -174, 92, 665, 160, 128, 87, -453, 269,
	-184, 160, -314, -351, -142, -453, -273, -315, -363, 92,
	-501, 173, 335, 556, 102, 146, 102, -208, -485, 173,
	335, -456, 87, 87, 87, -452, 102, 87, -479, -476,
	86, -314, 271, 138, 92, 92, 102, 86, -512, 32,
	92, -417, 86, 87, 87, 87, 87, -416, 102, -274,
	-359, 87, 87, 160, 652, 86, -398, -398, 86, 21,
	-343, -496, 624, 92, -531, 459, -525, -523, 454, 455,
	456, 457, 92, 555, 66, 558, -462, -463, 426, -384,
	-387, 618, 466, 466, 466, 665, 160, 128, -232, -232,
	-470, 92, -233, -363, 312, 439, -348, 92, -419, -454,
	321, 21, -314, -359, -454, 87, 160, -359, -359, 335,
	102, 146, 102, -209, 335, -468, 320, 87, -479, -314,
	-478, -477, 319, 272, 86, 87, -390, -402, -359, 87,
	-291, -290, 552, -416, -419, 84, -419, 84, -419, 84,
	-419, 84, 87, -274, -363, 253, -137, 86, 87, 87,
	-344, -363, -526, 92, -533, 251, -529, -530, 458, -523,
	21, 456, 21, 21, -143, 160, 66, 117, 467, 467,
	467, -349, 92, 92, -232, -231, 36, 461, 395, -420,
	259, 356, 357, 96, 556, 342, 343, 361, 360, 359,
	362, 363, 21, -455, -274, -315, -383, -383, 102, 102,
	87, 160, -363, 268, 86, -397, -391, -390, 268, 87,
	-363, -297, -295, -296, 83, 473, 310, 311, 87, -547,
	-547, -547, -547, -298, 87, 160, -396, 87, 160, -540,
	86, 102, -528, -527, -529, 21, -526, 21, -526, -526,
	463, 556, -462, -232, 92, -359, -359, 92, 92, 341,
	-359, -359, -359, -359, -339, 86, -467, -477, -476, -397,
	87, 160, -438, -296, 83, -295, 83, 16, 15, -419,
	-419, -419, -419, 86, 87, -363, -543, 32, 87, -539,
	-538, -340, -534, -363, 459, 460, 92, -526, 128, 557,
	-617, -616, 641, 102, 102, -363, 102, 102, 102, 92,
	-452, -457, 87, -391, -294, 307, 308, 32, 173, -294,
	-396, -542, -541, -341, 87, 160, 159, 92, 558, 92,
	87, -473, 107, 42, 309, 87, 160, 128, -538, -363,
	-541, 42, -390, 159, -363,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 0, 0, 0, 0, 0, 721, 722, 0, 685,
	0, 0, 0, 0, 0, 0, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 534, 0, 0, 0,
	0, 804, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, -2, 734, 0,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 734, 0, 0,
	0, 812, 0, 0, 0, 855, 873, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1418, 1419,
	1420, 1421, 2225, 2195, -2, 1957, 1931, 2119, 2120, 2014,
	2027, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
	2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
	2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301,
	2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311,
	2312, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, -2,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
	2204, 2205, 2206, 2207, 2208, 2209, 2210, -2, -2, -2,
	2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223,
	2224, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
	2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
	2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 0, 314,
	312, 1901, 1931, 1957, 2014, 2027, 2028, 2067, 2119, 2120,
	2152, 2195, 2211, 2212, 2213, 2225, 0, 0, 1010, 0,
	782, 0, 0, 787, 1365, 782, 351, 723, 724, 812,
	838, 683, 0, 388, 0, 1947, 392, 2202, 0, 0,
	0, 0, 680, 382, 383, 384, 385, 386, 387, 0,
	0, 983, 0, 0, 378, 0, 345, 2017, 2224, 1422,
	0, 0, 0, 0, 0, 201, 1134, 203, 1136, 207,
	215, 0, 0, 0, 220, 221, 224, 225, 226, 227,
	228, 0, 232, 0, 234, 237, 0, 239, 240, 0,
	243, 244, 245, 0, 255, 256, 257, 1137, 1138, 1139,
	-2, 130, 1008, 1858, 1744, 0, 1751, 1764, 1775, 1504,
	1505, 1506, 1507, 0, 0, 0, 0, 0, 0, 1515,
	1516, 0, 1546, 2267, 2308, 2309, 0, 1524, 1525, 1526,
	1527, 1528, 1529, 0, 141, 153, 154, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 0, 1805, 1806, 1807, 1715, 1491,
	1418, 0, 2276, 0, 2298, 2303, 2304, 2305, 2306, 2297,
	0, 0, 1699, 0, 1689, 0, 0, -2, -2, 0,
	0, 2092, -2, 2310, 2311, 2312, 2273, 2294, 2302, 2277,
	2278, 2301, 2269, 2270, 2271, 2264, 2265, 2266, 2268, 2280,
	2282, 2293, 0, 2289, 2299, 2300, 2200, 0, 0, 2247,
	0, 0, 0, 2242, 155, 156, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1710, -2, 1712, -2, 1714, -2, 1717,
	-2, -2, -2, -2, 1722, 1723, -2, 1725, -2, -2,
	-2, -2, -2, -2, -2, 1701, 1702, 1703, 1704, 1693,
	1694, 1695, 1696, 1697, 1698, -2, -2, -2, 838, 931,
	0, 838, 0, 813, 860, 863, 866, 869, 816, 0,
	0, 103, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 329, 331, 0, 335, 0, 0,
	331, 328, 322, 0, 1176, 1176, 1176, 0, 0, 0,
	0, 1176, 1176, 1176, 1176, 1176, 0, 1176, 0, 0,
	0, 0, 0, 1176, 0, 1043, 1141, 1142, 1143, 1174,
	1175, 1250, 0, 0, 0, 739, 735, 736, 737, 738,
	826, 0, 828, 831, 0, 0, 660, 660, 898, 898,
	0, 606, 0, 0, 0, 660, 0, 620, 612, 0,
	0, 0, 660, 0, 0, 833, 833, 0, 663, 670,
	660, 660, -2, 660, 660, 657, 660, 0, 0, 1190,
	626, 627, 628, 612, 612, 631, 632, 633, 643, 644,
	671, 1882, 0, 0, 534, 534, 0, 534, 534, 0,
	534, 534, 534, 0, 741, 1973, 2062, 1954, 2033, 1911,
	2017, 2224, 0, 287, 2092, 292, 0, 1956, 1976, 0,
	0, 1995, 0, -2, 0, 367, 838, 0, 0, 812,
	0, 0, 0, 0, 534, 534, 534, 534, 534, 1249,
	534, 534, 534, 534, 534, 0, 0, 0, 534, 534,
	534, 534, 0, 874, 875, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 5, 6, 19, 0, 0,
	0, 0, 0, 0, 109, 108, 0, 1859, 1877, 1810,
	1811, 1812, 1864, 1814, 1868, 1868, 1868, 1868, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1868, 1868,
	0, 0, 1857, 1834, 1866, 1866, 1866, 1864, 1861, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1871, 1871, 1874, 1874, 1871, 0, 428,
	426, 427, 1740, 0, 0, 0, 0, 782, 786, 1363,
	0, 0, 0, 838, -2, 0, 0, 684, 389, 1423,
	0, 0, 393, 0, 394, 0, 0, 396, 0, 0,
	0, 417, 0, 420, 404, 405, 406, 407, 400, 0,
	181, 0, 380, 381, 0, 0, 347, 0, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 212, 208, 216,
	219, 229, 236, 0, 248, 250, 253, 209, 217, 222,
	223, 230, 251, 210, 213, 214, 218, 252, 254, 211,
	231, 235, 249, 233, 238, 241, 242, 247, 0, 182,
	0, 0, 0, 0, 0, 1750, 0, 0, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1744, 0, 0, 1510, 1511,
	1512, 1513, 0, 1517, 0, 1547, 0, 0, 0, 0,
	0, 0, 1804, 1808, 0, 1740, 1740, 0, 1740, 1736,
	0, 0, 0, 0, 0, 0, 1740, 1672, 0, 0,
	1674, 1690, 0, 0, 1676, 1677, 0, 1680, 1681, 1740,
	0, 1740, 1685, 1740, 1740, 1740, 1668, 1669, 0, 1736,
	1736, 1736, 1736, 0, 0, 1736, 1736, 1736, 1736, 1736,
	1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
	0, 0, 0, 0, 833, 0, 839, 0, -2, 0,
	857, 859, 861, 862, 864, 865, 867, 868, 870, 871,
	818, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	71, 73, 0, 0, 0, 0, 0, 0, 333, 0,
	338, 324, 2054, 0, 323, 0, 0, 0, 0, 0,
	1007, 0, 0, 1176, 1176, 1176, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 1176, 1176, 1176, 0,
	1196, 0, 0, 0, 741, 740, 0, 827, 0, 0,
	70, 595, 596, 597, 898, 0, 0, 599, 600, 0,
	601, 0, 0, 612, 660, 660, 618, 619, 614, 613,
	666, 667, 663, 0, 663, 663, 898, 0, 637, 638,
	639, 660, 660, 645, 834, 0, 646, 647, 663, 0,
	668, 669, 898, 0, 0, 898, 898, 0, 655, 656,
	658, 660, 0, 0, 1176, 0, 676, 614, 614, 1883,
	1884, 0, 0, 1187, 0, 0, 0, 0, 679, 0,
	0, 0, 444, 445, 0, 0, 742, 0, 266, 270,
	0, 273, 0, 2062, 0, 2062, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 310, 311, 0, 0, 0,
	0, 301, 304, 1357, 1358, 1131, 1132, 305, 306, 359,
	360, 0, 833, 856, 858, 852, 853, 854, 0, 72,
	0, 0, 0, 0, 0, 534, 0, 0, 0, 0,
	0, 717, 0, 1023, 719, 0, 0, 0, 0, 0,
	906, 900, 902, 978, 141, 876, 8, 126, 123, 0,
	19, 0, 0, 19, 19, 0, 19, 315, 0, 1880,
	1878, 1879, 1813, 1865, 0, 1839, 0, 1840, 1841, 1842,
	1853, 1854, 0, 0, 1835, 0, 1836, 1837, 1838, 1829,
	0, 1830, 1831, 0, 1832, 1833, 313, 425, 0, 0,
	1741, 1011, 0, 760, 774, 755, 0, 763, 0, 0,
	1365, 0, 0, 0, 0, 743, 774, 745, 0, 763,
	833, 810, 0, 788, 0, 0, 390, 0, 401, 395,
	0, 402, 397, 398, 0, 0, 419, 421, 422, 423,
	408, 409, 681, 376, 377, 368, 369, 370, 371, 372,
	373, 374, 375, 0, 0, 379, 151, 0, 348, 349,
	0, 0, 0, 195, 196, 197, 198, 199, 200, 202,
	186, 706, 708, 1123, 1135, 0, 1126, 0, 205, 246,
	178, 0, 0, 0, 1745, 1746, 1747, 1748, 1749, 1754,
	0, 1756, 1758, 1760, 1762, 0, 1780, -2, -2, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 1765, 1778, 1779, 0, 0, 0, 0, 0, 0,
	1776, 1776, 1771, 0, 1530, 1359, 1360, 1508, 0, 0,
	1544, 1548, 0, 0, 0, 0, 0, 0, 1159, 1864,
	0, 142, 1735, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 0, 0, 1744, 0, 0, 0, 1737, 1738,
	0, 0, 0, 1627, 0, 0, 1633, 1634, 1635, 0,
	769, 0, 1700, 1673, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 930, 932, 0, 778, 780, 781, 807,
	788, 814, 0, 0, 0, 101, 106, 0, 1217, 0,
	0, 0, 0, 0, 0, 0, 74, 1191, 75, 1193,
	342, 343, 0, 0, 337, 325, 2054, 327, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 1059,
	1060, 532, 1117, 0, 0, 0, 1133, 1163, 1172, 0,
	0, 0, 0, 0, 1223, 1045, 1050, 1051, 1052, 1046,
	1047, 1053, 1054, 0, 829, 0, 0, 947, 598, 661,
	662, 899, 602, 0, 0, 609, 2017, 614, 898, 898,
	621, 615, 622, 665, 623, 624, 625, 663, 898, 898,
	835, 660, 663, 648, 664, 663, 1365, 652, 0, 659,
	1365, 677, 1365, 0, 675, 629, 630, 1225, 831, 442,
	443, 448, 450, 0, 499, 499, 499, 482, 499, 0,
	0, 470, 1885, 0, 0, 0, 0, 479, 1885, 0,
	0, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 0, 0,
	1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
	1885, 0, 1885, 1885, 1885, 1885, 1885, 1342, 1885, 0,
	498, 1188, 489, 490, 491, 492, 497, 0, 0, 527,
	0, 0, 1058, 0, 532, 0, 0, 1100, 0, 0,
	911, 0, 912, 913, 914, 909, 949, 973, 973, 0,
	973, 953, 1365, 0, 0, 0, 278, 279, 267, 0,
	268, 0, 0, 281, 282, 0, 284, 285, 286, 293,
	1954, 2033, 288, 290, 0, 0, 294, 307, 308, 309,
	0, 0, 299, 300, 0, 0, 362, 363, 365, 0,
	788, 1192, 703, 1361, 704, 705, 709, 0, 0, 712,
	713, 714, 715, 716, 1025, 0, 0, 1109, 1110, 1111,
	1178, 898, 0, 907, 0, 903, 979, 0, 981, 0,
	0, 124, 19, 0, 117, 114, 0, 0, 0, 0,
	0, 1860, 1809, 1881, 0, 0, 0, 1862, 0, 0,
	0, 0, 0, 107, 790, 750, 0, 754, 771, 0,
	775, 0, 0, 767, 759, 764, 0, 0, 784, 751,
	1364, 0, 0, 0, 0, 744, 0, 0, 749, 788,
	0, 811, 840, 841, 844, 1424, 0, 403, 399, 418,
	0, 0, 0, 0, 189, 1120, 0, 190, 194, 184,
	0, 0, 0, 1125, 0, 1122, 1127, 0, 204, 0,
	0, 179, 180, 1208, 1217, 0, 0, 0, 1755, 1757,
	1759, 1761, 1763, 0, 1766, 1776, 1776, 1772, 0, 1767,
	0, 1769, 0, 1745, 1514, 0, 1549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 1617,
	1618, 0, 0, 1622, 0, 1624, 1625, 1626, 1628, 0,
	0, 0, 1632, 0, 1671, 1692, 1675, 1678, 0, 1682,
	0, 1684, 1686, 1687, 1688, 0, 838, 838, 0, 0,
	1588, 1588, 1588, 0, 0, 0, 0, 1588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1533,
	0, 1534, 1535, 0, 0, 0, 933, 808, 0, 0,
	0, 0, 0, 1215, 0, 91, 0, 0, 0, 0,
	96, 0, 0, 76, 344, 332, 334, 0, 326, 0,
	1177, 0, 0, 0, 0, 0, 1013, 1014, 1016, 0,
	1019, 1020, 1021, 1025, 831, 0, 831, 1070, 1885, 536,
	0, 0, 1119, 0, 1089, 0, 0, 0, -2, 0,
	0, 1172, 0, 0, 0, 1227, 0, 0, 0, 728,
	732, 23, 832, 0, 605, 603, 0, 607, 0, 608,
	660, 616, 617, 898, 640, 641, 0, 0, 898, 660,
	660, 651, 663, 672, 0, 673, 1365, 1227, 0, 0,
	1187, 1293, 1261, 460, 0, 1378, 1379, 500, 0, 1385,
	1394, 1176, 1456, 0, 1394, 0, 0, 1396, 1397, 0,
	0, 0, 0, 483, 484, 0, 469, 0, 0, 0,
	0, 0, 0, 468, 0, 0, 510, 0, 0, 0,
	0, 0, 1886, 1885, 1885, 0, 477, 478, 0, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 1885, 1885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 1350, 0, 1070, 1885, 0, 0, 0, 0, 536,
	1114, 1114, 1087, 1105, 0, 446, 447, 507, 0, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 831, 974, 0,
	976, 977, 951, -2, 0, 911, 956, 1740, 0, 271,
	272, 0, 0, 277, 295, 297, 269, 0, 0, 0,
	296, 298, 302, 303, 361, 364, 366, 850, 0, 0,
	1251, 0, 1026, 1027, 1029, 1030, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1938, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1024, 720, 1112, 1179, 889, 901, 908, 980,
	982, 142, 904, 0, 127, 19, 126, 118, 119, 0,
	19, 0, 0, 0, 0, 1870, 1869, 1855, 0, 1856,
	1867, 1872, 0, 1875, 0, 429, 794, 0, 0, 774,
	776, 0, 0, 774, 0, 0, 783, 0, 0, 0,
	0, 0, 0, 0, 774, 850, 790, 0, 847, 845,
	846, 0, 0, 682, 152, 424, 0, 0, 0, 0,
	0, 707, 0, 1124, 186, 0, 0, 206, 0, 0,
	0, 1217, 1212, 1739, 1768, 1770, 0, 1777, 1773, 1509,
	1518, 1545, 0, 0, 1551, 1563, 1563, 0, 0, 0,
	1554, 1868, 1868, 1557, 1864, 1866, 1864, 1563, 1563, 0,
	1160, 0, 1161, 844, 143, 0, 0, 1623, 0, 0,
	0, 770, 0, 0, 0, 1584, 1586, 1588, 1588, 1595,
	1589, 1596, 1597, 1588, 1588, 1588, 1588, 1602, 1588, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1582,
	0, 0, 1798, 1799, 779, 0, 0, 821, 822, 823,
	824, 825, 0, 0, 61, 61, 1217, 0, 100, 92,
	0, 0, 0, 0, 0, 336, 0, 77, 78, 80,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	1018, 0, 0, 0, 1371, 0, 1074, 1071, 1072, 1073,
	0, 1114, 537, 538, 539, 540, 0, 0, 0, 1118,
	0, 0, 1082, 0, 0, 0, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, -2, 1182, 0, 0, 0, 1371,
	1201, 0, 0, 1206, 1371, 1371, 0, 1235, 0, 1224,
	782, 0, -2, 0, 0, 730, 0, 0, 948, 604,
	610, 898, 634, 836, 837, 1365, 898, 898, 660, 678,
	674, 1235, 1226, 0, 449, 499, 0, 1281, 0, 0,
	1287, 0, 1294, 453, 0, 501, 0, 1384, 1412, 1395,
	1412, 1457, 1412, 1412, 1176, 0, 501, 0, 0, 471,
	0, 0, 0, 0, 0, 467, 504, 844, 454, 456,
	457, 458, 508, 509, 511, 0, 513, 514, 473, 485,
	486, 487, 488, 0, 0, 0, 480, 493, 494, 495,
	496, 455, 1310, 1311, 1312, 1315, 1316, 1317, 1318, 0,
	0, 1321, 1322, 1323, 1324, 1325, 1409, 1410, 1411, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1351, 1352, 1353, 1354,
	1355, 1356, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	0, 0, 1346, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 1114, 530, 0, 0, 531, 1089, 0, 1107,
	0, 1101, 1102, 0, 0, 752, 898, 354, 0, 943,
	934, 0, 918, 0, 920, 940, 921, 941, 0, 0,
	925, 0, 927, 0, 923, 924, 929, 922, 898, 910,
	950, 975, 952, 955, 957, 958, 964, 0, 0, 0,
	0, 265, 274, 275, 276, 283, 0, 556, 289, 806,
	0, 1362, 710, 711, 1252, 1253, 718, 0, 1031, 887,
	0, 0, 122, 125, 0, 120, 0, 0, 0, 0,
	112, 110, 1863, 0, 0, 796, 166, 0, 0, 0,
	772, 0, 777, 774, 758, 768, 757, 765, 766, 785,
	1366, 1367, 1368, 1369, 0, 774, 748, 747, 809, 794,
	842, 843, 0, 1425, 391, 0, 1121, 186, 191, 192,
	193, 187, 185, 1128, 0, 1130, 0, 1210, 0, 0,
	1774, 1550, 1519, 1552, 1564, 1565, 1553, 0, 1521, 1522,
	1555, 1556, 1558, 1559, 1560, 1561, 1562, 1523, 0, 1162,
	1619, 0, 1621, 1629, 1630, 0, 1679, 1683, 0, 0,
	0, 0, 0, 1593, 1594, 1598, 1599, 1600, 1601, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	838, 1583, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 63, 0, 63, 1216, 1218, 0, 978,
	0, 0, 97, 0, 0, 79, 81, 0, 2018, 0,
	0, 0, 0, 1178, 1006, 1009, 1015, 1017, 0, 0,
	0, 1372, 1373, 1375, 1376, 1377, 0, 1042, 0, 0,
	1062, 1063, 1064, 1076, 0, 542, 543, 0, 0, 0,
	555, 551, 552, 553, 533, 1113, 1096, 0, 0, 1085,
	0, 0, 1095, 0, 1183, 1885, 1885, 1885, 0, 0,
	1295, 1885, 1885, 0, 1203, 1205, 0, 0, 1299, 1238,
	0, 0, 1229, 0, 973, 0, 0, 898, 729, 732,
	733, 830, 611, 649, 653, 650, 898, 1238, 441, 1259,
	0, 0, 0, 0, 0, 1291, 0, 0, 1263, 0,
	472, 502, 0, -2, 0, 1413, 0, 1398, 1413, 0,
	0, 1412, 0, 461, 501, 0, 0, 0, 515, 520,
	521, 0, 517, 518, 1452, 0, 519, 0, 506, 0,
	512, 1313, 1314, 0, 1319, 1320, 0, 1344, 0, 0,
	0, 452, 522, 0, 0, 0, 523, 524, 529, 1115,
	1116, 1082, 0, 1096, 0, 1106, 0, 1103, 1104, 838,
	0, 0, 915, 944, 0, 0, 916, 0, 917, 919,
	942, 0, 936, 926, 928, 353, 959, 0, 0, 961,
	962, 963, 954, 291, 851, 1028, 0, 872, 0, 0,
	905, 0, 19, 0, 0, 115, 1873, 1876, 798, 0,
	795, 167, 0, 0, 0, 0, 762, 773, 756, 1370,
	746, 796, 848, 849, 188, 183, 1129, 1220, 0, 1211,
	0, 1476, 1532, 0, 1631, 0, 1588, 1585, 1588, 1587,
	1579, 0, 1536, 0, 1538, 1539, 1540, 0, 1542, 1543,
	0, 817, 0, 59, 0, 62, 60, 0, 99, 93,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	88, 0, 1048, 1299, 0, 1048, 1075, 1061, 0, 0,
	544, 545, 0, 548, 554, 1077, 0, 0, 1079, 1080,
	1081, 0, 0, 1093, 0, 0, 0, 0, 1173, 1189,
	0, 0, 0, -2, 0, -2, 1200, 0, 1244, 0,
	1236, 0, 1228, 0, 1231, 898, 898, -2, 726, 731,
	0, 654, 1244, 1261, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 1275, 503, 1414, -2, 1428,
	1430, 0, 1188, 1433, 1434, 0, 0, 0, 0, 0,
	0, 1483, 1442, 0, 0, 1446, 1447, 1448, 0, 0,
	1451, 0, 1792, 1793, 0, 1455, 0, 0, 0, 0,
	0, 0, 0, 1392, 462, 463, 0, 465, 466, 1885,
	1453, 505, 459, 1885, 475, 1343, 1347, 1348, 1345, 528,
	525, 526, 1085, 1088, 1099, 1108, 753, 833, 355, 356,
	945, 0, 935, 937, 968, 965, 0, 0, 1032, 888,
	896, 2247, 2249, 2246, 116, 121, 0, 0, 800, 0,
	797, 0, 791, 793, 177, 761, 798, 137, 169, 0,
	0, 1520, 0, 0, 0, 1620, 1670, 1591, 1592, 0,
	1580, 0, 1574, 1575, 1576, 1581, 0, 0, 820, 815,
	64, 95, 0, 98, 68, 1178, 0, 1178, 0, 0,
	0, 0, 1034, 1041, 1055, 1194, 1374, 1040, 0, 0,
	541, 546, 0, 549, 550, 1097, 1096, 0, 1083, 1084,
	0, 1091, 0, 0, 1184, 1185, 1186, 1296, 1297, 1298,
	1254, 1202, 0, -2, 1307, 0, 0, 1198, 1220, 1254,
	0, 0, 1232, 0, 1239, 0, 1237, 1230, 838, 727,
	1241, 451, 1293, 1283, 0, 1285, 0, 0, 0, 0,
	1264, -2, 0, 1429, 1431, 1432, 1435, 1436, 1437, 1488,
	1489, 1490, 0, 0, 1440, 1485, 1486, 1487, 1441, 0,
	0, 0, 0, 0, 1790, 1791, 1481, 0, 0, 1399,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1400, 0,
	0, 0, 1391, 1393, 464, 0, 0, 1885, 1098, 352,
	0, 0, 969, 971, 966, 967, 890, 0, 0, 0,
	0, 111, 113, 128, 0, 799, 168, 0, 800, 139,
	0, 160, 0, 1221, 0, 1531, 0, 0, 0, 1590,
	1577, 0, 0, 0, 0, 0, 1794, 1795, 1796, 0,
	1537, 1541, 94, 0, 66, 0, 83, 1178, 84, 1178,
	0, 0, 0, 0, 1056, 1057, 1065, 1066, 0, 1068,
	1069, 547, 1078, 1086, 1090, 1093, 0, 1145, 1256, 0,
	1204, 1187, 1309, 1885, 1207, 1256, 0, 1301, 1885, 1885,
	1222, 0, 1234, 0, 1246, 0, 1240, 833, 440, 0,
	1243, 1279, 1284, 1286, 1288, 0, 1292, 1290, 1265, -2,
	0, 1273, 0, 0, 1438, 1439, 0, 0, 1689, 1885,
	0, 1471, 0, 1145, 1145, 1145, 1145, 0, 516, 474,
	0, 946, 960, 0, 897, 0, 0, 0, 0, 0,
	789, 129, 0, 138, 157, 0, 170, 171, 0, 0,
	0, 0, 1213, 0, 1479, 1480, 0, 1566, 0, 0,
	0, 1570, 1571, 1572, 1573, 65, 68, 0, 85, 86,
	0, 1178, 0, 1033, 0, 1067, 1092, 1094, 1144, 1197,
	0, 1293, 1308, 0, 1199, 1300, 0, 0, 0, 1233,
	1245, 0, 1248, 725, 1242, 1260, 0, 1289, 1266, 1274,
	0, 1269, 0, 0, 0, 1484, 0, 1445, 0, 1450,
	1459, 1472, 0, 0, 1380, 0, 1382, 0, 1386, 0,
	1388, 0, 0, 476, 970, 972, 0, 1740, 892, 893,
	0, 802, 792, 140, 144, 0, 166, 163, 0, 172,
	0, 0, 0, 0, 1209, 0, 1477, 0, 1567, 1568,
	1569, 67, 69, 1178, 87, 0, 1035, 1036, 1049, 1146,
	1885, 1885, 0, 0, 0, 1152, 1153, 1885, 1885, 1885,
	1885, 1158, 0, 1281, 1313, 1302, 1303, 1304, 1247, 1280,
	1268, 0, -2, 1276, 0, 0, 1742, 1752, 1753, 1443,
	1449, 1458, 1460, 1461, 0, 1473, 1474, 1475, 1482, 1145,
	1145, 1145, 1145, 1390, 891, 0, 0, 801, 0, 131,
	0, 0, 161, 162, 164, 0, 173, 0, 175, 176,
	0, 0, 1578, 89, 1037, 0, 0, 1149, 1150, 0,
	0, 0, 0, 0, 1257, 0, 1259, 1270, -2, 0,
	1278, 0, 1444, 1462, 0, 1463, 0, 0, 0, 1381,
	1383, 1387, 1389, 1740, 894, 803, 1219, 0, 145, 0,
	147, 149, 150, 1415, 158, 159, 165, 174, 0, 0,
	1022, 1038, 0, 1147, 1148, 1151, 1154, 1155, 1156, 1157,
	0, 1261, 1277, 1743, 1464, 1466, 1467, 0, 0, 1465,
	0, 132, 133, 0, 146, 0, 0, 1214, 1478, 1039,
	1258, 1255, 1468, 1470, 1469, 895, 0, 0, 148, 1416,
	134, 135, 136, 0, 1417,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 666, 663,
	129, 128, 130, 3, 667, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 664, 141, 665, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:846
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:853
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:859
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:867
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:892
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:907
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:969
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:990
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:994
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1014
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1018
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1022
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1026
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1071
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1079
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1087
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1097
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1107
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1117
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1127
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1137
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1183
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1235
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1251
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1268
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1278
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1298
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1307
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1317
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1327
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1337
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1357
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1363
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1378
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1384
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1427
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1462
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1471
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1485
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1491
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1495
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1501
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1510
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1520
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1524
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1530
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1543
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1549
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1570
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1591
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1595
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1601
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1605
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1611
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1618
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1626
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1630
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1642
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1646
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1660
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1664
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1669
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1676
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1680
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1684
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1690
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1699
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1710
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1714
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1720
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1724
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1730
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1734
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1740
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1760
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1779
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1783
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1787
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1792
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1796
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1805
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1815
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1822
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1827
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1834
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1839
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1843
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1871
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1875
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1881
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1889
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1909
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1928
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1957
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1961
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1966
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1970
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1976
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2013
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2017
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2027
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2040
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2053
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2065
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2073
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2083
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2097
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2101
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2109
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2120
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2124
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2130
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2137
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2146
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2150
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2296
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2300
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2304
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2308
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2312
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2316
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2332
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2336
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2340
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2344
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2348
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2352
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2356
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2371
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2394
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2403
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2421
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2425
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2438
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2446
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2450
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2454
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2458
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2464
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2468
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2488
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2497
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2527
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2558
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2564
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2568
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2582
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2591
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2616
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2639
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2672
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2694
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2711
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2717
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2721
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2727
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2731
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2737
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2741
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2799
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2803
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2807
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2819
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2823
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2827
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2831
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2845
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2849
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2859
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2878
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2891
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2904
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2917
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2951
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2966
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2972
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2988
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2992
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2998
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3012
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3016
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3022
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3078
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3084
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3088
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3092
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3138
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3148
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3174
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3178
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3186
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3194
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3234
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3238
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3244
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3250
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3255
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3256
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3262
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3268
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3277
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3284
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3292
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3296
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3321
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3344
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3354
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3361
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3370
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3378
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3382
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3388
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3399
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3403
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3409
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3413
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3437
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3447
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3457
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3473
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3495
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3501
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3505
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3511
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3517
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3525
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3535
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3543
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3553
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3563
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3592
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3603
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3609
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3613
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3642
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3673
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3677
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3682
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3688
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3694
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3702
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3706
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3712
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3720
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3727
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3733
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3739
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3745
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3751
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3765
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3773
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3779
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3791
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3797
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3803
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3811
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3815
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3840
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3855
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3870
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3885
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3898
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3915
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3927
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3938
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3955
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3963
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3967
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3976
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3992
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4004
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4011
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4015
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4030
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4034
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4041
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4045
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4053
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4060
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4067
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4073
		{
			yyVAL.item = nil
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4078
		{
			yyVAL.item = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4133
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4139
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4154
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4170
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4184
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4212
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4227
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4231
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4242
		{
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4246
		{
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4251
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4271
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4291
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4297
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4303
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4309
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4315
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4324
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4328
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4332
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4344
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4367
		{
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4369
		{
		}
	case 640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4388
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4397
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4401
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4405
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4411
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4417
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4423
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4438
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4461
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4469
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4475
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4513
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4520
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4524
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4529
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4533
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4537
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4542
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4546
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4552
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4567
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4571
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4577
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4585
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4592
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4600
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4606
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4612
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4617
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4625
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4631
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4636
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4642
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4648
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4652
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4680
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4688
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4696
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4704
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4708
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4714
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4727
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4735
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4744
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4750
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4758
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4766
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4774
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4780
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4788
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4794
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4802
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4808
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4818
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4823
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4830
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4846
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4859
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4870
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4874
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4880
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4886
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4895
		{
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4897
		{
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4900
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4909
		{
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4913
		{
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4918
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4927
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4934
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4940
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4948
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4955
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4962
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4982
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4990
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5000
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5004
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5010
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5017
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5023
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5031
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5038
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5045
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5064
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5068
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5072
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5081
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5085
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5091
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5100
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5104
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5110
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5114
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5120
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5124
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5130
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5135
		{
		}
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5146
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5150
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5157
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5166
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5172
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5176
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5182
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5186
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5195
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5208
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5219
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5230
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5252
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5275
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5283
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5292
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5296
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5309
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5313
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5318
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5329
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5334
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5341
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5347
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5351
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5359
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5363
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5376
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5392
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5411
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5425
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5429
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5444
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5448
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5452
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5456
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5466
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5473
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5482
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5486
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5504
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5513
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5519
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5527
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5532
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5536
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5542
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5548
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5552
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5558
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5563
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5567
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5576
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5580
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5584
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5593
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5609
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5623
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5627
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5647
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5657
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5669
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5677
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5685
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5694
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5710
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5718
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5734
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5750
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5758
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5768
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5781
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5785
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5791
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5795
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5801
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5805
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5809
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5813
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5825
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5863
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5872
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5891
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5900
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5911
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5915
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5920
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5924
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5933
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5939
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5943
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5949
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5953
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5961
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5966
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5974
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5980
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5988
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5998
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6008
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6012
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6018
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6038
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6047
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6056
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6064
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6075
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6085
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6089
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6095
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6099
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6109
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6113
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6117
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6127
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6133
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6144
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6148
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6154
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6160
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6164
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6170
		{
			yyVAL.str = yyDollar[1].str
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6177
		{
			yyVAL.str = yyDollar[2].str
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6183
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6189
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6193
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6197
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6201
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6211
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6217
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6221
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6227
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6231
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6237
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6241
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6251
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6264
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6270
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6276
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6290
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6301
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6308
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6312
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6318
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6332
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6341
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6345
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6349
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6353
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6362
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6366
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6370
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6374
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6379
		{
			yyVAL.str = ""
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6383
		{
			yyVAL.str = yyDollar[1].str
		}
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6387
		{
			yyVAL.str = yyDollar[2].str
		}
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6393
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6397
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6402
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6406
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6410
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6414
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6418
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6424
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1006:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6466
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6479
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6485
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1009:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6491
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6504
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6509
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6516
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6523
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6527
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6533
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6539
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6544
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6548
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6552
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6556
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6563
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6596
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6601
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6608
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6615
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6619
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6625
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6635
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6639
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6645
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6651
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6657
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6661
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6667
		{
			yyVAL.str = ""
		}
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6674
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1040:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6680
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6695
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6712
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6729
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6733
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6739
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6743
		{
			yyVAL.str = "DEFINER = "
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6747
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6752
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6756
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = ""
		}
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6778
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6784
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6789
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6795
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6808
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6813
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6818
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6824
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6831
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6838
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6845
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6852
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6860
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6866
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6873
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6880
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6888
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6894
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6903
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6920
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6936
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6955
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6961
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6970
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6988
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6994
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7001
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7009
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7015
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7023
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7029
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7037
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7043
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7052
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7056
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7061
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7065
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7072
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7077
		{
			yyVAL.str = ""
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7081
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1098:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7087
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7100
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7111
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7115
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7121
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7127
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7133
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7140
		{
			yyVAL.str = ""
		}
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7144
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7149
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7153
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7159
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7167
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7175
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7183
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7196
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7201
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7213
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7224
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7333
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7337
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7343
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7356
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7360
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7366
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7379
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7383
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7387
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7396
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7402
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7409
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7415
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7424
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7431
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7442
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7446
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7452
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7461
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7465
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7469
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7474
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7478
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7482
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7486
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7492
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7527
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				} else if opt2.Async {
					opt1.Async = opt2.Async
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7563
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7569
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7581
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7587
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7593
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7599
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7605
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7611
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7622
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7633
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7644
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7650
		{
			io := tree.NewIndexOption()
			io.Async = true
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7659
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7663
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7669
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7683
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7731
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7750
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7761
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7765
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7770
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7774
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7783
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7789
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7793
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7799
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7808
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7817
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7823
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7827
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7833
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7844
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7850
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7868
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7886
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7904
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7920
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7924
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7933
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7945
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7954
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7966
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7976
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7986
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7997
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8007
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8018
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8026
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8037
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8044
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8054
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8067
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8075
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8084
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8093
		{
			yyVAL.str = ""
		}
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8097
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8103
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8107
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8112
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8116
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8123
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8135
		{
			yyVAL.str = ""
		}
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8139
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1222:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8145
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8166
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8180
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8184
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8188
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8198
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8205
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8212
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8219
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8226
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8230
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8234
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8242
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8249
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8260
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8267
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8278
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8284
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8290
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8294
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8301
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8308
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8315
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8322
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8326
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8331
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8335
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8339
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8348
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8365
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8373
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8381
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8385
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8397
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8401
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8407
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8411
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8417
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8430
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8448
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8454
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8458
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8464
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8473
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8484
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8488
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8493
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8497
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8503
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8508
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8516
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8520
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8530
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8534
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8545
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8553
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8561
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8569
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8580
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8589
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8599
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8609
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8613
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8622
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8628
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8632
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8638
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8647
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8657
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8661
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8667
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8671
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8677
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8686
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8696
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8700
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8706
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8710
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8714
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8720
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8724
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8728
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8732
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8740
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8744
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8757
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8761
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8765
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8769
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8773
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8777
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8781
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8785
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8789
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8793
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8797
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8803
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8809
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8813
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8817
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8821
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8831
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8837
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8843
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8849
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8855
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8861
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8865
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8869
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8873
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8878
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8889
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8893
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8899
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8910
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8914
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8924
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8928
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8932
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8936
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8940
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8954
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8958
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8967
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8973
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8981
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8985
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8992
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9001
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9009
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9016
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9024
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9031
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9035
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9041
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9045
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9049
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9055
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9059
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9065
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9078
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9091
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9132
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9174
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9188
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9194
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9207
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9220
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9233
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9246
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9261
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9271
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9277
		{
			yyVAL.str = ""
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9281
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9291
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9297
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9303
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9325
		{
			yyVAL.str = ""
		}
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9329
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9341
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9345
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9350
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9376
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9386
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9391
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9402
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9408
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9412
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9418
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9422
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9430
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9434
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9438
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9443
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9447
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9451
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9455
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9459
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9463
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9467
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9479
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9501
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9505
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9509
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9513
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9519
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9523
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9528
		{
			yyVAL.str = ""
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9532
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9538
		{
			yyVAL.str = ""
		}
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9542
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9548
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9565
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9572
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9579
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9586
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9593
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9602
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9608
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9618
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9622
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9626
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9630
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9635
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9650
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9655
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9659
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9663
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9667
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9671
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9676
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9680
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9685
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9689
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9705
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9711
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9715
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9723
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9727
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9731
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9735
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9739
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9747
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9751
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9755
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9759
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9765
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9769
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9773
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9777
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9781
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9785
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9789
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9793
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9797
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9801
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9843
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9847
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9851
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9864
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9868
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9872
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9876
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9880
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9890
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9894
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9898
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9902
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9906
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9910
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9914
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9918
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9931
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9937
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9946
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9966
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9976
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9986
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9995
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10005
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10015
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10025
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10034
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10044
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10048
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10053
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10057
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10063
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10067
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10073
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10082
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10094
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10111
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10141
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10154
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10166
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10180
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10195
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10210
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10227
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10242
		{
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10249
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10253
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10257
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10263
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10267
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10271
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10275
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10281
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10285
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10289
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10295
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10303
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10317
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10324
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10333
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10338
		{
			yyVAL.str = ","
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10342
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10347
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10351
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10356
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10363
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10389
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10401
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10413
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10424
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10446
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10456
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10477
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10488
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10499
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10510
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10521
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10532
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10543
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10554
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10576
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10587
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10598
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10609
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10620
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10631
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10655
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10664
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10673
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10682
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10691
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10711
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10721
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10730
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10739
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10748
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10757
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10769
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10780
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10793
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10805
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10828
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10864
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10877
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10890
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10902
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10911
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10940
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10949
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10960
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10971
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10980
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10992
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11002
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11012
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11021
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11032
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11041
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11051
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11060
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11069
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11079
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11083
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11089
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11093
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11112
		{
		}
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11114
		{
		}
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11168
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11172
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11176
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11182
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11187
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11191
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11197
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11201
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11207
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11211
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11218
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11222
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11226
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11235
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11239
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11243
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11248
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11252
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11258
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11262
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11278
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11282
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11286
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11290
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11294
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11302
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11306
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11310
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11314
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11318
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11322
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11326
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11330
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11334
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11338
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11348
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11354
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11358
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11365
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11379
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11383
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11387
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11391
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11395
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11399
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11403
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11409
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11413
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11417
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11421
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11427
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11440
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11445
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11451
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11455
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11468
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11473
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11477
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11481
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11485
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11489
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11496
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11500
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11504
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11508
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11515
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11526
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11531
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11537
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11549
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11561
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11573
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11586
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11612
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11638
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11664
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11677
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11690
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11703
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11718
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11745
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11787
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11823
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11859
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11876
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11888
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11908
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11928
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11964
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12016
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12028
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12040
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12064
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12100
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12112
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12124
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12136
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12149
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12162
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12188
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12203
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12211
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12220
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12230
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12253
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12258
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12264
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12271
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12275
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12280
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12284
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12290
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12296
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12303
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12310
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12319
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12326
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12333
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12342
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12346
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12350
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12356
		{
		}
	case 1881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12358
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12368
		{
			yyVAL.str = ""
		}
	case 1886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12372
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
